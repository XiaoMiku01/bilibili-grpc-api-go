// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: pgc/gaetway/vega/v1/vega.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vega_CreateTunnel_FullMethodName = "/pgc.gateway.vega.v1.Vega/CreateTunnel"
)

// VegaClient is the client API for Vega service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VegaClient interface {
	CreateTunnel(ctx context.Context, in *VegaFrame, opts ...grpc.CallOption) (*VegaFrame, error)
}

type vegaClient struct {
	cc grpc.ClientConnInterface
}

func NewVegaClient(cc grpc.ClientConnInterface) VegaClient {
	return &vegaClient{cc}
}

func (c *vegaClient) CreateTunnel(ctx context.Context, in *VegaFrame, opts ...grpc.CallOption) (*VegaFrame, error) {
	out := new(VegaFrame)
	err := c.cc.Invoke(ctx, Vega_CreateTunnel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VegaServer is the server API for Vega service.
// All implementations must embed UnimplementedVegaServer
// for forward compatibility
type VegaServer interface {
	CreateTunnel(context.Context, *VegaFrame) (*VegaFrame, error)
	mustEmbedUnimplementedVegaServer()
}

// UnimplementedVegaServer must be embedded to have forward compatible implementations.
type UnimplementedVegaServer struct {
}

func (UnimplementedVegaServer) CreateTunnel(context.Context, *VegaFrame) (*VegaFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedVegaServer) mustEmbedUnimplementedVegaServer() {}

// UnsafeVegaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VegaServer will
// result in compilation errors.
type UnsafeVegaServer interface {
	mustEmbedUnimplementedVegaServer()
}

func RegisterVegaServer(s grpc.ServiceRegistrar, srv VegaServer) {
	s.RegisterService(&Vega_ServiceDesc, srv)
}

func _Vega_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VegaFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegaServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vega_CreateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegaServer).CreateTunnel(ctx, req.(*VegaFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// Vega_ServiceDesc is the grpc.ServiceDesc for Vega service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vega_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgc.gateway.vega.v1.Vega",
	HandlerType: (*VegaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTunnel",
			Handler:    _Vega_CreateTunnel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pgc/gaetway/vega/v1/vega.proto",
}

const (
	VegaFrameDoc_Auth_FullMethodName       = "/pgc.gateway.vega.v1.VegaFrameDoc/Auth"
	VegaFrameDoc_Heartbeat_FullMethodName  = "/pgc.gateway.vega.v1.VegaFrameDoc/Heartbeat"
	VegaFrameDoc_MessageAck_FullMethodName = "/pgc.gateway.vega.v1.VegaFrameDoc/MessageAck"
	VegaFrameDoc_Subscribe_FullMethodName  = "/pgc.gateway.vega.v1.VegaFrameDoc/Subscribe"
)

// VegaFrameDocClient is the client API for VegaFrameDoc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VegaFrameDocClient interface {
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error)
	MessageAck(ctx context.Context, in *MessageAckReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type vegaFrameDocClient struct {
	cc grpc.ClientConnInterface
}

func NewVegaFrameDocClient(cc grpc.ClientConnInterface) VegaFrameDocClient {
	return &vegaFrameDocClient{cc}
}

func (c *vegaFrameDocClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := c.cc.Invoke(ctx, VegaFrameDoc_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegaFrameDocClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error) {
	out := new(HeartbeatResp)
	err := c.cc.Invoke(ctx, VegaFrameDoc_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegaFrameDocClient) MessageAck(ctx context.Context, in *MessageAckReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VegaFrameDoc_MessageAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegaFrameDocClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VegaFrameDoc_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VegaFrameDocServer is the server API for VegaFrameDoc service.
// All implementations must embed UnimplementedVegaFrameDocServer
// for forward compatibility
type VegaFrameDocServer interface {
	Auth(context.Context, *AuthReq) (*AuthResp, error)
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error)
	MessageAck(context.Context, *MessageAckReq) (*emptypb.Empty, error)
	Subscribe(context.Context, *SubscribeReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedVegaFrameDocServer()
}

// UnimplementedVegaFrameDocServer must be embedded to have forward compatible implementations.
type UnimplementedVegaFrameDocServer struct {
}

func (UnimplementedVegaFrameDocServer) Auth(context.Context, *AuthReq) (*AuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedVegaFrameDocServer) Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedVegaFrameDocServer) MessageAck(context.Context, *MessageAckReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAck not implemented")
}
func (UnimplementedVegaFrameDocServer) Subscribe(context.Context, *SubscribeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedVegaFrameDocServer) mustEmbedUnimplementedVegaFrameDocServer() {}

// UnsafeVegaFrameDocServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VegaFrameDocServer will
// result in compilation errors.
type UnsafeVegaFrameDocServer interface {
	mustEmbedUnimplementedVegaFrameDocServer()
}

func RegisterVegaFrameDocServer(s grpc.ServiceRegistrar, srv VegaFrameDocServer) {
	s.RegisterService(&VegaFrameDoc_ServiceDesc, srv)
}

func _VegaFrameDoc_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegaFrameDocServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegaFrameDoc_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegaFrameDocServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegaFrameDoc_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegaFrameDocServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegaFrameDoc_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegaFrameDocServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegaFrameDoc_MessageAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegaFrameDocServer).MessageAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegaFrameDoc_MessageAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegaFrameDocServer).MessageAck(ctx, req.(*MessageAckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegaFrameDoc_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegaFrameDocServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegaFrameDoc_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegaFrameDocServer).Subscribe(ctx, req.(*SubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VegaFrameDoc_ServiceDesc is the grpc.ServiceDesc for VegaFrameDoc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VegaFrameDoc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgc.gateway.vega.v1.VegaFrameDoc",
	HandlerType: (*VegaFrameDocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _VegaFrameDoc_Auth_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _VegaFrameDoc_Heartbeat_Handler,
		},
		{
			MethodName: "MessageAck",
			Handler:    _VegaFrameDoc_MessageAck_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _VegaFrameDoc_Subscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pgc/gaetway/vega/v1/vega.proto",
}
