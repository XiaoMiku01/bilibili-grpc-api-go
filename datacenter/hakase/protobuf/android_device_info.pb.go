// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: datacenter/hakase/protobuf/android_device_info.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AndroidDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ?
	Sdkver string `protobuf:"bytes,1,opt,name=sdkver,proto3" json:"sdkver,omitempty"`
	// 产品id
	// 粉 白 蓝 直播姬 HD 海外 OTT 漫画 TV野版 小视频 网易漫画 网易漫画 网易漫画HD 国际版 东南亚版
	// 1  2  3    4    5   6    7   8     9     10      11       12       13       14       30
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 版本号, 如 "7.39.0"
	AppVersion string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// 版本号, 如 "7390300"
	AppVersionCode string `protobuf:"bytes,4,opt,name=app_version_code,json=appVersionCode,proto3" json:"app_version_code,omitempty"`
	// 用户 mid
	Mid string `protobuf:"bytes,5,opt,name=mid,proto3" json:"mid,omitempty"`
	// 渠道号, 如 "master"
	Chid string `protobuf:"bytes,6,opt,name=chid,proto3" json:"chid,omitempty"`
	// APP 首次安装启动时间戳
	Fts int64 `protobuf:"varint,7,opt,name=fts,proto3" json:"fts,omitempty"`
	// 此处实际为 fp, 但不知为何命名为 buvid_local
	BuvidLocal string `protobuf:"bytes,8,opt,name=buvid_local,json=buvidLocal,proto3" json:"buvid_local,omitempty"`
	// 留空为 0
	First int32 `protobuf:"varint,9,opt,name=first,proto3" json:"first,omitempty"`
	// 进程名, 如 "tv.danmaku.bili"
	Proc string `protobuf:"bytes,10,opt,name=proc,proto3" json:"proc,omitempty"`
	// 网络信息, 为一数组直接 toString() 的结果
	// 如 """["dummy0,fe80::18d8:6ff:fe46:c2ba%dummy0,", "wlan0,fe80::a0f4:6dff:fea8:2d37%wlan0,192.168.1.5,", "lo,::1,127.0.0.1,", "rmnet_ims00,fe80::5a02:3ff:fe04:512%rmnet_ims00,2409:815a:7c38:cee1:1773:d0b9:d163:b023,"]"""
	Net string `protobuf:"bytes,11,opt,name=net,proto3" json:"net,omitempty"`
	// 手机无线电固件版本号(`Build.getRadioVersion()`). 如 `21C20B686S000C000,21C20B686S000C000`.
	Band string `protobuf:"bytes,12,opt,name=band,proto3" json:"band,omitempty"`
	// OS 版本号, 如 "12"
	Osver string `protobuf:"bytes,13,opt,name=osver,proto3" json:"osver,omitempty"`
	// 当前毫秒时间戳
	T int64 `protobuf:"varint,14,opt,name=t,proto3" json:"t,omitempty"`
	// CPU 逻辑核心计数
	CpuCount int32 `protobuf:"varint,15,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	// 手机 Model, 如 "NOH-AN01"
	Model string `protobuf:"bytes,16,opt,name=model,proto3" json:"model,omitempty"`
	// 手机品牌, 如 "HUAWEI"
	Brand string `protobuf:"bytes,17,opt,name=brand,proto3" json:"brand,omitempty"`
	// 屏幕信息, 如 "1288,2646,560", 即 "{width},{height},{pixel}"
	Screen string `protobuf:"bytes,18,opt,name=screen,proto3" json:"screen,omitempty"`
	// CPU 型号, 留空或根据实际情况确定
	CpuModel string `protobuf:"bytes,19,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	// 蓝牙 MAC, 留空或根据实际情况确定
	Btmac string `protobuf:"bytes,20,opt,name=btmac,proto3" json:"btmac,omitempty"`
	// Linux 内核 bootid
	Boot int64 `protobuf:"varint,21,opt,name=boot,proto3" json:"boot,omitempty"`
	// 模拟器(?), 如 "000"
	Emu string `protobuf:"bytes,22,opt,name=emu,proto3" json:"emu,omitempty"`
	// 移动网络 MCC MNC, 如中国移动为 46007
	Oid string `protobuf:"bytes,23,opt,name=oid,proto3" json:"oid,omitempty"`
	// 当前网络类型, 如 "WIFI", 见 bilibili.metadata.network.NetworkType
	Network string `protobuf:"bytes,24,opt,name=network,proto3" json:"network,omitempty"`
	// 运行内存(Byte)
	Mem int64 `protobuf:"varint,25,opt,name=mem,proto3" json:"mem,omitempty"`
	// 传感器信息, 为一数组直接 toString() 的结果
	// 如 """["accelerometer-icm20690,invensense", "akm-akm09918,akm", "orientation,huawei", "als-tcs3718,ams", "proximity-tcs3718,ams", "gyroscope-icm20690,invensense", "gravity,huawei", "linear Acceleration,huawei", "rotation Vector,huawei", "airpress-bmp280,bosch", "HALL sensor,huawei", "uncalibrated Magnetic Field,Asahi Kasei Microdevices", "game Rotation Vector,huawei", "uncalibrated Gyroscope,STMicroelectronics", "significant Motion,huawei", "step Detector,huawei", "step counter,huawei", "geomagnetic Rotation Vector,huawei", "phonecall sensor,huawei", "RPC sensor,huawei", "agt,huawei", "color sensor,huawei", "uncalibrated Accelerometer,huawei", "drop sensor,huawei"]"""
	Sensor string `protobuf:"bytes,26,opt,name=sensor,proto3" json:"sensor,omitempty"`
	// CPU 频率, 如 2045000
	CpuFreq int64 `protobuf:"varint,27,opt,name=cpu_freq,json=cpuFreq,proto3" json:"cpu_freq,omitempty"`
	// CPU 架构, 如 "ARM"
	CpuVendor string `protobuf:"bytes,28,opt,name=cpu_vendor,json=cpuVendor,proto3" json:"cpu_vendor,omitempty"`
	// ?
	Sim string `protobuf:"bytes,29,opt,name=sim,proto3" json:"sim,omitempty"`
	// 光照传感器数值
	Brightness int32 `protobuf:"varint,30,opt,name=brightness,proto3" json:"brightness,omitempty"`
	// Android Build.prop 信息, key 包括 net.hostname, ro.boot.hardware, etc.
	// 具体 key-value 需要技术手段自行确定
	Props map[string]string `protobuf:"bytes,31,rep,name=props,proto3" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 系统信息, key 包括 product, cpu_model_name, display, cpu_abi_list, etc.
	// 具体 key-value 需要技术手段自行确定
	Sys map[string]string `protobuf:"bytes,32,rep,name=sys,proto3" json:"sys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Wifi MAC, 一般无法获取, 留空
	Wifimac string `protobuf:"bytes,33,opt,name=wifimac,proto3" json:"wifimac,omitempty"`
	// Android ID
	Adid string `protobuf:"bytes,34,opt,name=adid,proto3" json:"adid,omitempty"`
	// OS 名称, 如 "android"
	Os string `protobuf:"bytes,35,opt,name=os,proto3" json:"os,omitempty"`
	// IMEI, 一般无法获取, 留空
	Imei string `protobuf:"bytes,36,opt,name=imei,proto3" json:"imei,omitempty"`
	// ?, 留空
	Cell string `protobuf:"bytes,37,opt,name=cell,proto3" json:"cell,omitempty"`
	// IMSI, 一般无法获取, 留空
	Imsi string `protobuf:"bytes,38,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// ICCID, 一般无法获取, 留空
	Iccid string `protobuf:"bytes,39,opt,name=iccid,proto3" json:"iccid,omitempty"`
	// 摄像头数量, 留空
	Camcnt int32 `protobuf:"varint,40,opt,name=camcnt,proto3" json:"camcnt,omitempty"`
	// 摄像头像素, 留空
	Campx string `protobuf:"bytes,41,opt,name=campx,proto3" json:"campx,omitempty"`
	// 手机内置存储空间(Byte)
	TotalSpace int64 `protobuf:"varint,42,opt,name=total_space,json=totalSpace,proto3" json:"total_space,omitempty"`
	// ?, 例如 "false"
	Axposed string `protobuf:"bytes,43,opt,name=axposed,proto3" json:"axposed,omitempty"`
	// ?, 留空
	Maps string `protobuf:"bytes,44,opt,name=maps,proto3" json:"maps,omitempty"`
	// 如: "/data/user/0/tv.danmaku.bili/files"
	Files string `protobuf:"bytes,45,opt,name=files,proto3" json:"files,omitempty"`
	// 是否为虚拟化(?), 如 "0"
	Virtual string `protobuf:"bytes,46,opt,name=virtual,proto3" json:"virtual,omitempty"`
	// 虚拟进程, 如 "[]"
	Virtualproc string `protobuf:"bytes,47,opt,name=virtualproc,proto3" json:"virtualproc,omitempty"`
	// ?, 留空
	Gadid string `protobuf:"bytes,48,opt,name=gadid,proto3" json:"gadid,omitempty"`
	// ?, 留空
	Glimit string `protobuf:"bytes,49,opt,name=glimit,proto3" json:"glimit,omitempty"`
	// 设备安装的 APP 列表, 如 "[]"
	Apps string `protobuf:"bytes,50,opt,name=apps,proto3" json:"apps,omitempty"`
	// 客户端 GUID
	Guid string `protobuf:"bytes,51,opt,name=guid,proto3" json:"guid,omitempty"`
	// ?, 区分于用户 UID
	Uid string `protobuf:"bytes,52,opt,name=uid,proto3" json:"uid,omitempty"`
	// ?, 留空
	Root int32 `protobuf:"varint,53,opt,name=root,proto3" json:"root,omitempty"`
	// 摄像头放大倍数(?), 留空
	Camzoom string `protobuf:"bytes,54,opt,name=camzoom,proto3" json:"camzoom,omitempty"`
	// 摄像头闪光灯(?), 留空
	Camlight string `protobuf:"bytes,55,opt,name=camlight,proto3" json:"camlight,omitempty"`
	// OAID 匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 默认 "00000000-0000-0000-0000-000000000000"
	Oaid string `protobuf:"bytes,56,opt,name=oaid,proto3" json:"oaid,omitempty"`
	// UDID 设备唯一标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
	Udid string `protobuf:"bytes,57,opt,name=udid,proto3" json:"udid,omitempty"`
	// VAID 开发者匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
	Vaid string `protobuf:"bytes,58,opt,name=vaid,proto3" json:"vaid,omitempty"`
	// AAID, 应用匿名设备标识符, 参见 T/TAF 095-2021 安卓系统补充设备标识技术规范, 可留空
	Aaid string `protobuf:"bytes,59,opt,name=aaid,proto3" json:"aaid,omitempty"`
	// ?, 设置为 "[]"
	Androidapp20 string `protobuf:"bytes,60,opt,name=androidapp20,proto3" json:"androidapp20,omitempty"`
	// ?, 留空
	Androidappcnt int32 `protobuf:"varint,61,opt,name=androidappcnt,proto3" json:"androidappcnt,omitempty"`
	// ?, 设置为 "[]"
	Androidsysapp20 string `protobuf:"bytes,62,opt,name=androidsysapp20,proto3" json:"androidsysapp20,omitempty"`
	// 当前剩余电量, 如 100
	Battery int32 `protobuf:"varint,63,opt,name=battery,proto3" json:"battery,omitempty"`
	// Android 监听电量状态, 如 "BATTERY_STATUS_DISCHARGING"
	BatteryState string `protobuf:"bytes,64,opt,name=battery_state,json=batteryState,proto3" json:"battery_state,omitempty"`
	// Wifi BSSID, 一般无法获取, 留空
	Bssid string `protobuf:"bytes,65,opt,name=bssid,proto3" json:"bssid,omitempty"`
	// ?, 如 "NOH-AN01 4.0.0.102(DEVC00E100R7P5)"
	BuildId string `protobuf:"bytes,67,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// ISO 国家代码, 如 "CN"
	CountryIso string `protobuf:"bytes,68,opt,name=country_iso,json=countryIso,proto3" json:"country_iso,omitempty"`
	// 可用运行内存(Byte)
	FreeMemory int64 `protobuf:"varint,70,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"`
	// 可用内置存储空间(Byte)
	Fstorage string `protobuf:"bytes,71,opt,name=fstorage,proto3" json:"fstorage,omitempty"`
	// Linux kernel version
	KernelVersion string `protobuf:"bytes,74,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// 语言, 如 "zh"
	Languages string `protobuf:"bytes,75,opt,name=languages,proto3" json:"languages,omitempty"`
	// Wifi 网卡 MAC(?), 留空
	Mac string `protobuf:"bytes,76,opt,name=mac,proto3" json:"mac,omitempty"`
	// 当前连接 Wifi 的 SSID, 留空
	Ssid string `protobuf:"bytes,79,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// ?, 留空
	Systemvolume int32 `protobuf:"varint,80,opt,name=systemvolume,proto3" json:"systemvolume,omitempty"`
	// Wifi 网卡 MAC 列表(?), 留空
	Wifimaclist string `protobuf:"bytes,81,opt,name=wifimaclist,proto3" json:"wifimaclist,omitempty"`
	// 运行内存(Byte)
	Memory int64 `protobuf:"varint,82,opt,name=memory,proto3" json:"memory,omitempty"`
	// 当前剩余电量, 如 "100"
	StrBattery string `protobuf:"bytes,83,opt,name=str_battery,json=strBattery,proto3" json:"str_battery,omitempty"`
	// 设备是否 Root(?), 留空
	IsRoot bool `protobuf:"varint,84,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	// 光照传感器数值字符串
	StrBrightness string `protobuf:"bytes,85,opt,name=str_brightness,json=strBrightness,proto3" json:"str_brightness,omitempty"`
	// 产品id, 见 2
	StrAppId string `protobuf:"bytes,86,opt,name=str_app_id,json=strAppId,proto3" json:"str_app_id,omitempty"`
	// 当前 IP(?), 留空
	Ip string `protobuf:"bytes,87,opt,name=ip,proto3" json:"ip,omitempty"`
	// 留空即可
	UserAgent string `protobuf:"bytes,88,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// ?, 如: "1.25"
	LightIntensity string `protobuf:"bytes,89,opt,name=light_intensity,json=lightIntensity,proto3" json:"light_intensity,omitempty"`
	// 设备 xyz 方向角度
	DeviceAngle []float32 `protobuf:"fixed32,90,rep,packed,name=device_angle,json=deviceAngle,proto3" json:"device_angle,omitempty"`
	// GPS 传感器数量(或者是否有 GPS 传感器?), 如 "1"
	GpsSensor int64 `protobuf:"varint,91,opt,name=gps_sensor,json=gpsSensor,proto3" json:"gps_sensor,omitempty"`
	// 速度传感器数量(或者是否有速度传感器?), 如 "1"
	SpeedSensor int64 `protobuf:"varint,92,opt,name=speed_sensor,json=speedSensor,proto3" json:"speed_sensor,omitempty"`
	// 线性加速度传感器数量(或者是否有线性加速度传感器?), 如 "1"
	LinearSpeedSensor int64 `protobuf:"varint,93,opt,name=linear_speed_sensor,json=linearSpeedSensor,proto3" json:"linear_speed_sensor,omitempty"`
	// 陀螺仪传感器数量(或者是否有陀螺仪传感器?), 如 "1"
	GyroscopeSensor int64 `protobuf:"varint,94,opt,name=gyroscope_sensor,json=gyroscopeSensor,proto3" json:"gyroscope_sensor,omitempty"`
	// 生物识别传感器数量(或者是否有生物识别传感器?), 如 "1"
	Biometric int64 `protobuf:"varint,95,opt,name=biometric,proto3" json:"biometric,omitempty"`
	// 生物识别传感器类型(?), 如 "touchid"
	Biometrics []string `protobuf:"bytes,96,rep,name=biometrics,proto3" json:"biometrics,omitempty"`
	// 上次 Crash Dump 时的毫秒时间戳
	LastDumpTs int64 `protobuf:"varint,97,opt,name=last_dump_ts,json=lastDumpTs,proto3" json:"last_dump_ts,omitempty"`
	// 留空即可
	Location string `protobuf:"bytes,98,opt,name=location,proto3" json:"location,omitempty"`
	// 留空即可
	Country string `protobuf:"bytes,99,opt,name=country,proto3" json:"country,omitempty"`
	// 留空即可
	City string `protobuf:"bytes,100,opt,name=city,proto3" json:"city,omitempty"`
	// ?, 默认为 0
	DataActivityState int32 `protobuf:"varint,101,opt,name=data_activity_state,json=dataActivityState,proto3" json:"data_activity_state,omitempty"`
	// ?, 默认为 0
	DataConnectState int32 `protobuf:"varint,102,opt,name=data_connect_state,json=dataConnectState,proto3" json:"data_connect_state,omitempty"`
	// ?, 默认为 0
	DataNetworkType int32 `protobuf:"varint,103,opt,name=data_network_type,json=dataNetworkType,proto3" json:"data_network_type,omitempty"`
	// ?, 默认为 0
	VoiceNetworkType int32 `protobuf:"varint,104,opt,name=voice_network_type,json=voiceNetworkType,proto3" json:"voice_network_type,omitempty"`
	// ?, 默认为 0
	VoiceServiceState int32 `protobuf:"varint,105,opt,name=voice_service_state,json=voiceServiceState,proto3" json:"voice_service_state,omitempty"`
	// USB 是否连接, 启用为 "1", 否则为 "0"
	UsbConnected int32 `protobuf:"varint,106,opt,name=usb_connected,json=usbConnected,proto3" json:"usb_connected,omitempty"`
	// ADB 是否启用, 启用为 "1", 否则为 "0"
	AdbEnabled int32 `protobuf:"varint,107,opt,name=adb_enabled,json=adbEnabled,proto3" json:"adb_enabled,omitempty"`
	// 系统 UI 软件版本(?), 如 "14.0.0"
	UiVersion string `protobuf:"bytes,108,opt,name=ui_version,json=uiVersion,proto3" json:"ui_version,omitempty"`
	// 辅助服务
	AccessibilityService []string `protobuf:"bytes,109,rep,name=accessibility_service,json=accessibilityService,proto3" json:"accessibility_service,omitempty"`
	// 传感器信息(需要和前面的 sensor 对应)
	SensorsInfo []*SensorInfo `protobuf:"bytes,110,rep,name=sensors_info,json=sensorsInfo,proto3" json:"sensors_info,omitempty"`
	// DrmId
	Drmid string `protobuf:"bytes,111,opt,name=drmid,proto3" json:"drmid,omitempty"`
	// 是否存在电池
	BatteryPresent bool `protobuf:"varint,112,opt,name=battery_present,json=batteryPresent,proto3" json:"battery_present,omitempty"`
	// 电池技术, 如 "Li-poly"
	BatteryTechnology string `protobuf:"bytes,113,opt,name=battery_technology,json=batteryTechnology,proto3" json:"battery_technology,omitempty"`
	// 电池温度(m℃)
	BatteryTemperature int32 `protobuf:"varint,114,opt,name=battery_temperature,json=batteryTemperature,proto3" json:"battery_temperature,omitempty"`
	// 电池电压(mV)
	BatteryVoltage int32 `protobuf:"varint,115,opt,name=battery_voltage,json=batteryVoltage,proto3" json:"battery_voltage,omitempty"`
	// 电池是否被拔开(?), 可以为 0
	BatteryPlugged int32 `protobuf:"varint,116,opt,name=battery_plugged,json=batteryPlugged,proto3" json:"battery_plugged,omitempty"`
	// 电池健康, 如 2
	BatteryHealth int32 `protobuf:"varint,117,opt,name=battery_health,json=batteryHealth,proto3" json:"battery_health,omitempty"`
	// 留空即可
	CpuAbiList []string `protobuf:"bytes,118,rep,name=cpu_abi_list,json=cpuAbiList,proto3" json:"cpu_abi_list,omitempty"`
	// 留空即可
	CpuAbiLibc string `protobuf:"bytes,119,opt,name=cpu_abi_libc,json=cpuAbiLibc,proto3" json:"cpu_abi_libc,omitempty"`
	// 留空即可
	CpuAbiLibc64 string `protobuf:"bytes,120,opt,name=cpu_abi_libc64,json=cpuAbiLibc64,proto3" json:"cpu_abi_libc64,omitempty"`
	// 留空即可
	CpuProcessor string `protobuf:"bytes,121,opt,name=cpu_processor,json=cpuProcessor,proto3" json:"cpu_processor,omitempty"`
	// 留空即可
	CpuModelName string `protobuf:"bytes,122,opt,name=cpu_model_name,json=cpuModelName,proto3" json:"cpu_model_name,omitempty"`
	// 留空即可
	CpuHardware string `protobuf:"bytes,123,opt,name=cpu_hardware,json=cpuHardware,proto3" json:"cpu_hardware,omitempty"`
	// 留空即可
	CpuFeatures string `protobuf:"bytes,124,opt,name=cpu_features,json=cpuFeatures,proto3" json:"cpu_features,omitempty"`
}

func (x *AndroidDeviceInfo) Reset() {
	*x = AndroidDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacenter_hakase_protobuf_android_device_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidDeviceInfo) ProtoMessage() {}

func (x *AndroidDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datacenter_hakase_protobuf_android_device_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidDeviceInfo.ProtoReflect.Descriptor instead.
func (*AndroidDeviceInfo) Descriptor() ([]byte, []int) {
	return file_datacenter_hakase_protobuf_android_device_info_proto_rawDescGZIP(), []int{0}
}

func (x *AndroidDeviceInfo) GetSdkver() string {
	if x != nil {
		return x.Sdkver
	}
	return ""
}

func (x *AndroidDeviceInfo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AndroidDeviceInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *AndroidDeviceInfo) GetAppVersionCode() string {
	if x != nil {
		return x.AppVersionCode
	}
	return ""
}

func (x *AndroidDeviceInfo) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetChid() string {
	if x != nil {
		return x.Chid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetFts() int64 {
	if x != nil {
		return x.Fts
	}
	return 0
}

func (x *AndroidDeviceInfo) GetBuvidLocal() string {
	if x != nil {
		return x.BuvidLocal
	}
	return ""
}

func (x *AndroidDeviceInfo) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *AndroidDeviceInfo) GetProc() string {
	if x != nil {
		return x.Proc
	}
	return ""
}

func (x *AndroidDeviceInfo) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBand() string {
	if x != nil {
		return x.Band
	}
	return ""
}

func (x *AndroidDeviceInfo) GetOsver() string {
	if x != nil {
		return x.Osver
	}
	return ""
}

func (x *AndroidDeviceInfo) GetT() int64 {
	if x != nil {
		return x.T
	}
	return 0
}

func (x *AndroidDeviceInfo) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *AndroidDeviceInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *AndroidDeviceInfo) GetScreen() string {
	if x != nil {
		return x.Screen
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBtmac() string {
	if x != nil {
		return x.Btmac
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBoot() int64 {
	if x != nil {
		return x.Boot
	}
	return 0
}

func (x *AndroidDeviceInfo) GetEmu() string {
	if x != nil {
		return x.Emu
	}
	return ""
}

func (x *AndroidDeviceInfo) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *AndroidDeviceInfo) GetMem() int64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *AndroidDeviceInfo) GetSensor() string {
	if x != nil {
		return x.Sensor
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCpuFreq() int64 {
	if x != nil {
		return x.CpuFreq
	}
	return 0
}

func (x *AndroidDeviceInfo) GetCpuVendor() string {
	if x != nil {
		return x.CpuVendor
	}
	return ""
}

func (x *AndroidDeviceInfo) GetSim() string {
	if x != nil {
		return x.Sim
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBrightness() int32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *AndroidDeviceInfo) GetProps() map[string]string {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *AndroidDeviceInfo) GetSys() map[string]string {
	if x != nil {
		return x.Sys
	}
	return nil
}

func (x *AndroidDeviceInfo) GetWifimac() string {
	if x != nil {
		return x.Wifimac
	}
	return ""
}

func (x *AndroidDeviceInfo) GetAdid() string {
	if x != nil {
		return x.Adid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AndroidDeviceInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *AndroidDeviceInfo) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *AndroidDeviceInfo) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCamcnt() int32 {
	if x != nil {
		return x.Camcnt
	}
	return 0
}

func (x *AndroidDeviceInfo) GetCampx() string {
	if x != nil {
		return x.Campx
	}
	return ""
}

func (x *AndroidDeviceInfo) GetTotalSpace() int64 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *AndroidDeviceInfo) GetAxposed() string {
	if x != nil {
		return x.Axposed
	}
	return ""
}

func (x *AndroidDeviceInfo) GetMaps() string {
	if x != nil {
		return x.Maps
	}
	return ""
}

func (x *AndroidDeviceInfo) GetFiles() string {
	if x != nil {
		return x.Files
	}
	return ""
}

func (x *AndroidDeviceInfo) GetVirtual() string {
	if x != nil {
		return x.Virtual
	}
	return ""
}

func (x *AndroidDeviceInfo) GetVirtualproc() string {
	if x != nil {
		return x.Virtualproc
	}
	return ""
}

func (x *AndroidDeviceInfo) GetGadid() string {
	if x != nil {
		return x.Gadid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetGlimit() string {
	if x != nil {
		return x.Glimit
	}
	return ""
}

func (x *AndroidDeviceInfo) GetApps() string {
	if x != nil {
		return x.Apps
	}
	return ""
}

func (x *AndroidDeviceInfo) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetRoot() int32 {
	if x != nil {
		return x.Root
	}
	return 0
}

func (x *AndroidDeviceInfo) GetCamzoom() string {
	if x != nil {
		return x.Camzoom
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCamlight() string {
	if x != nil {
		return x.Camlight
	}
	return ""
}

func (x *AndroidDeviceInfo) GetOaid() string {
	if x != nil {
		return x.Oaid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetUdid() string {
	if x != nil {
		return x.Udid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetVaid() string {
	if x != nil {
		return x.Vaid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetAaid() string {
	if x != nil {
		return x.Aaid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetAndroidapp20() string {
	if x != nil {
		return x.Androidapp20
	}
	return ""
}

func (x *AndroidDeviceInfo) GetAndroidappcnt() int32 {
	if x != nil {
		return x.Androidappcnt
	}
	return 0
}

func (x *AndroidDeviceInfo) GetAndroidsysapp20() string {
	if x != nil {
		return x.Androidsysapp20
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBattery() int32 {
	if x != nil {
		return x.Battery
	}
	return 0
}

func (x *AndroidDeviceInfo) GetBatteryState() string {
	if x != nil {
		return x.BatteryState
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCountryIso() string {
	if x != nil {
		return x.CountryIso
	}
	return ""
}

func (x *AndroidDeviceInfo) GetFreeMemory() int64 {
	if x != nil {
		return x.FreeMemory
	}
	return 0
}

func (x *AndroidDeviceInfo) GetFstorage() string {
	if x != nil {
		return x.Fstorage
	}
	return ""
}

func (x *AndroidDeviceInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *AndroidDeviceInfo) GetLanguages() string {
	if x != nil {
		return x.Languages
	}
	return ""
}

func (x *AndroidDeviceInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *AndroidDeviceInfo) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetSystemvolume() int32 {
	if x != nil {
		return x.Systemvolume
	}
	return 0
}

func (x *AndroidDeviceInfo) GetWifimaclist() string {
	if x != nil {
		return x.Wifimaclist
	}
	return ""
}

func (x *AndroidDeviceInfo) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *AndroidDeviceInfo) GetStrBattery() string {
	if x != nil {
		return x.StrBattery
	}
	return ""
}

func (x *AndroidDeviceInfo) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *AndroidDeviceInfo) GetStrBrightness() string {
	if x != nil {
		return x.StrBrightness
	}
	return ""
}

func (x *AndroidDeviceInfo) GetStrAppId() string {
	if x != nil {
		return x.StrAppId
	}
	return ""
}

func (x *AndroidDeviceInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AndroidDeviceInfo) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AndroidDeviceInfo) GetLightIntensity() string {
	if x != nil {
		return x.LightIntensity
	}
	return ""
}

func (x *AndroidDeviceInfo) GetDeviceAngle() []float32 {
	if x != nil {
		return x.DeviceAngle
	}
	return nil
}

func (x *AndroidDeviceInfo) GetGpsSensor() int64 {
	if x != nil {
		return x.GpsSensor
	}
	return 0
}

func (x *AndroidDeviceInfo) GetSpeedSensor() int64 {
	if x != nil {
		return x.SpeedSensor
	}
	return 0
}

func (x *AndroidDeviceInfo) GetLinearSpeedSensor() int64 {
	if x != nil {
		return x.LinearSpeedSensor
	}
	return 0
}

func (x *AndroidDeviceInfo) GetGyroscopeSensor() int64 {
	if x != nil {
		return x.GyroscopeSensor
	}
	return 0
}

func (x *AndroidDeviceInfo) GetBiometric() int64 {
	if x != nil {
		return x.Biometric
	}
	return 0
}

func (x *AndroidDeviceInfo) GetBiometrics() []string {
	if x != nil {
		return x.Biometrics
	}
	return nil
}

func (x *AndroidDeviceInfo) GetLastDumpTs() int64 {
	if x != nil {
		return x.LastDumpTs
	}
	return 0
}

func (x *AndroidDeviceInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AndroidDeviceInfo) GetDataActivityState() int32 {
	if x != nil {
		return x.DataActivityState
	}
	return 0
}

func (x *AndroidDeviceInfo) GetDataConnectState() int32 {
	if x != nil {
		return x.DataConnectState
	}
	return 0
}

func (x *AndroidDeviceInfo) GetDataNetworkType() int32 {
	if x != nil {
		return x.DataNetworkType
	}
	return 0
}

func (x *AndroidDeviceInfo) GetVoiceNetworkType() int32 {
	if x != nil {
		return x.VoiceNetworkType
	}
	return 0
}

func (x *AndroidDeviceInfo) GetVoiceServiceState() int32 {
	if x != nil {
		return x.VoiceServiceState
	}
	return 0
}

func (x *AndroidDeviceInfo) GetUsbConnected() int32 {
	if x != nil {
		return x.UsbConnected
	}
	return 0
}

func (x *AndroidDeviceInfo) GetAdbEnabled() int32 {
	if x != nil {
		return x.AdbEnabled
	}
	return 0
}

func (x *AndroidDeviceInfo) GetUiVersion() string {
	if x != nil {
		return x.UiVersion
	}
	return ""
}

func (x *AndroidDeviceInfo) GetAccessibilityService() []string {
	if x != nil {
		return x.AccessibilityService
	}
	return nil
}

func (x *AndroidDeviceInfo) GetSensorsInfo() []*SensorInfo {
	if x != nil {
		return x.SensorsInfo
	}
	return nil
}

func (x *AndroidDeviceInfo) GetDrmid() string {
	if x != nil {
		return x.Drmid
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBatteryPresent() bool {
	if x != nil {
		return x.BatteryPresent
	}
	return false
}

func (x *AndroidDeviceInfo) GetBatteryTechnology() string {
	if x != nil {
		return x.BatteryTechnology
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBatteryTemperature() int32 {
	if x != nil {
		return x.BatteryTemperature
	}
	return 0
}

func (x *AndroidDeviceInfo) GetBatteryVoltage() int32 {
	if x != nil {
		return x.BatteryVoltage
	}
	return 0
}

func (x *AndroidDeviceInfo) GetBatteryPlugged() int32 {
	if x != nil {
		return x.BatteryPlugged
	}
	return 0
}

func (x *AndroidDeviceInfo) GetBatteryHealth() int32 {
	if x != nil {
		return x.BatteryHealth
	}
	return 0
}

func (x *AndroidDeviceInfo) GetCpuAbiList() []string {
	if x != nil {
		return x.CpuAbiList
	}
	return nil
}

func (x *AndroidDeviceInfo) GetCpuAbiLibc() string {
	if x != nil {
		return x.CpuAbiLibc
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCpuAbiLibc64() string {
	if x != nil {
		return x.CpuAbiLibc64
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCpuProcessor() string {
	if x != nil {
		return x.CpuProcessor
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCpuModelName() string {
	if x != nil {
		return x.CpuModelName
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCpuHardware() string {
	if x != nil {
		return x.CpuHardware
	}
	return ""
}

func (x *AndroidDeviceInfo) GetCpuFeatures() string {
	if x != nil {
		return x.CpuFeatures
	}
	return ""
}

// 传感器信息
type SensorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 传感器名称, 如 "rotation Vector"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 制造商
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Type int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	MaxRange float32 `protobuf:"fixed32,5,opt,name=max_range,json=maxRange,proto3" json:"max_range,omitempty"`
	Resolution float32 `protobuf:"fixed32,6,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// 耗电量(mA)
	Power float32 `protobuf:"fixed32,7,opt,name=power,proto3" json:"power,omitempty"`
	MinDelay int32 `protobuf:"varint,8,opt,name=min_delay,json=minDelay,proto3" json:"min_delay,omitempty"`
}

func (x *SensorInfo) Reset() {
	*x = SensorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datacenter_hakase_protobuf_android_device_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorInfo) ProtoMessage() {}

func (x *SensorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datacenter_hakase_protobuf_android_device_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorInfo.ProtoReflect.Descriptor instead.
func (*SensorInfo) Descriptor() ([]byte, []int) {
	return file_datacenter_hakase_protobuf_android_device_info_proto_rawDescGZIP(), []int{1}
}

func (x *SensorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SensorInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *SensorInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SensorInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SensorInfo) GetMaxRange() float32 {
	if x != nil {
		return x.MaxRange
	}
	return 0
}

func (x *SensorInfo) GetResolution() float32 {
	if x != nil {
		return x.Resolution
	}
	return 0
}

func (x *SensorInfo) GetPower() float32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *SensorInfo) GetMinDelay() int32 {
	if x != nil {
		return x.MinDelay
	}
	return 0
}

var File_datacenter_hakase_protobuf_android_device_info_proto protoreflect.FileDescriptor

var file_datacenter_hakase_protobuf_android_device_info_proto_rawDesc = []byte{
	0x0a, 0x34, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x68, 0x61, 0x6b,
	0x61, 0x73, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x68, 0x61, 0x6b, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x22, 0xef, 0x1c, 0x0a, 0x11, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x64, 0x6b, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x64, 0x6b, 0x76, 0x65, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x68, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x76, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x76, 0x69, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x72, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x73, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x73, 0x76, 0x65,
	0x72, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x74, 0x6d, 0x61, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x74,
	0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6d, 0x75, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6d, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70,
	0x75, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x70, 0x75, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x6d,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x68, 0x61, 0x6b, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x03, 0x73,
	0x79, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x68, 0x61, 0x6b, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x66, 0x69, 0x6d, 0x61, 0x63,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x66, 0x69, 0x6d, 0x61, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x64, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6d, 0x73, 0x69, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x63, 0x6e, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x63, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x6d, 0x70, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61,
	0x6d, 0x70, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61,
	0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x70, 0x72, 0x6f,
	0x63, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x70, 0x72, 0x6f, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x64, 0x69, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x6d, 0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x6d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x64,
	0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x64, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x61, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x61,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x61, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x61, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x61, 0x70, 0x70, 0x32, 0x30, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x61, 0x70, 0x70, 0x32, 0x30, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x61, 0x70, 0x70, 0x63, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x61, 0x70, 0x70, 0x63, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x73, 0x79, 0x73, 0x61, 0x70,
	0x70, 0x32, 0x30, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x73, 0x79, 0x73, 0x61, 0x70, 0x70, 0x32, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x73,
	0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x6d,
	0x61, 0x63, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69,
	0x66, 0x69, 0x6d, 0x61, 0x63, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x52, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x55, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x70, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x67, 0x70, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x60, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x75, 0x6d, 0x70, 0x5f, 0x74, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73,
	0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x75, 0x73, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x6d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x68, 0x61, 0x6b, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x2f, 0x0a,
	0x13, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x61,
	0x62, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x76, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x70, 0x75, 0x41, 0x62, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x70, 0x75,
	0x5f, 0x61, 0x62, 0x69, 0x5f, 0x6c, 0x69, 0x62, 0x63, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x70, 0x75, 0x41, 0x62, 0x69, 0x4c, 0x69, 0x62, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x70, 0x75, 0x5f, 0x61, 0x62, 0x69, 0x5f, 0x6c, 0x69, 0x62, 0x63, 0x36, 0x34, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x41, 0x62, 0x69, 0x4c, 0x69, 0x62, 0x63, 0x36,
	0x34, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x70, 0x75, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x7b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08,
	0x53, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x47, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x58, 0x69, 0x61, 0x6f,
	0x4d, 0x69, 0x6b, 0x75, 0x30, 0x31, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2d,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x68, 0x61, 0x6b, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datacenter_hakase_protobuf_android_device_info_proto_rawDescOnce sync.Once
	file_datacenter_hakase_protobuf_android_device_info_proto_rawDescData = file_datacenter_hakase_protobuf_android_device_info_proto_rawDesc
)

func file_datacenter_hakase_protobuf_android_device_info_proto_rawDescGZIP() []byte {
	file_datacenter_hakase_protobuf_android_device_info_proto_rawDescOnce.Do(func() {
		file_datacenter_hakase_protobuf_android_device_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_datacenter_hakase_protobuf_android_device_info_proto_rawDescData)
	})
	return file_datacenter_hakase_protobuf_android_device_info_proto_rawDescData
}

var file_datacenter_hakase_protobuf_android_device_info_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_datacenter_hakase_protobuf_android_device_info_proto_goTypes = []interface{}{
	(*AndroidDeviceInfo)(nil), // 0: datacenter.hakase.protobuf.AndroidDeviceInfo
	(*SensorInfo)(nil),        // 1: datacenter.hakase.protobuf.SensorInfo
	nil,                       // 2: datacenter.hakase.protobuf.AndroidDeviceInfo.PropsEntry
	nil,                       // 3: datacenter.hakase.protobuf.AndroidDeviceInfo.SysEntry
}
var file_datacenter_hakase_protobuf_android_device_info_proto_depIdxs = []int32{
	2, // 0: datacenter.hakase.protobuf.AndroidDeviceInfo.props:type_name -> datacenter.hakase.protobuf.AndroidDeviceInfo.PropsEntry
	3, // 1: datacenter.hakase.protobuf.AndroidDeviceInfo.sys:type_name -> datacenter.hakase.protobuf.AndroidDeviceInfo.SysEntry
	1, // 2: datacenter.hakase.protobuf.AndroidDeviceInfo.sensors_info:type_name -> datacenter.hakase.protobuf.SensorInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_datacenter_hakase_protobuf_android_device_info_proto_init() }
func file_datacenter_hakase_protobuf_android_device_info_proto_init() {
	if File_datacenter_hakase_protobuf_android_device_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datacenter_hakase_protobuf_android_device_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datacenter_hakase_protobuf_android_device_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datacenter_hakase_protobuf_android_device_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datacenter_hakase_protobuf_android_device_info_proto_goTypes,
		DependencyIndexes: file_datacenter_hakase_protobuf_android_device_info_proto_depIdxs,
		MessageInfos:      file_datacenter_hakase_protobuf_android_device_info_proto_msgTypes,
	}.Build()
	File_datacenter_hakase_protobuf_android_device_info_proto = out.File
	file_datacenter_hakase_protobuf_android_device_info_proto_rawDesc = nil
	file_datacenter_hakase_protobuf_android_device_info_proto_goTypes = nil
	file_datacenter_hakase_protobuf_android_device_info_proto_depIdxs = nil
}
