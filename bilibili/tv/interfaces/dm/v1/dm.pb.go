// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.0
// source: bilibili/tv/interfaces/dm/v1/dm.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Chronos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5  string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
	File string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Sign string `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *Chronos) Reset() {
	*x = Chronos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chronos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chronos) ProtoMessage() {}

func (x *Chronos) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chronos.ProtoReflect.Descriptor instead.
func (*Chronos) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{0}
}

func (x *Chronos) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *Chronos) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Chronos) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 互动弹幕条目信息
type CommandDm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 对象视频cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 发送者mid
	Mid string `protobuf:"bytes,3,opt,name=mid,proto3" json:"mid,omitempty"`
	// 互动弹幕指令
	Command string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	// 互动弹幕正文
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 出现时间
	Progress int32 `protobuf:"varint,6,opt,name=progress,proto3" json:"progress,omitempty"`
	// 创建时间
	Ctime string `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// 发布时间
	Mtime string `protobuf:"bytes,8,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// 扩展json数据
	Extra string `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	// 弹幕id str类型
	IdStr   string `protobuf:"bytes,10,opt,name=idStr,proto3" json:"idStr,omitempty"`
	Display int64  `protobuf:"varint,11,opt,name=display,proto3" json:"display,omitempty"`
}

func (x *CommandDm) Reset() {
	*x = CommandDm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDm) ProtoMessage() {}

func (x *CommandDm) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDm.ProtoReflect.Descriptor instead.
func (*CommandDm) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{1}
}

func (x *CommandDm) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommandDm) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *CommandDm) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *CommandDm) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandDm) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommandDm) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *CommandDm) GetCtime() string {
	if x != nil {
		return x.Ctime
	}
	return ""
}

func (x *CommandDm) GetMtime() string {
	if x != nil {
		return x.Mtime
	}
	return ""
}

func (x *CommandDm) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *CommandDm) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *CommandDm) GetDisplay() int64 {
	if x != nil {
		return x.Display
	}
	return 0
}

// ott互动弹幕条目信息
type CommandDmOtt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 对象视频cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 发送者mid
	Mid  int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Type int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	// 互动弹幕指令
	Command string `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	// 互动弹幕正文
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	State   int32  `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	// 出现时间
	Progress int32 `protobuf:"varint,8,opt,name=progress,proto3" json:"progress,omitempty"`
	// 创建时间
	Ctime string `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// 发布时间
	Mtime string `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// 扩展json数据
	Extra string `protobuf:"bytes,11,opt,name=extra,proto3" json:"extra,omitempty"`
	// 弹幕id str类型
	IdStr string `protobuf:"bytes,12,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
}

func (x *CommandDmOtt) Reset() {
	*x = CommandDmOtt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDmOtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDmOtt) ProtoMessage() {}

func (x *CommandDmOtt) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDmOtt.ProtoReflect.Descriptor instead.
func (*CommandDmOtt) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{2}
}

func (x *CommandDmOtt) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommandDmOtt) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *CommandDmOtt) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *CommandDmOtt) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommandDmOtt) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandDmOtt) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommandDmOtt) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *CommandDmOtt) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *CommandDmOtt) GetCtime() string {
	if x != nil {
		return x.Ctime
	}
	return ""
}

func (x *CommandDmOtt) GetMtime() string {
	if x != nil {
		return x.Mtime
	}
	return ""
}

func (x *CommandDmOtt) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *CommandDmOtt) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

type CommandDmsOttReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandDmsOtt []*CommandDmOtt `protobuf:"bytes,1,rep,name=command_dms_ott,json=commandDmsOtt,proto3" json:"command_dms_ott,omitempty"`
}

func (x *CommandDmsOttReply) Reset() {
	*x = CommandDmsOttReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDmsOttReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDmsOttReply) ProtoMessage() {}

func (x *CommandDmsOttReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDmsOttReply.ProtoReflect.Descriptor instead.
func (*CommandDmsOttReply) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{3}
}

func (x *CommandDmsOttReply) GetCommandDmsOtt() []*CommandDmOtt {
	if x != nil {
		return x.CommandDmsOtt
	}
	return nil
}

type CommandDmsOttReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (x *CommandDmsOttReq) Reset() {
	*x = CommandDmsOttReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDmsOttReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDmsOttReq) ProtoMessage() {}

func (x *CommandDmsOttReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDmsOttReq.ProtoReflect.Descriptor instead.
func (*CommandDmsOttReq) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{4}
}

func (x *CommandDmsOttReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *CommandDmsOttReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *CommandDmsOttReq) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

// 弹幕ai云屏蔽列表
type DanmakuAIFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕ai云屏蔽条目
	DmFlags []*DanmakuFlag `protobuf:"bytes,1,rep,name=dm_flags,json=dmFlags,proto3" json:"dm_flags,omitempty"`
}

func (x *DanmakuAIFlag) Reset() {
	*x = DanmakuAIFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuAIFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuAIFlag) ProtoMessage() {}

func (x *DanmakuAIFlag) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuAIFlag.ProtoReflect.Descriptor instead.
func (*DanmakuAIFlag) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{5}
}

func (x *DanmakuAIFlag) GetDmFlags() []*DanmakuFlag {
	if x != nil {
		return x.DmFlags
	}
	return nil
}

// 弹幕条目
type DanmakuElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕dmid
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 弹幕出现位置(单位ms)
	Progress int32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// 弹幕类型
	Mode int32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// 弹幕字号
	Fontsize int32 `protobuf:"varint,4,opt,name=fontsize,proto3" json:"fontsize,omitempty"`
	// 弹幕颜色
	Color uint32 `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`
	// 发送着mid hash
	MidHash string `protobuf:"bytes,6,opt,name=midHash,proto3" json:"midHash,omitempty"`
	// 弹幕正文
	Content string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	// 发送时间
	Ctime int64 `protobuf:"varint,8,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// 权重 区间:[1,10]
	Weight int32 `protobuf:"varint,9,opt,name=weight,proto3" json:"weight,omitempty"`
	// 动作
	Action string `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
	// 弹幕池
	Pool int32 `protobuf:"varint,11,opt,name=pool,proto3" json:"pool,omitempty"`
	// 弹幕dmid str
	IdStr string `protobuf:"bytes,12,opt,name=idStr,proto3" json:"idStr,omitempty"`
	// 弹幕属性位(bin求AND)
	// bit0:保护 bit1:直播 bit2:高赞
	Attr int32 `protobuf:"varint,13,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *DanmakuElem) Reset() {
	*x = DanmakuElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuElem) ProtoMessage() {}

func (x *DanmakuElem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuElem.ProtoReflect.Descriptor instead.
func (*DanmakuElem) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{6}
}

func (x *DanmakuElem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DanmakuElem) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DanmakuElem) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *DanmakuElem) GetFontsize() int32 {
	if x != nil {
		return x.Fontsize
	}
	return 0
}

func (x *DanmakuElem) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *DanmakuElem) GetMidHash() string {
	if x != nil {
		return x.MidHash
	}
	return ""
}

func (x *DanmakuElem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DanmakuElem) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *DanmakuElem) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DanmakuElem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *DanmakuElem) GetPool() int32 {
	if x != nil {
		return x.Pool
	}
	return 0
}

func (x *DanmakuElem) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *DanmakuElem) GetAttr() int32 {
	if x != nil {
		return x.Attr
	}
	return 0
}

// 弹幕ai云屏蔽条目
type DanmakuFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕dmid
	Dmid int64 `protobuf:"varint,1,opt,name=dmid,proto3" json:"dmid,omitempty"`
	// 评分
	Flag uint32 `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *DanmakuFlag) Reset() {
	*x = DanmakuFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuFlag) ProtoMessage() {}

func (x *DanmakuFlag) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuFlag.ProtoReflect.Descriptor instead.
func (*DanmakuFlag) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{7}
}

func (x *DanmakuFlag) GetDmid() int64 {
	if x != nil {
		return x.Dmid
	}
	return 0
}

func (x *DanmakuFlag) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

// 云屏蔽配置信息
type DanmakuFlagConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 云屏蔽等级
	RecFlag int32 `protobuf:"varint,1,opt,name=rec_flag,json=recFlag,proto3" json:"rec_flag,omitempty"`
	// 云屏蔽文案
	RecText string `protobuf:"bytes,2,opt,name=rec_text,json=recText,proto3" json:"rec_text,omitempty"`
	// 云屏蔽开关
	RecSwitch int32 `protobuf:"varint,3,opt,name=rec_switch,json=recSwitch,proto3" json:"rec_switch,omitempty"`
}

func (x *DanmakuFlagConfig) Reset() {
	*x = DanmakuFlagConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuFlagConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuFlagConfig) ProtoMessage() {}

func (x *DanmakuFlagConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuFlagConfig.ProtoReflect.Descriptor instead.
func (*DanmakuFlagConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{8}
}

func (x *DanmakuFlagConfig) GetRecFlag() int32 {
	if x != nil {
		return x.RecFlag
	}
	return 0
}

func (x *DanmakuFlagConfig) GetRecText() string {
	if x != nil {
		return x.RecText
	}
	return ""
}

func (x *DanmakuFlagConfig) GetRecSwitch() int32 {
	if x != nil {
		return x.RecSwitch
	}
	return 0
}

// 弹幕默认配置
type DanmuDefaultPlayerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerDanmakuUseDefaultConfig    bool    `protobuf:"varint,1,opt,name=player_danmaku_use_default_config,json=playerDanmakuUseDefaultConfig,proto3" json:"player_danmaku_use_default_config,omitempty"`          // 是否使用推荐弹幕设置
	PlayerDanmakuAiRecommendedSwitch bool    `protobuf:"varint,4,opt,name=player_danmaku_ai_recommended_switch,json=playerDanmakuAiRecommendedSwitch,proto3" json:"player_danmaku_ai_recommended_switch,omitempty"` // 是否开启智能云屏蔽
	PlayerDanmakuAiRecommendedLevel  int32   `protobuf:"varint,5,opt,name=player_danmaku_ai_recommended_level,json=playerDanmakuAiRecommendedLevel,proto3" json:"player_danmaku_ai_recommended_level,omitempty"`    // 智能云屏蔽等级
	PlayerDanmakuBlocktop            bool    `protobuf:"varint,6,opt,name=player_danmaku_blocktop,json=playerDanmakuBlocktop,proto3" json:"player_danmaku_blocktop,omitempty"`                                      // 是否屏蔽顶端弹幕
	PlayerDanmakuBlockscroll         bool    `protobuf:"varint,7,opt,name=player_danmaku_blockscroll,json=playerDanmakuBlockscroll,proto3" json:"player_danmaku_blockscroll,omitempty"`                             // 是否屏蔽滚动弹幕
	PlayerDanmakuBlockbottom         bool    `protobuf:"varint,8,opt,name=player_danmaku_blockbottom,json=playerDanmakuBlockbottom,proto3" json:"player_danmaku_blockbottom,omitempty"`                             // 是否屏蔽底端弹幕
	PlayerDanmakuBlockcolorful       bool    `protobuf:"varint,9,opt,name=player_danmaku_blockcolorful,json=playerDanmakuBlockcolorful,proto3" json:"player_danmaku_blockcolorful,omitempty"`                       // 是否屏蔽彩色弹幕
	PlayerDanmakuBlockrepeat         bool    `protobuf:"varint,10,opt,name=player_danmaku_blockrepeat,json=playerDanmakuBlockrepeat,proto3" json:"player_danmaku_blockrepeat,omitempty"`                            // 是否屏蔽重复弹幕
	PlayerDanmakuBlockspecial        bool    `protobuf:"varint,11,opt,name=player_danmaku_blockspecial,json=playerDanmakuBlockspecial,proto3" json:"player_danmaku_blockspecial,omitempty"`                         // 是否屏蔽高级弹幕
	PlayerDanmakuOpacity             float32 `protobuf:"fixed32,12,opt,name=player_danmaku_opacity,json=playerDanmakuOpacity,proto3" json:"player_danmaku_opacity,omitempty"`                                       // 弹幕不透明度
	PlayerDanmakuScalingfactor       float32 `protobuf:"fixed32,13,opt,name=player_danmaku_scalingfactor,json=playerDanmakuScalingfactor,proto3" json:"player_danmaku_scalingfactor,omitempty"`                     // 弹幕缩放比例
	PlayerDanmakuDomain              float32 `protobuf:"fixed32,14,opt,name=player_danmaku_domain,json=playerDanmakuDomain,proto3" json:"player_danmaku_domain,omitempty"`                                          // 弹幕显示区域
	PlayerDanmakuSpeed               int32   `protobuf:"varint,15,opt,name=player_danmaku_speed,json=playerDanmakuSpeed,proto3" json:"player_danmaku_speed,omitempty"`                                              // 弹幕速度
	InlinePlayerDanmakuSwitch        bool    `protobuf:"varint,16,opt,name=inline_player_danmaku_switch,json=inlinePlayerDanmakuSwitch,proto3" json:"inline_player_danmaku_switch,omitempty"`                       // 是否开启弹幕
	PlayerDanmakuSeniorModeSwitch    int32   `protobuf:"varint,17,opt,name=player_danmaku_senior_mode_switch,json=playerDanmakuSeniorModeSwitch,proto3" json:"player_danmaku_senior_mode_switch,omitempty"`         //
}

func (x *DanmuDefaultPlayerConfig) Reset() {
	*x = DanmuDefaultPlayerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuDefaultPlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuDefaultPlayerConfig) ProtoMessage() {}

func (x *DanmuDefaultPlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuDefaultPlayerConfig.ProtoReflect.Descriptor instead.
func (*DanmuDefaultPlayerConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{9}
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuUseDefaultConfig() bool {
	if x != nil {
		return x.PlayerDanmakuUseDefaultConfig
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuAiRecommendedSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedSwitch
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuAiRecommendedLevel() int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevel
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlocktop() bool {
	if x != nil {
		return x.PlayerDanmakuBlocktop
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockscroll() bool {
	if x != nil {
		return x.PlayerDanmakuBlockscroll
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockbottom() bool {
	if x != nil {
		return x.PlayerDanmakuBlockbottom
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockcolorful() bool {
	if x != nil {
		return x.PlayerDanmakuBlockcolorful
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockrepeat() bool {
	if x != nil {
		return x.PlayerDanmakuBlockrepeat
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockspecial() bool {
	if x != nil {
		return x.PlayerDanmakuBlockspecial
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuOpacity() float32 {
	if x != nil {
		return x.PlayerDanmakuOpacity
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuScalingfactor() float32 {
	if x != nil {
		return x.PlayerDanmakuScalingfactor
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuDomain() float32 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuSpeed() int32 {
	if x != nil {
		return x.PlayerDanmakuSpeed
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetInlinePlayerDanmakuSwitch() bool {
	if x != nil {
		return x.InlinePlayerDanmakuSwitch
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuSeniorModeSwitch() int32 {
	if x != nil {
		return x.PlayerDanmakuSeniorModeSwitch
	}
	return 0
}

// 弹幕配置
type DanmuPlayerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerDanmakuSwitch              bool    `protobuf:"varint,1,opt,name=player_danmaku_switch,json=playerDanmakuSwitch,proto3" json:"player_danmaku_switch,omitempty"`                                            // 是否开启弹幕
	PlayerDanmakuSwitchSave          bool    `protobuf:"varint,2,opt,name=player_danmaku_switch_save,json=playerDanmakuSwitchSave,proto3" json:"player_danmaku_switch_save,omitempty"`                              // 是否记录弹幕开关设置
	PlayerDanmakuUseDefaultConfig    bool    `protobuf:"varint,3,opt,name=player_danmaku_use_default_config,json=playerDanmakuUseDefaultConfig,proto3" json:"player_danmaku_use_default_config,omitempty"`          // 是否使用推荐弹幕设置
	PlayerDanmakuAiRecommendedSwitch bool    `protobuf:"varint,4,opt,name=player_danmaku_ai_recommended_switch,json=playerDanmakuAiRecommendedSwitch,proto3" json:"player_danmaku_ai_recommended_switch,omitempty"` // 是否开启智能云屏蔽
	PlayerDanmakuAiRecommendedLevel  int32   `protobuf:"varint,5,opt,name=player_danmaku_ai_recommended_level,json=playerDanmakuAiRecommendedLevel,proto3" json:"player_danmaku_ai_recommended_level,omitempty"`    // 智能云屏蔽等级
	PlayerDanmakuBlocktop            bool    `protobuf:"varint,6,opt,name=player_danmaku_blocktop,json=playerDanmakuBlocktop,proto3" json:"player_danmaku_blocktop,omitempty"`                                      // 是否屏蔽顶端弹幕
	PlayerDanmakuBlockscroll         bool    `protobuf:"varint,7,opt,name=player_danmaku_blockscroll,json=playerDanmakuBlockscroll,proto3" json:"player_danmaku_blockscroll,omitempty"`                             // 是否屏蔽滚动弹幕
	PlayerDanmakuBlockbottom         bool    `protobuf:"varint,8,opt,name=player_danmaku_blockbottom,json=playerDanmakuBlockbottom,proto3" json:"player_danmaku_blockbottom,omitempty"`                             // 是否屏蔽底端弹幕
	PlayerDanmakuBlockcolorful       bool    `protobuf:"varint,9,opt,name=player_danmaku_blockcolorful,json=playerDanmakuBlockcolorful,proto3" json:"player_danmaku_blockcolorful,omitempty"`                       // 是否屏蔽彩色弹幕
	PlayerDanmakuBlockrepeat         bool    `protobuf:"varint,10,opt,name=player_danmaku_blockrepeat,json=playerDanmakuBlockrepeat,proto3" json:"player_danmaku_blockrepeat,omitempty"`                            // 是否屏蔽重复弹幕
	PlayerDanmakuBlockspecial        bool    `protobuf:"varint,11,opt,name=player_danmaku_blockspecial,json=playerDanmakuBlockspecial,proto3" json:"player_danmaku_blockspecial,omitempty"`                         // 是否屏蔽高级弹幕
	PlayerDanmakuOpacity             float32 `protobuf:"fixed32,12,opt,name=player_danmaku_opacity,json=playerDanmakuOpacity,proto3" json:"player_danmaku_opacity,omitempty"`                                       // 弹幕不透明度
	PlayerDanmakuScalingfactor       float32 `protobuf:"fixed32,13,opt,name=player_danmaku_scalingfactor,json=playerDanmakuScalingfactor,proto3" json:"player_danmaku_scalingfactor,omitempty"`                     // 弹幕缩放比例
	PlayerDanmakuDomain              float32 `protobuf:"fixed32,14,opt,name=player_danmaku_domain,json=playerDanmakuDomain,proto3" json:"player_danmaku_domain,omitempty"`                                          // 弹幕显示区域
	PlayerDanmakuSpeed               int32   `protobuf:"varint,15,opt,name=player_danmaku_speed,json=playerDanmakuSpeed,proto3" json:"player_danmaku_speed,omitempty"`                                              // 弹幕速度
	PlayerDanmakuEnableblocklist     bool    `protobuf:"varint,16,opt,name=player_danmaku_enableblocklist,json=playerDanmakuEnableblocklist,proto3" json:"player_danmaku_enableblocklist,omitempty"`                // 是否开启屏蔽列表
	InlinePlayerDanmakuSwitch        bool    `protobuf:"varint,17,opt,name=inline_player_danmaku_switch,json=inlinePlayerDanmakuSwitch,proto3" json:"inline_player_danmaku_switch,omitempty"`                       // 是否开启弹幕
	InlinePlayerDanmakuConfig        int32   `protobuf:"varint,18,opt,name=inline_player_danmaku_config,json=inlinePlayerDanmakuConfig,proto3" json:"inline_player_danmaku_config,omitempty"`                       //
	PlayerDanmakuIosSwitchSave       int32   `protobuf:"varint,19,opt,name=player_danmaku_ios_switch_save,json=playerDanmakuIosSwitchSave,proto3" json:"player_danmaku_ios_switch_save,omitempty"`                  //
}

func (x *DanmuPlayerConfig) Reset() {
	*x = DanmuPlayerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuPlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuPlayerConfig) ProtoMessage() {}

func (x *DanmuPlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuPlayerConfig.ProtoReflect.Descriptor instead.
func (*DanmuPlayerConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{10}
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuSwitch
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuSwitchSave() bool {
	if x != nil {
		return x.PlayerDanmakuSwitchSave
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuUseDefaultConfig() bool {
	if x != nil {
		return x.PlayerDanmakuUseDefaultConfig
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuAiRecommendedSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedSwitch
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuAiRecommendedLevel() int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevel
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlocktop() bool {
	if x != nil {
		return x.PlayerDanmakuBlocktop
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockscroll() bool {
	if x != nil {
		return x.PlayerDanmakuBlockscroll
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockbottom() bool {
	if x != nil {
		return x.PlayerDanmakuBlockbottom
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockcolorful() bool {
	if x != nil {
		return x.PlayerDanmakuBlockcolorful
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockrepeat() bool {
	if x != nil {
		return x.PlayerDanmakuBlockrepeat
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockspecial() bool {
	if x != nil {
		return x.PlayerDanmakuBlockspecial
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuOpacity() float32 {
	if x != nil {
		return x.PlayerDanmakuOpacity
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuScalingfactor() float32 {
	if x != nil {
		return x.PlayerDanmakuScalingfactor
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuDomain() float32 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuSpeed() int32 {
	if x != nil {
		return x.PlayerDanmakuSpeed
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuEnableblocklist() bool {
	if x != nil {
		return x.PlayerDanmakuEnableblocklist
	}
	return false
}

func (x *DanmuPlayerConfig) GetInlinePlayerDanmakuSwitch() bool {
	if x != nil {
		return x.InlinePlayerDanmakuSwitch
	}
	return false
}

func (x *DanmuPlayerConfig) GetInlinePlayerDanmakuConfig() int32 {
	if x != nil {
		return x.InlinePlayerDanmakuConfig
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuIosSwitchSave() int32 {
	if x != nil {
		return x.PlayerDanmakuIosSwitchSave
	}
	return 0
}

// 弹幕显示区域自动配置
type DanmuPlayerDynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间
	Progress int32 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// 弹幕显示区域
	PlayerDanmakuDomain float32 `protobuf:"fixed32,14,opt,name=player_danmaku_domain,json=playerDanmakuDomain,proto3" json:"player_danmaku_domain,omitempty"`
}

func (x *DanmuPlayerDynamicConfig) Reset() {
	*x = DanmuPlayerDynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuPlayerDynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuPlayerDynamicConfig) ProtoMessage() {}

func (x *DanmuPlayerDynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuPlayerDynamicConfig.ProtoReflect.Descriptor instead.
func (*DanmuPlayerDynamicConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{11}
}

func (x *DanmuPlayerDynamicConfig) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DanmuPlayerDynamicConfig) GetPlayerDanmakuDomain() float32 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

// 弹幕配置信息
type DanmuPlayerViewConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕默认配置
	DanmukuDefaultPlayerConfig *DanmuDefaultPlayerConfig `protobuf:"bytes,1,opt,name=danmuku_default_player_config,json=danmukuDefaultPlayerConfig,proto3" json:"danmuku_default_player_config,omitempty"`
	// 弹幕用户配置
	DanmukuPlayerConfig *DanmuPlayerConfig `protobuf:"bytes,2,opt,name=danmuku_player_config,json=danmukuPlayerConfig,proto3" json:"danmuku_player_config,omitempty"`
	// 弹幕显示区域自动配置列表
	DanmukuPlayerDynamicConfig []*DanmuPlayerDynamicConfig `protobuf:"bytes,3,rep,name=danmuku_player_dynamic_config,json=danmukuPlayerDynamicConfig,proto3" json:"danmuku_player_dynamic_config,omitempty"`
}

func (x *DanmuPlayerViewConfig) Reset() {
	*x = DanmuPlayerViewConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuPlayerViewConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuPlayerViewConfig) ProtoMessage() {}

func (x *DanmuPlayerViewConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuPlayerViewConfig.ProtoReflect.Descriptor instead.
func (*DanmuPlayerViewConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{12}
}

func (x *DanmuPlayerViewConfig) GetDanmukuDefaultPlayerConfig() *DanmuDefaultPlayerConfig {
	if x != nil {
		return x.DanmukuDefaultPlayerConfig
	}
	return nil
}

func (x *DanmuPlayerViewConfig) GetDanmukuPlayerConfig() *DanmuPlayerConfig {
	if x != nil {
		return x.DanmukuPlayerConfig
	}
	return nil
}

func (x *DanmuPlayerViewConfig) GetDanmukuPlayerDynamicConfig() []*DanmuPlayerDynamicConfig {
	if x != nil {
		return x.DanmukuPlayerDynamicConfig
	}
	return nil
}

// 获取弹幕-响应
type DmSegMobileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕列表
	Elems []*DanmakuElem `protobuf:"bytes,1,rep,name=elems,proto3" json:"elems,omitempty"`
	// 是否已关闭弹幕
	// 0:未关闭 1:已关闭
	State int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	// 弹幕云屏蔽ai评分值
	AiFlag *DanmakuAIFlag `protobuf:"bytes,3,opt,name=ai_flag,json=aiFlag,proto3" json:"ai_flag,omitempty"`
}

func (x *DmSegMobileReply) Reset() {
	*x = DmSegMobileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegMobileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegMobileReply) ProtoMessage() {}

func (x *DmSegMobileReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegMobileReply.ProtoReflect.Descriptor instead.
func (*DmSegMobileReply) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{13}
}

func (x *DmSegMobileReply) GetElems() []*DanmakuElem {
	if x != nil {
		return x.Elems
	}
	return nil
}

func (x *DmSegMobileReply) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DmSegMobileReply) GetAiFlag() *DanmakuAIFlag {
	if x != nil {
		return x.AiFlag
	}
	return nil
}

// 获取弹幕-请求
type DmSegMobileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid/漫画epid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// 视频cid/漫画cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 弹幕类型
	// 1:视频 2:漫画
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 分段(6min)
	SegmentIndex int64 `protobuf:"varint,4,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	// 是否青少年模式
	TeenagersMode int32 `protobuf:"varint,5,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	From          int64 `protobuf:"varint,6,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *DmSegMobileReq) Reset() {
	*x = DmSegMobileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegMobileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegMobileReq) ProtoMessage() {}

func (x *DmSegMobileReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegMobileReq.ProtoReflect.Descriptor instead.
func (*DmSegMobileReq) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{14}
}

func (x *DmSegMobileReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DmSegMobileReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmSegMobileReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DmSegMobileReq) GetSegmentIndex() int64 {
	if x != nil {
		return x.SegmentIndex
	}
	return 0
}

func (x *DmSegMobileReq) GetTeenagersMode() int32 {
	if x != nil {
		return x.TeenagersMode
	}
	return 0
}

func (x *DmSegMobileReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

// 客户端弹幕元数据-响应
type DmViewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否已关闭弹幕
	// 0:未关闭 1:已关闭
	Closed bool `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	// 智能防挡弹幕蒙版信息
	Mask *VideoMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	// 视频字幕
	Subtitle *VideoSubtitle `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 高级弹幕专包url(bfs)
	SpecialDms []string `protobuf:"bytes,4,rep,name=special_dms,json=specialDms,proto3" json:"special_dms,omitempty"`
	// 云屏蔽配置信息
	AiFlag *DanmakuFlagConfig `protobuf:"bytes,5,opt,name=ai_flag,json=aiFlag,proto3" json:"ai_flag,omitempty"`
	// 弹幕配置信息
	PlayerConfig *DanmuPlayerViewConfig `protobuf:"bytes,6,opt,name=player_config,json=playerConfig,proto3" json:"player_config,omitempty"`
	// 弹幕发送框样式
	SendBoxStyle int32 `protobuf:"varint,7,opt,name=send_box_style,json=sendBoxStyle,proto3" json:"send_box_style,omitempty"`
	// 是否允许
	Allow bool `protobuf:"varint,8,opt,name=allow,proto3" json:"allow,omitempty"`
	// check box 是否展示
	CheckBox string `protobuf:"bytes,9,opt,name=check_box,json=checkBox,proto3" json:"check_box,omitempty"`
	// check box 展示文本
	CheckBoxShowMsg string `protobuf:"bytes,10,opt,name=check_box_show_msg,json=checkBoxShowMsg,proto3" json:"check_box_show_msg,omitempty"`
	// 展示文案
	TextPlaceholder string `protobuf:"bytes,11,opt,name=text_placeholder,json=textPlaceholder,proto3" json:"text_placeholder,omitempty"`
	// 弹幕输入框文案
	InputPlaceholder string `protobuf:"bytes,12,opt,name=input_placeholder,json=inputPlaceholder,proto3" json:"input_placeholder,omitempty"`
	CommandClose     bool   `protobuf:"varint,13,opt,name=command_close,json=commandClose,proto3" json:"command_close,omitempty"`
}

func (x *DmViewReply) Reset() {
	*x = DmViewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmViewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmViewReply) ProtoMessage() {}

func (x *DmViewReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmViewReply.ProtoReflect.Descriptor instead.
func (*DmViewReply) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{15}
}

func (x *DmViewReply) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *DmViewReply) GetMask() *VideoMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *DmViewReply) GetSubtitle() *VideoSubtitle {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *DmViewReply) GetSpecialDms() []string {
	if x != nil {
		return x.SpecialDms
	}
	return nil
}

func (x *DmViewReply) GetAiFlag() *DanmakuFlagConfig {
	if x != nil {
		return x.AiFlag
	}
	return nil
}

func (x *DmViewReply) GetPlayerConfig() *DanmuPlayerViewConfig {
	if x != nil {
		return x.PlayerConfig
	}
	return nil
}

func (x *DmViewReply) GetSendBoxStyle() int32 {
	if x != nil {
		return x.SendBoxStyle
	}
	return 0
}

func (x *DmViewReply) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *DmViewReply) GetCheckBox() string {
	if x != nil {
		return x.CheckBox
	}
	return ""
}

func (x *DmViewReply) GetCheckBoxShowMsg() string {
	if x != nil {
		return x.CheckBoxShowMsg
	}
	return ""
}

func (x *DmViewReply) GetTextPlaceholder() string {
	if x != nil {
		return x.TextPlaceholder
	}
	return ""
}

func (x *DmViewReply) GetInputPlaceholder() string {
	if x != nil {
		return x.InputPlaceholder
	}
	return ""
}

func (x *DmViewReply) GetCommandClose() bool {
	if x != nil {
		return x.CommandClose
	}
	return false
}

// 客户端弹幕元数据-请求
type DmViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid/漫画epid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// 视频cid/漫画cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 弹幕类型
	// 1:视频 2:漫画
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 页面spm
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// 是否冷启
	IsHardBoot int32 `protobuf:"varint,5,opt,name=is_hard_boot,json=isHardBoot,proto3" json:"is_hard_boot,omitempty"`
	From       int64 `protobuf:"varint,6,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *DmViewReq) Reset() {
	*x = DmViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmViewReq) ProtoMessage() {}

func (x *DmViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmViewReq.ProtoReflect.Descriptor instead.
func (*DmViewReq) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{16}
}

func (x *DmViewReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DmViewReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmViewReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DmViewReq) GetSpmid() string {
	if x != nil {
		return x.Spmid
	}
	return ""
}

func (x *DmViewReq) GetIsHardBoot() int32 {
	if x != nil {
		return x.IsHardBoot
	}
	return 0
}

func (x *DmViewReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

// 单个字幕信息
type SubtitleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字幕id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 字幕id str
	IdStr string `protobuf:"bytes,2,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
	// 字幕语言代码
	Lan string `protobuf:"bytes,3,opt,name=lan,proto3" json:"lan,omitempty"`
	// 字幕语言
	LanDoc string `protobuf:"bytes,4,opt,name=lan_doc,json=lanDoc,proto3" json:"lan_doc,omitempty"`
	// 字幕文件url
	SubtitleUrl string `protobuf:"bytes,5,opt,name=subtitle_url,json=subtitleUrl,proto3" json:"subtitle_url,omitempty"`
	// 字幕作者信息
	Author *UserInfo `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *SubtitleItem) Reset() {
	*x = SubtitleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtitleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtitleItem) ProtoMessage() {}

func (x *SubtitleItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtitleItem.ProtoReflect.Descriptor instead.
func (*SubtitleItem) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{17}
}

func (x *SubtitleItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubtitleItem) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *SubtitleItem) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

func (x *SubtitleItem) GetLanDoc() string {
	if x != nil {
		return x.LanDoc
	}
	return ""
}

func (x *SubtitleItem) GetSubtitleUrl() string {
	if x != nil {
		return x.SubtitleUrl
	}
	return ""
}

func (x *SubtitleItem) GetAuthor() *UserInfo {
	if x != nil {
		return x.Author
	}
	return nil
}

type TvViewProgressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoGuide *VideoGuide `protobuf:"bytes,1,opt,name=video_guide,json=videoGuide,proto3" json:"video_guide,omitempty"`
	Chronos    *Chronos    `protobuf:"bytes,2,opt,name=chronos,proto3" json:"chronos,omitempty"`
}

func (x *TvViewProgressReply) Reset() {
	*x = TvViewProgressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvViewProgressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvViewProgressReply) ProtoMessage() {}

func (x *TvViewProgressReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvViewProgressReply.ProtoReflect.Descriptor instead.
func (*TvViewProgressReply) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{18}
}

func (x *TvViewProgressReply) GetVideoGuide() *VideoGuide {
	if x != nil {
		return x.VideoGuide
	}
	return nil
}

func (x *TvViewProgressReply) GetChronos() *Chronos {
	if x != nil {
		return x.Chronos
	}
	return nil
}

type TvViewProgressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid             int64  `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Cid             int64  `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	UpMid           int64  `protobuf:"varint,3,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty"`
	EngineVersion   string `protobuf:"bytes,4,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	MessageProtocol string `protobuf:"bytes,5,opt,name=message_protocol,json=messageProtocol,proto3" json:"message_protocol,omitempty"`
	ServiceKey      string `protobuf:"bytes,6,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
	Sid             int64  `protobuf:"varint,7,opt,name=sid,proto3" json:"sid,omitempty"`
	Pid             int64  `protobuf:"varint,8,opt,name=pid,proto3" json:"pid,omitempty"`
	From            int64  `protobuf:"varint,9,opt,name=from,proto3" json:"from,omitempty"`
	GuestAccessKey  string `protobuf:"bytes,10,opt,name=guest_access_key,json=guestAccessKey,proto3" json:"guest_access_key,omitempty"`
	Epid            int64  `protobuf:"varint,11,opt,name=epid,proto3" json:"epid,omitempty"`
}

func (x *TvViewProgressReq) Reset() {
	*x = TvViewProgressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvViewProgressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvViewProgressReq) ProtoMessage() {}

func (x *TvViewProgressReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvViewProgressReq.ProtoReflect.Descriptor instead.
func (*TvViewProgressReq) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{19}
}

func (x *TvViewProgressReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *TvViewProgressReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *TvViewProgressReq) GetUpMid() int64 {
	if x != nil {
		return x.UpMid
	}
	return 0
}

func (x *TvViewProgressReq) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

func (x *TvViewProgressReq) GetMessageProtocol() string {
	if x != nil {
		return x.MessageProtocol
	}
	return ""
}

func (x *TvViewProgressReq) GetServiceKey() string {
	if x != nil {
		return x.ServiceKey
	}
	return ""
}

func (x *TvViewProgressReq) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *TvViewProgressReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *TvViewProgressReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TvViewProgressReq) GetGuestAccessKey() string {
	if x != nil {
		return x.GuestAccessKey
	}
	return ""
}

func (x *TvViewProgressReq) GetEpid() int64 {
	if x != nil {
		return x.Epid
	}
	return 0
}

// 字幕作者信息
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户昵称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户性别
	Sex string `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex,omitempty"`
	// 用户头像url
	Face string `protobuf:"bytes,4,opt,name=face,proto3" json:"face,omitempty"`
	// 用户签名
	Sign string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	// 用户等级
	Rank int32 `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{20}
}

func (x *UserInfo) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *UserInfo) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *UserInfo) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *UserInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type VideoGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandDms []*CommandDm `protobuf:"bytes,2,rep,name=command_dms,json=commandDms,proto3" json:"command_dms,omitempty"`
}

func (x *VideoGuide) Reset() {
	*x = VideoGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGuide) ProtoMessage() {}

func (x *VideoGuide) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGuide.ProtoReflect.Descriptor instead.
func (*VideoGuide) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{21}
}

func (x *VideoGuide) GetCommandDms() []*CommandDm {
	if x != nil {
		return x.CommandDms
	}
	return nil
}

// 智能防挡弹幕蒙版信息
type VideoMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频cid
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 平台
	// 0:web端 1:客户端
	Plat int32 `protobuf:"varint,2,opt,name=plat,proto3" json:"plat,omitempty"`
	// 帧率
	Fps int32 `protobuf:"varint,3,opt,name=fps,proto3" json:"fps,omitempty"`
	// 间隔时间
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	// 蒙版url
	MaskUrl string `protobuf:"bytes,5,opt,name=mask_url,json=maskUrl,proto3" json:"mask_url,omitempty"`
}

func (x *VideoMask) Reset() {
	*x = VideoMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMask) ProtoMessage() {}

func (x *VideoMask) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMask.ProtoReflect.Descriptor instead.
func (*VideoMask) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{22}
}

func (x *VideoMask) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *VideoMask) GetPlat() int32 {
	if x != nil {
		return x.Plat
	}
	return 0
}

func (x *VideoMask) GetFps() int32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *VideoMask) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *VideoMask) GetMaskUrl() string {
	if x != nil {
		return x.MaskUrl
	}
	return ""
}

// 视频字幕信息
type VideoSubtitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频原语言代码
	Lan string `protobuf:"bytes,1,opt,name=lan,proto3" json:"lan,omitempty"`
	// 视频原语言
	LanDoc string `protobuf:"bytes,2,opt,name=lanDoc,proto3" json:"lanDoc,omitempty"`
	// 视频字幕列表
	Subtitles []*SubtitleItem `protobuf:"bytes,3,rep,name=subtitles,proto3" json:"subtitles,omitempty"`
}

func (x *VideoSubtitle) Reset() {
	*x = VideoSubtitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSubtitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSubtitle) ProtoMessage() {}

func (x *VideoSubtitle) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSubtitle.ProtoReflect.Descriptor instead.
func (*VideoSubtitle) Descriptor() ([]byte, []int) {
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP(), []int{23}
}

func (x *VideoSubtitle) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

func (x *VideoSubtitle) GetLanDoc() string {
	if x != nil {
		return x.LanDoc
	}
	return ""
}

func (x *VideoSubtitle) GetSubtitles() []*SubtitleItem {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

var File_bilibili_tv_interfaces_dm_v1_dm_proto protoreflect.FileDescriptor

var file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDesc = []byte{
	0x0a, 0x25, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x74, 0x76, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x64, 0x6d, 0x2e, 0x76, 0x31, 0x22, 0x43, 0x0a, 0x07, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x95,
	0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d, 0x4f, 0x74, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x22, 0x68, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x44, 0x6d, 0x73, 0x4f, 0x74, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x6d, 0x73, 0x5f, 0x6f, 0x74, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x64,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d, 0x4f, 0x74,
	0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d, 0x73, 0x4f, 0x74, 0x74,
	0x22, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d, 0x73, 0x4f, 0x74,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x0d, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x64,
	0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x07, 0x64, 0x6d, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0xb7, 0x02, 0x0a, 0x0b, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x35, 0x0a, 0x0b, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x6d, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x22, 0x68, 0x0a, 0x11, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x46, 0x6c, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x63, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0xdf, 0x07, 0x0a,
	0x18, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x24, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41,
	0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x65,
	0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0xca,
	0x09, 0x0a, 0x11, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x61, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x55,
	0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4e, 0x0a, 0x24, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x4c, 0x0a, 0x23, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x66, 0x75, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x44, 0x0a, 0x1e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x49, 0x6f,
	0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x61, 0x76, 0x65, 0x22, 0x6a, 0x0a, 0x18, 0x44,
	0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xf2, 0x02, 0x0a, 0x15, 0x44, 0x61, 0x6e, 0x6d,
	0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x79, 0x0a, 0x1d, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x1a, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x63, 0x0a, 0x15,
	0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x64, 0x61,
	0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x79, 0x0a, 0x1d, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x1a, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xaf, 0x01, 0x0a,
	0x10, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65, 0x6c, 0x65,
	0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x41, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x06, 0x61, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xa8,
	0x01, 0x0a, 0x0e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xf3, 0x04, 0x0a, 0x0b, 0x44, 0x6d,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x47,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x64, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x61, 0x69, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x42, 0x6f, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62,
	0x6f, 0x78, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x73, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65,
	0x78, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x09, 0x44, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x61, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x6e, 0x44, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x54, 0x76, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x49, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x0a,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6e,
	0x6f, 0x73, 0x52, 0x07, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x11,
	0x54, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x61, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x65, 0x70, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x56, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x64,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44,
	0x6d, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d, 0x73, 0x22, 0x72, 0x0a,
	0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66,
	0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x55, 0x72,
	0x6c, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x12, 0x48, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x74, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x58, 0x69, 0x61, 0x6f, 0x4d, 0x69, 0x6b, 0x75, 0x30, 0x31,
	0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61,
	0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x74,
	0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x6d, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescOnce sync.Once
	file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescData = file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDesc
)

func file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescGZIP() []byte {
	file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescOnce.Do(func() {
		file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescData)
	})
	return file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDescData
}

var file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_bilibili_tv_interfaces_dm_v1_dm_proto_goTypes = []interface{}{
	(*Chronos)(nil),                  // 0: bilibili.tv.interfaces.dm.v1.Chronos
	(*CommandDm)(nil),                // 1: bilibili.tv.interfaces.dm.v1.CommandDm
	(*CommandDmOtt)(nil),             // 2: bilibili.tv.interfaces.dm.v1.CommandDmOtt
	(*CommandDmsOttReply)(nil),       // 3: bilibili.tv.interfaces.dm.v1.CommandDmsOttReply
	(*CommandDmsOttReq)(nil),         // 4: bilibili.tv.interfaces.dm.v1.CommandDmsOttReq
	(*DanmakuAIFlag)(nil),            // 5: bilibili.tv.interfaces.dm.v1.DanmakuAIFlag
	(*DanmakuElem)(nil),              // 6: bilibili.tv.interfaces.dm.v1.DanmakuElem
	(*DanmakuFlag)(nil),              // 7: bilibili.tv.interfaces.dm.v1.DanmakuFlag
	(*DanmakuFlagConfig)(nil),        // 8: bilibili.tv.interfaces.dm.v1.DanmakuFlagConfig
	(*DanmuDefaultPlayerConfig)(nil), // 9: bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig
	(*DanmuPlayerConfig)(nil),        // 10: bilibili.tv.interfaces.dm.v1.DanmuPlayerConfig
	(*DanmuPlayerDynamicConfig)(nil), // 11: bilibili.tv.interfaces.dm.v1.DanmuPlayerDynamicConfig
	(*DanmuPlayerViewConfig)(nil),    // 12: bilibili.tv.interfaces.dm.v1.DanmuPlayerViewConfig
	(*DmSegMobileReply)(nil),         // 13: bilibili.tv.interfaces.dm.v1.DmSegMobileReply
	(*DmSegMobileReq)(nil),           // 14: bilibili.tv.interfaces.dm.v1.DmSegMobileReq
	(*DmViewReply)(nil),              // 15: bilibili.tv.interfaces.dm.v1.DmViewReply
	(*DmViewReq)(nil),                // 16: bilibili.tv.interfaces.dm.v1.DmViewReq
	(*SubtitleItem)(nil),             // 17: bilibili.tv.interfaces.dm.v1.SubtitleItem
	(*TvViewProgressReply)(nil),      // 18: bilibili.tv.interfaces.dm.v1.TvViewProgressReply
	(*TvViewProgressReq)(nil),        // 19: bilibili.tv.interfaces.dm.v1.TvViewProgressReq
	(*UserInfo)(nil),                 // 20: bilibili.tv.interfaces.dm.v1.UserInfo
	(*VideoGuide)(nil),               // 21: bilibili.tv.interfaces.dm.v1.VideoGuide
	(*VideoMask)(nil),                // 22: bilibili.tv.interfaces.dm.v1.VideoMask
	(*VideoSubtitle)(nil),            // 23: bilibili.tv.interfaces.dm.v1.VideoSubtitle
}
var file_bilibili_tv_interfaces_dm_v1_dm_proto_depIdxs = []int32{
	2,  // 0: bilibili.tv.interfaces.dm.v1.CommandDmsOttReply.command_dms_ott:type_name -> bilibili.tv.interfaces.dm.v1.CommandDmOtt
	7,  // 1: bilibili.tv.interfaces.dm.v1.DanmakuAIFlag.dm_flags:type_name -> bilibili.tv.interfaces.dm.v1.DanmakuFlag
	9,  // 2: bilibili.tv.interfaces.dm.v1.DanmuPlayerViewConfig.danmuku_default_player_config:type_name -> bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig
	10, // 3: bilibili.tv.interfaces.dm.v1.DanmuPlayerViewConfig.danmuku_player_config:type_name -> bilibili.tv.interfaces.dm.v1.DanmuPlayerConfig
	11, // 4: bilibili.tv.interfaces.dm.v1.DanmuPlayerViewConfig.danmuku_player_dynamic_config:type_name -> bilibili.tv.interfaces.dm.v1.DanmuPlayerDynamicConfig
	6,  // 5: bilibili.tv.interfaces.dm.v1.DmSegMobileReply.elems:type_name -> bilibili.tv.interfaces.dm.v1.DanmakuElem
	5,  // 6: bilibili.tv.interfaces.dm.v1.DmSegMobileReply.ai_flag:type_name -> bilibili.tv.interfaces.dm.v1.DanmakuAIFlag
	22, // 7: bilibili.tv.interfaces.dm.v1.DmViewReply.mask:type_name -> bilibili.tv.interfaces.dm.v1.VideoMask
	23, // 8: bilibili.tv.interfaces.dm.v1.DmViewReply.subtitle:type_name -> bilibili.tv.interfaces.dm.v1.VideoSubtitle
	8,  // 9: bilibili.tv.interfaces.dm.v1.DmViewReply.ai_flag:type_name -> bilibili.tv.interfaces.dm.v1.DanmakuFlagConfig
	12, // 10: bilibili.tv.interfaces.dm.v1.DmViewReply.player_config:type_name -> bilibili.tv.interfaces.dm.v1.DanmuPlayerViewConfig
	20, // 11: bilibili.tv.interfaces.dm.v1.SubtitleItem.author:type_name -> bilibili.tv.interfaces.dm.v1.UserInfo
	21, // 12: bilibili.tv.interfaces.dm.v1.TvViewProgressReply.video_guide:type_name -> bilibili.tv.interfaces.dm.v1.VideoGuide
	0,  // 13: bilibili.tv.interfaces.dm.v1.TvViewProgressReply.chronos:type_name -> bilibili.tv.interfaces.dm.v1.Chronos
	1,  // 14: bilibili.tv.interfaces.dm.v1.VideoGuide.command_dms:type_name -> bilibili.tv.interfaces.dm.v1.CommandDm
	17, // 15: bilibili.tv.interfaces.dm.v1.VideoSubtitle.subtitles:type_name -> bilibili.tv.interfaces.dm.v1.SubtitleItem
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_bilibili_tv_interfaces_dm_v1_dm_proto_init() }
func file_bilibili_tv_interfaces_dm_v1_dm_proto_init() {
	if File_bilibili_tv_interfaces_dm_v1_dm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chronos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDmOtt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDmsOttReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDmsOttReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuAIFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuFlagConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuDefaultPlayerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuPlayerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuPlayerDynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuPlayerViewConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegMobileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegMobileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmViewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtitleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvViewProgressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvViewProgressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoSubtitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bilibili_tv_interfaces_dm_v1_dm_proto_goTypes,
		DependencyIndexes: file_bilibili_tv_interfaces_dm_v1_dm_proto_depIdxs,
		MessageInfos:      file_bilibili_tv_interfaces_dm_v1_dm_proto_msgTypes,
	}.Build()
	File_bilibili_tv_interfaces_dm_v1_dm_proto = out.File
	file_bilibili_tv_interfaces_dm_v1_dm_proto_rawDesc = nil
	file_bilibili_tv_interfaces_dm_v1_dm_proto_goTypes = nil
	file_bilibili_tv_interfaces_dm_v1_dm_proto_depIdxs = nil
}
