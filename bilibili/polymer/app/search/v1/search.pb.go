// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: bilibili/polymer/app/search/v1/search.proto

package v1

import (
	v1 "github.com/XiaoMiku01/bilibili-grpc-api-go/bilibili/app/archive/middleware/v1"
	pagination "github.com/XiaoMiku01/bilibili-grpc-api-go/bilibili/pagination"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategorySort int32

const (
	CategorySort_CATEGORY_SORT_DEFAULT       CategorySort = 0 //
	CategorySort_CATEGORY_SORT_PUBLISH_TIME  CategorySort = 1 //
	CategorySort_CATEGORY_SORT_CLICK_COUNT   CategorySort = 2 //
	CategorySort_CATEGORY_SORT_COMMENT_COUNT CategorySort = 3 //
	CategorySort_CATEGORY_SORT_LIKE_COUNT    CategorySort = 4 //
)

// Enum value maps for CategorySort.
var (
	CategorySort_name = map[int32]string{
		0: "CATEGORY_SORT_DEFAULT",
		1: "CATEGORY_SORT_PUBLISH_TIME",
		2: "CATEGORY_SORT_CLICK_COUNT",
		3: "CATEGORY_SORT_COMMENT_COUNT",
		4: "CATEGORY_SORT_LIKE_COUNT",
	}
	CategorySort_value = map[string]int32{
		"CATEGORY_SORT_DEFAULT":       0,
		"CATEGORY_SORT_PUBLISH_TIME":  1,
		"CATEGORY_SORT_CLICK_COUNT":   2,
		"CATEGORY_SORT_COMMENT_COUNT": 3,
		"CATEGORY_SORT_LIKE_COUNT":    4,
	}
)

func (x CategorySort) Enum() *CategorySort {
	p := new(CategorySort)
	*p = x
	return p
}

func (x CategorySort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategorySort) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_polymer_app_search_v1_search_proto_enumTypes[0].Descriptor()
}

func (CategorySort) Type() protoreflect.EnumType {
	return &file_bilibili_polymer_app_search_v1_search_proto_enumTypes[0]
}

func (x CategorySort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CategorySort.Descriptor instead.
func (CategorySort) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{0}
}

type Sort int32

const (
	Sort_SORT_DEFAULT       Sort = 0 //
	Sort_SORT_VIEW_COUNT    Sort = 1 //
	Sort_SORT_PUBLISH_TIME  Sort = 2 //
	Sort_SORT_DANMAKU_COUNT Sort = 3 //
)

// Enum value maps for Sort.
var (
	Sort_name = map[int32]string{
		0: "SORT_DEFAULT",
		1: "SORT_VIEW_COUNT",
		2: "SORT_PUBLISH_TIME",
		3: "SORT_DANMAKU_COUNT",
	}
	Sort_value = map[string]int32{
		"SORT_DEFAULT":       0,
		"SORT_VIEW_COUNT":    1,
		"SORT_PUBLISH_TIME":  2,
		"SORT_DANMAKU_COUNT": 3,
	}
)

func (x Sort) Enum() *Sort {
	p := new(Sort)
	*p = x
	return p
}

func (x Sort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sort) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_polymer_app_search_v1_search_proto_enumTypes[1].Descriptor()
}

func (Sort) Type() protoreflect.EnumType {
	return &file_bilibili_polymer_app_search_v1_search_proto_enumTypes[1]
}

func (x Sort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sort.Descriptor instead.
func (Sort) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{1}
}

type UserSort int32

const (
	UserSort_USER_SORT_DEFAULT       UserSort = 0 //
	UserSort_USER_SORT_FANS_DESCEND  UserSort = 1 //
	UserSort_USER_SORT_FANS_ASCEND   UserSort = 2 //
	UserSort_USER_SORT_LEVEL_DESCEND UserSort = 3 //
	UserSort_USER_SORT_LEVEL_ASCEND  UserSort = 4 //
)

// Enum value maps for UserSort.
var (
	UserSort_name = map[int32]string{
		0: "USER_SORT_DEFAULT",
		1: "USER_SORT_FANS_DESCEND",
		2: "USER_SORT_FANS_ASCEND",
		3: "USER_SORT_LEVEL_DESCEND",
		4: "USER_SORT_LEVEL_ASCEND",
	}
	UserSort_value = map[string]int32{
		"USER_SORT_DEFAULT":       0,
		"USER_SORT_FANS_DESCEND":  1,
		"USER_SORT_FANS_ASCEND":   2,
		"USER_SORT_LEVEL_DESCEND": 3,
		"USER_SORT_LEVEL_ASCEND":  4,
	}
)

func (x UserSort) Enum() *UserSort {
	p := new(UserSort)
	*p = x
	return p
}

func (x UserSort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSort) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_polymer_app_search_v1_search_proto_enumTypes[2].Descriptor()
}

func (UserSort) Type() protoreflect.EnumType {
	return &file_bilibili_polymer_app_search_v1_search_proto_enumTypes[2]
}

func (x UserSort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSort.Descriptor instead.
func (UserSort) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{2}
}

type UserType int32

const (
	UserType_ALL                UserType = 0 //
	UserType_UP                 UserType = 1 //
	UserType_NORMAL_USER        UserType = 2 //
	UserType_AUTHENTICATED_USER UserType = 3 //
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "ALL",
		1: "UP",
		2: "NORMAL_USER",
		3: "AUTHENTICATED_USER",
	}
	UserType_value = map[string]int32{
		"ALL":                0,
		"UP":                 1,
		"NORMAL_USER":        2,
		"AUTHENTICATED_USER": 3,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_polymer_app_search_v1_search_proto_enumTypes[3].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_bilibili_polymer_app_search_v1_search_proto_enumTypes[3]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{3}
}

type Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online int32 `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Rname string `protobuf:"bytes,2,opt,name=rname,proto3" json:"rname,omitempty"`
	RoomId int64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Tname string `protobuf:"bytes,4,opt,name=tname,proto3" json:"tname,omitempty"`
	UpId int64 `protobuf:"varint,5,opt,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
	UpName string `protobuf:"bytes,6,opt,name=up_name,json=upName,proto3" json:"up_name,omitempty"`
	Rid int64 `protobuf:"varint,7,opt,name=rid,proto3" json:"rid,omitempty"`
	Tid int64 `protobuf:"varint,8,opt,name=tid,proto3" json:"tid,omitempty"`
	Aid int64 `protobuf:"varint,9,opt,name=aid,proto3" json:"aid,omitempty"`
}

func (x *Args) Reset() {
	*x = Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args) ProtoMessage() {}

func (x *Args) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args.ProtoReflect.Descriptor instead.
func (*Args) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{0}
}

func (x *Args) GetOnline() int32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *Args) GetRname() string {
	if x != nil {
		return x.Rname
	}
	return ""
}

func (x *Args) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Args) GetTname() string {
	if x != nil {
		return x.Tname
	}
	return ""
}

func (x *Args) GetUpId() int64 {
	if x != nil {
		return x.UpId
	}
	return 0
}

func (x *Args) GetUpName() string {
	if x != nil {
		return x.UpName
	}
	return ""
}

func (x *Args) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *Args) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Args) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

type Avatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cover string `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	Event string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	EventV2 string `protobuf:"bytes,3,opt,name=event_v2,json=eventV2,proto3" json:"event_v2,omitempty"`
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	UpId int64 `protobuf:"varint,5,opt,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
	Uri string `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
	FaceNftNew int32 `protobuf:"varint,7,opt,name=face_nft_new,json=faceNftNew,proto3" json:"face_nft_new,omitempty"`
	NftFaceIcon *NftFaceIcon `protobuf:"bytes,8,opt,name=nft_face_icon,json=nftFaceIcon,proto3" json:"nft_face_icon,omitempty"`
}

func (x *Avatar) Reset() {
	*x = Avatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Avatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Avatar) ProtoMessage() {}

func (x *Avatar) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Avatar.ProtoReflect.Descriptor instead.
func (*Avatar) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{1}
}

func (x *Avatar) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Avatar) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Avatar) GetEventV2() string {
	if x != nil {
		return x.EventV2
	}
	return ""
}

func (x *Avatar) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Avatar) GetUpId() int64 {
	if x != nil {
		return x.UpId
	}
	return 0
}

func (x *Avatar) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Avatar) GetFaceNftNew() int32 {
	if x != nil {
		return x.FaceNftNew
	}
	return 0
}

func (x *Avatar) GetNftFaceIcon() *NftFaceIcon {
	if x != nil {
		return x.NftFaceIcon
	}
	return nil
}

type AvItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	CtimeLabel string `protobuf:"bytes,4,opt,name=ctime_label,json=ctimeLabel,proto3" json:"ctime_label,omitempty"`
	Duration string `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Play int32 `protobuf:"varint,6,opt,name=play,proto3" json:"play,omitempty"`
	Danmaku int64 `protobuf:"varint,7,opt,name=danmaku,proto3" json:"danmaku,omitempty"`
	Ctime int32 `protobuf:"varint,8,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Goto string `protobuf:"bytes,9,opt,name=goto,proto3" json:"goto,omitempty"`
	Param string `protobuf:"bytes,10,opt,name=param,proto3" json:"param,omitempty"`
	Position int32 `protobuf:"varint,11,opt,name=position,proto3" json:"position,omitempty"`
	CtimeLabelV2 string `protobuf:"bytes,12,opt,name=ctime_label_v2,json=ctimeLabelV2,proto3" json:"ctime_label_v2,omitempty"`
}

func (x *AvItem) Reset() {
	*x = AvItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvItem) ProtoMessage() {}

func (x *AvItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvItem.ProtoReflect.Descriptor instead.
func (*AvItem) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{2}
}

func (x *AvItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AvItem) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *AvItem) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *AvItem) GetCtimeLabel() string {
	if x != nil {
		return x.CtimeLabel
	}
	return ""
}

func (x *AvItem) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AvItem) GetPlay() int32 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *AvItem) GetDanmaku() int64 {
	if x != nil {
		return x.Danmaku
	}
	return 0
}

func (x *AvItem) GetCtime() int32 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *AvItem) GetGoto() string {
	if x != nil {
		return x.Goto
	}
	return ""
}

func (x *AvItem) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *AvItem) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *AvItem) GetCtimeLabelV2() string {
	if x != nil {
		return x.CtimeLabelV2
	}
	return ""
}

type Background struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show int32 `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	BgPicUrl string `protobuf:"bytes,2,opt,name=bg_pic_url,json=bgPicUrl,proto3" json:"bg_pic_url,omitempty"`
	FgPicUrl string `protobuf:"bytes,3,opt,name=fg_pic_url,json=fgPicUrl,proto3" json:"fg_pic_url,omitempty"`
}

func (x *Background) Reset() {
	*x = Background{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Background) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Background) ProtoMessage() {}

func (x *Background) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Background.ProtoReflect.Descriptor instead.
func (*Background) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{3}
}

func (x *Background) GetShow() int32 {
	if x != nil {
		return x.Show
	}
	return 0
}

func (x *Background) GetBgPicUrl() string {
	if x != nil {
		return x.BgPicUrl
	}
	return ""
}

func (x *Background) GetFgPicUrl() string {
	if x != nil {
		return x.FgPicUrl
	}
	return ""
}

type Badge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	BgCover string `protobuf:"bytes,2,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
}

func (x *Badge) Reset() {
	*x = Badge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Badge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Badge) ProtoMessage() {}

func (x *Badge) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Badge.ProtoReflect.Descriptor instead.
func (*Badge) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{4}
}

func (x *Badge) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Badge) GetBgCover() string {
	if x != nil {
		return x.BgCover
	}
	return ""
}

type Badge2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgCover string `protobuf:"bytes,1,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Badge2) Reset() {
	*x = Badge2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Badge2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Badge2) ProtoMessage() {}

func (x *Badge2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Badge2.ProtoReflect.Descriptor instead.
func (*Badge2) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{5}
}

func (x *Badge2) GetBgCover() string {
	if x != nil {
		return x.BgCover
	}
	return ""
}

func (x *Badge2) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type BottomButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *BottomButton) Reset() {
	*x = BottomButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BottomButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BottomButton) ProtoMessage() {}

func (x *BottomButton) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BottomButton.ProtoReflect.Descriptor instead.
func (*BottomButton) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{6}
}

func (x *BottomButton) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BottomButton) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type BrandADAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Goto string `protobuf:"bytes,2,opt,name=goto,proto3" json:"goto,omitempty"`
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Face string `protobuf:"bytes,5,opt,name=face,proto3" json:"face,omitempty"`
	Sign string `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	Relation *Relation `protobuf:"bytes,7,opt,name=relation,proto3" json:"relation,omitempty"`
	Roomid int64 `protobuf:"varint,8,opt,name=roomid,proto3" json:"roomid,omitempty"`
	LiveStatus int64 `protobuf:"varint,9,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	LiveLink string `protobuf:"bytes,10,opt,name=live_link,json=liveLink,proto3" json:"live_link,omitempty"`
	OfficialVerify *OfficialVerify `protobuf:"bytes,11,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify,omitempty"`
	Vip *VipInfo `protobuf:"bytes,12,opt,name=vip,proto3" json:"vip,omitempty"`
	Uri string `protobuf:"bytes,13,opt,name=uri,proto3" json:"uri,omitempty"`
	FaceNftNew int32 `protobuf:"varint,14,opt,name=face_nft_new,json=faceNftNew,proto3" json:"face_nft_new,omitempty"`
}

func (x *BrandADAccount) Reset() {
	*x = BrandADAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandADAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandADAccount) ProtoMessage() {}

func (x *BrandADAccount) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandADAccount.ProtoReflect.Descriptor instead.
func (*BrandADAccount) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{7}
}

func (x *BrandADAccount) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *BrandADAccount) GetGoto() string {
	if x != nil {
		return x.Goto
	}
	return ""
}

func (x *BrandADAccount) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *BrandADAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandADAccount) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *BrandADAccount) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *BrandADAccount) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *BrandADAccount) GetRoomid() int64 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *BrandADAccount) GetLiveStatus() int64 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *BrandADAccount) GetLiveLink() string {
	if x != nil {
		return x.LiveLink
	}
	return ""
}

func (x *BrandADAccount) GetOfficialVerify() *OfficialVerify {
	if x != nil {
		return x.OfficialVerify
	}
	return nil
}

func (x *BrandADAccount) GetVip() *VipInfo {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *BrandADAccount) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *BrandADAccount) GetFaceNftNew() int32 {
	if x != nil {
		return x.FaceNftNew
	}
	return 0
}

type BrandADArc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Goto string `protobuf:"bytes,2,opt,name=goto,proto3" json:"goto,omitempty"`
	Aid int64 `protobuf:"varint,3,opt,name=aid,proto3" json:"aid,omitempty"`
	Play int64 `protobuf:"varint,4,opt,name=play,proto3" json:"play,omitempty"`
	Reply int64 `protobuf:"varint,5,opt,name=reply,proto3" json:"reply,omitempty"`
	Duration string `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Title string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Uri string `protobuf:"bytes,9,opt,name=uri,proto3" json:"uri,omitempty"`
	Cover string `protobuf:"bytes,10,opt,name=cover,proto3" json:"cover,omitempty"`
}

func (x *BrandADArc) Reset() {
	*x = BrandADArc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandADArc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandADArc) ProtoMessage() {}

func (x *BrandADArc) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandADArc.ProtoReflect.Descriptor instead.
func (*BrandADArc) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{8}
}

func (x *BrandADArc) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *BrandADArc) GetGoto() string {
	if x != nil {
		return x.Goto
	}
	return ""
}

func (x *BrandADArc) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *BrandADArc) GetPlay() int64 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *BrandADArc) GetReply() int64 {
	if x != nil {
		return x.Reply
	}
	return 0
}

func (x *BrandADArc) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *BrandADArc) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *BrandADArc) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BrandADArc) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *BrandADArc) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

type Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Param string `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Event string `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	Selected int32 `protobuf:"varint,5,opt,name=selected,proto3" json:"selected,omitempty"`
	Type int32 `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	EventV2 string `protobuf:"bytes,7,opt,name=event_v2,json=eventV2,proto3" json:"event_v2,omitempty"`
	Relation *Relation `protobuf:"bytes,8,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *Button) Reset() {
	*x = Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Button) ProtoMessage() {}

func (x *Button) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Button.ProtoReflect.Descriptor instead.
func (*Button) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{9}
}

func (x *Button) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Button) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *Button) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Button) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Button) GetSelected() int32 {
	if x != nil {
		return x.Selected
	}
	return 0
}

func (x *Button) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Button) GetEventV2() string {
	if x != nil {
		return x.EventV2
	}
	return ""
}

func (x *Button) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

type ButtonMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ButtonStatus string `protobuf:"bytes,3,opt,name=button_status,json=buttonStatus,proto3" json:"button_status,omitempty"`
	Toast string `protobuf:"bytes,4,opt,name=toast,proto3" json:"toast,omitempty"`
}

func (x *ButtonMeta) Reset() {
	*x = ButtonMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonMeta) ProtoMessage() {}

func (x *ButtonMeta) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonMeta.ProtoReflect.Descriptor instead.
func (*ButtonMeta) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{10}
}

func (x *ButtonMeta) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ButtonMeta) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ButtonMeta) GetButtonStatus() string {
	if x != nil {
		return x.ButtonStatus
	}
	return ""
}

func (x *ButtonMeta) GetToast() string {
	if x != nil {
		return x.Toast
	}
	return ""
}

type CardBusinessBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GotoIcon *GotoIcon `protobuf:"bytes,1,opt,name=goto_icon,json=gotoIcon,proto3" json:"goto_icon,omitempty"`
	BadgeStyle *ReasonStyle `protobuf:"bytes,2,opt,name=badge_style,json=badgeStyle,proto3" json:"badge_style,omitempty"`
}

func (x *CardBusinessBadge) Reset() {
	*x = CardBusinessBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBusinessBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBusinessBadge) ProtoMessage() {}

func (x *CardBusinessBadge) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBusinessBadge.ProtoReflect.Descriptor instead.
func (*CardBusinessBadge) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{11}
}

func (x *CardBusinessBadge) GetGotoIcon() *GotoIcon {
	if x != nil {
		return x.GotoIcon
	}
	return nil
}

func (x *CardBusinessBadge) GetBadgeStyle() *ReasonStyle {
	if x != nil {
		return x.BadgeStyle
	}
	return nil
}

type ChannelLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ChannelLabel) Reset() {
	*x = ChannelLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLabel) ProtoMessage() {}

func (x *ChannelLabel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLabel.ProtoReflect.Descriptor instead.
func (*ChannelLabel) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelLabel) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChannelLabel) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type ChannelMixedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CoverLeftIcon1 int32 `protobuf:"varint,2,opt,name=cover_left_icon1,json=coverLeftIcon1,proto3" json:"cover_left_icon1,omitempty"`
	CoverLeftText1 string `protobuf:"bytes,3,opt,name=cover_left_text1,json=coverLeftText1,proto3" json:"cover_left_text1,omitempty"`
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	Goto string `protobuf:"bytes,5,opt,name=goto,proto3" json:"goto,omitempty"`
	Param string `protobuf:"bytes,6,opt,name=param,proto3" json:"param,omitempty"`
	Uri string `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	Title string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Badge *Badge2 `protobuf:"bytes,9,opt,name=badge,proto3" json:"badge,omitempty"`
}

func (x *ChannelMixedItem) Reset() {
	*x = ChannelMixedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMixedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMixedItem) ProtoMessage() {}

func (x *ChannelMixedItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMixedItem.ProtoReflect.Descriptor instead.
func (*ChannelMixedItem) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelMixedItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelMixedItem) GetCoverLeftIcon1() int32 {
	if x != nil {
		return x.CoverLeftIcon1
	}
	return 0
}

func (x *ChannelMixedItem) GetCoverLeftText1() string {
	if x != nil {
		return x.CoverLeftText1
	}
	return ""
}

func (x *ChannelMixedItem) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *ChannelMixedItem) GetGoto() string {
	if x != nil {
		return x.Goto
	}
	return ""
}

func (x *ChannelMixedItem) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *ChannelMixedItem) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ChannelMixedItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChannelMixedItem) GetBadge() *Badge2 {
	if x != nil {
		return x.Badge
	}
	return nil
}

type CheckMore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *CheckMore) Reset() {
	*x = CheckMore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMore) ProtoMessage() {}

func (x *CheckMore) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMore.ProtoReflect.Descriptor instead.
func (*CheckMore) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{14}
}

func (x *CheckMore) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CheckMore) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type CloudGameParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFrom int64 `protobuf:"varint,1,opt,name=source_from,json=sourceFrom,proto3" json:"source_from,omitempty"`
	Scene string `protobuf:"bytes,2,opt,name=scene,proto3" json:"scene,omitempty"`
}

func (x *CloudGameParams) Reset() {
	*x = CloudGameParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudGameParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudGameParams) ProtoMessage() {}

func (x *CloudGameParams) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudGameParams.ProtoReflect.Descriptor instead.
func (*CloudGameParams) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{15}
}

func (x *CloudGameParams) GetSourceFrom() int64 {
	if x != nil {
		return x.SourceFrom
	}
	return 0
}

func (x *CloudGameParams) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

type DetailsRelationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	CoverLeftText string `protobuf:"bytes,3,opt,name=cover_left_text,json=coverLeftText,proto3" json:"cover_left_text,omitempty"`
	CoverBadgeStyle *ReasonStyle `protobuf:"bytes,4,opt,name=cover_badge_style,json=coverBadgeStyle,proto3" json:"cover_badge_style,omitempty"`
	ModulePos string `protobuf:"bytes,5,opt,name=module_pos,json=modulePos,proto3" json:"module_pos,omitempty"`
	Goto string `protobuf:"bytes,6,opt,name=goto,proto3" json:"goto,omitempty"`
	Param string `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`
	Uri string `protobuf:"bytes,8,opt,name=uri,proto3" json:"uri,omitempty"`
	Position int32 `protobuf:"varint,9,opt,name=position,proto3" json:"position,omitempty"`
	CoverLeftTextV2 string `protobuf:"bytes,10,opt,name=cover_left_text_v2,json=coverLeftTextV2,proto3" json:"cover_left_text_v2,omitempty"`
	CoverBadgeStyleV2 *ReasonStyle `protobuf:"bytes,11,opt,name=cover_badge_style_v2,json=coverBadgeStyleV2,proto3" json:"cover_badge_style_v2,omitempty"`
}

func (x *DetailsRelationItem) Reset() {
	*x = DetailsRelationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailsRelationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailsRelationItem) ProtoMessage() {}

func (x *DetailsRelationItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailsRelationItem.ProtoReflect.Descriptor instead.
func (*DetailsRelationItem) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{16}
}

func (x *DetailsRelationItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DetailsRelationItem) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *DetailsRelationItem) GetCoverLeftText() string {
	if x != nil {
		return x.CoverLeftText
	}
	return ""
}

func (x *DetailsRelationItem) GetCoverBadgeStyle() *ReasonStyle {
	if x != nil {
		return x.CoverBadgeStyle
	}
	return nil
}

func (x *DetailsRelationItem) GetModulePos() string {
	if x != nil {
		return x.ModulePos
	}
	return ""
}

func (x *DetailsRelationItem) GetGoto() string {
	if x != nil {
		return x.Goto
	}
	return ""
}

func (x *DetailsRelationItem) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *DetailsRelationItem) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DetailsRelationItem) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *DetailsRelationItem) GetCoverLeftTextV2() string {
	if x != nil {
		return x.CoverLeftTextV2
	}
	return ""
}

func (x *DetailsRelationItem) GetCoverBadgeStyleV2() *ReasonStyle {
	if x != nil {
		return x.CoverBadgeStyleV2
	}
	return nil
}

type DislikeReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DislikeReason) Reset() {
	*x = DislikeReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DislikeReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DislikeReason) ProtoMessage() {}

func (x *DislikeReason) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DislikeReason.ProtoReflect.Descriptor instead.
func (*DislikeReason) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{17}
}

func (x *DislikeReason) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DislikeReason) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DisplayOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoTitleRow int32 `protobuf:"varint,1,opt,name=video_title_row,json=videoTitleRow,proto3" json:"video_title_row,omitempty"`
	SearchPageVisualOpti int32 `protobuf:"varint,2,opt,name=search_page_visual_opti,json=searchPageVisualOpti,proto3" json:"search_page_visual_opti,omitempty"`
}

func (x *DisplayOption) Reset() {
	*x = DisplayOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayOption) ProtoMessage() {}

func (x *DisplayOption) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayOption.ProtoReflect.Descriptor instead.
func (*DisplayOption) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{18}
}

func (x *DisplayOption) GetVideoTitleRow() int32 {
	if x != nil {
		return x.VideoTitleRow
	}
	return 0
}

func (x *DisplayOption) GetSearchPageVisualOpti() int32 {
	if x != nil {
		return x.SearchPageVisualOpti
	}
	return 0
}

type DyTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *DyTopic) Reset() {
	*x = DyTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DyTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DyTopic) ProtoMessage() {}

func (x *DyTopic) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DyTopic.ProtoReflect.Descriptor instead.
func (*DyTopic) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{19}
}

func (x *DyTopic) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DyTopic) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type EasterEgg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShowCount int32 `protobuf:"varint,2,opt,name=show_count,json=showCount,proto3" json:"show_count,omitempty"`
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	CloseCount int32 `protobuf:"varint,5,opt,name=close_count,json=closeCount,proto3" json:"close_count,omitempty"`
	MaskTransparency int32 `protobuf:"varint,6,opt,name=mask_transparency,json=maskTransparency,proto3" json:"mask_transparency,omitempty"`
	MaskColor string `protobuf:"bytes,7,opt,name=mask_color,json=maskColor,proto3" json:"mask_color,omitempty"`
	PicType int32 `protobuf:"varint,8,opt,name=pic_type,json=picType,proto3" json:"pic_type,omitempty"`
	ShowTime int32 `protobuf:"varint,9,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
	SourceUrl string `protobuf:"bytes,10,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	SourceMd5 string `protobuf:"bytes,11,opt,name=source_md5,json=sourceMd5,proto3" json:"source_md5,omitempty"`
	SourceSize int32 `protobuf:"varint,12,opt,name=source_size,json=sourceSize,proto3" json:"source_size,omitempty"`
}

func (x *EasterEgg) Reset() {
	*x = EasterEgg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterEgg) ProtoMessage() {}

func (x *EasterEgg) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterEgg.ProtoReflect.Descriptor instead.
func (*EasterEgg) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{20}
}

func (x *EasterEgg) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EasterEgg) GetShowCount() int32 {
	if x != nil {
		return x.ShowCount
	}
	return 0
}

func (x *EasterEgg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EasterEgg) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EasterEgg) GetCloseCount() int32 {
	if x != nil {
		return x.CloseCount
	}
	return 0
}

func (x *EasterEgg) GetMaskTransparency() int32 {
	if x != nil {
		return x.MaskTransparency
	}
	return 0
}

func (x *EasterEgg) GetMaskColor() string {
	if x != nil {
		return x.MaskColor
	}
	return ""
}

func (x *EasterEgg) GetPicType() int32 {
	if x != nil {
		return x.PicType
	}
	return 0
}

func (x *EasterEgg) GetShowTime() int32 {
	if x != nil {
		return x.ShowTime
	}
	return 0
}

func (x *EasterEgg) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *EasterEgg) GetSourceMd5() string {
	if x != nil {
		return x.SourceMd5
	}
	return ""
}

func (x *EasterEgg) GetSourceSize() int32 {
	if x != nil {
		return x.SourceSize
	}
	return 0
}

type Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Param string `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	Index string `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	Badges []*ReasonStyle `protobuf:"bytes,4,rep,name=badges,proto3" json:"badges,omitempty"`
	Position int32 `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Episode) Reset() {
	*x = Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Episode) ProtoMessage() {}

func (x *Episode) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Episode.ProtoReflect.Descriptor instead.
func (*Episode) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{21}
}

func (x *Episode) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Episode) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *Episode) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Episode) GetBadges() []*ReasonStyle {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *Episode) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

type EpisodeNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Param string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	IsNew int32 `protobuf:"varint,4,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	Badges []*ReasonStyle `protobuf:"bytes,5,rep,name=badges,proto3" json:"badges,omitempty"`
	Type int32 `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Position int32 `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	Cover string `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover,omitempty"`
	Label string `protobuf:"bytes,9,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *EpisodeNew) Reset() {
	*x = EpisodeNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeNew) ProtoMessage() {}

func (x *EpisodeNew) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeNew.ProtoReflect.Descriptor instead.
func (*EpisodeNew) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{22}
}

func (x *EpisodeNew) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EpisodeNew) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *EpisodeNew) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *EpisodeNew) GetIsNew() int32 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

func (x *EpisodeNew) GetBadges() []*ReasonStyle {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *EpisodeNew) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EpisodeNew) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *EpisodeNew) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *EpisodeNew) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type ExtraLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ExtraLink) Reset() {
	*x = ExtraLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraLink) ProtoMessage() {}

func (x *ExtraLink) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraLink.ProtoReflect.Descriptor instead.
func (*ExtraLink) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{23}
}

func (x *ExtraLink) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ExtraLink) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type FollowButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Texts map[string]string `protobuf:"bytes,2,rep,name=texts,proto3" json:"texts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusReport string `protobuf:"bytes,3,opt,name=status_report,json=statusReport,proto3" json:"status_report,omitempty"`
}

func (x *FollowButton) Reset() {
	*x = FollowButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowButton) ProtoMessage() {}

func (x *FollowButton) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowButton.ProtoReflect.Descriptor instead.
func (*FollowButton) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{24}
}

func (x *FollowButton) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *FollowButton) GetTexts() map[string]string {
	if x != nil {
		return x.Texts
	}
	return nil
}

func (x *FollowButton) GetStatusReport() string {
	if x != nil {
		return x.StatusReport
	}
	return ""
}

type FullTextResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	ShowText string `protobuf:"bytes,2,opt,name=show_text,json=showText,proto3" json:"show_text,omitempty"`
	JumpStartProgress int64 `protobuf:"varint,3,opt,name=jump_start_progress,json=jumpStartProgress,proto3" json:"jump_start_progress,omitempty"`
	JumpUri string `protobuf:"bytes,4,opt,name=jump_uri,json=jumpUri,proto3" json:"jump_uri,omitempty"`
}

func (x *FullTextResult) Reset() {
	*x = FullTextResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullTextResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTextResult) ProtoMessage() {}

func (x *FullTextResult) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTextResult.ProtoReflect.Descriptor instead.
func (*FullTextResult) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{25}
}

func (x *FullTextResult) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FullTextResult) GetShowText() string {
	if x != nil {
		return x.ShowText
	}
	return ""
}

func (x *FullTextResult) GetJumpStartProgress() int64 {
	if x != nil {
		return x.JumpStartProgress
	}
	return 0
}

func (x *FullTextResult) GetJumpUri() string {
	if x != nil {
		return x.JumpUri
	}
	return ""
}

type GotoIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconUrl string `protobuf:"bytes,1,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	IconNightUrl string `protobuf:"bytes,2,opt,name=icon_night_url,json=iconNightUrl,proto3" json:"icon_night_url,omitempty"`
	IconWidth int32 `protobuf:"varint,3,opt,name=icon_width,json=iconWidth,proto3" json:"icon_width,omitempty"`
	IconHeight int32 `protobuf:"varint,4,opt,name=icon_height,json=iconHeight,proto3" json:"icon_height,omitempty"`
}

func (x *GotoIcon) Reset() {
	*x = GotoIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GotoIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GotoIcon) ProtoMessage() {}

func (x *GotoIcon) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GotoIcon.ProtoReflect.Descriptor instead.
func (*GotoIcon) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{26}
}

func (x *GotoIcon) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *GotoIcon) GetIconNightUrl() string {
	if x != nil {
		return x.IconNightUrl
	}
	return ""
}

func (x *GotoIcon) GetIconWidth() int32 {
	if x != nil {
		return x.IconWidth
	}
	return 0
}

func (x *GotoIcon) GetIconHeight() int32 {
	if x != nil {
		return x.IconHeight
	}
	return 0
}

type InlineProgressBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconDrag string `protobuf:"bytes,1,opt,name=icon_drag,json=iconDrag,proto3" json:"icon_drag,omitempty"`
	IconDragHash string `protobuf:"bytes,2,opt,name=icon_drag_hash,json=iconDragHash,proto3" json:"icon_drag_hash,omitempty"`
	IconStop string `protobuf:"bytes,3,opt,name=icon_stop,json=iconStop,proto3" json:"icon_stop,omitempty"`
	IconStopHash string `protobuf:"bytes,4,opt,name=icon_stop_hash,json=iconStopHash,proto3" json:"icon_stop_hash,omitempty"`
}

func (x *InlineProgressBar) Reset() {
	*x = InlineProgressBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineProgressBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineProgressBar) ProtoMessage() {}

func (x *InlineProgressBar) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineProgressBar.ProtoReflect.Descriptor instead.
func (*InlineProgressBar) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{27}
}

func (x *InlineProgressBar) GetIconDrag() string {
	if x != nil {
		return x.IconDrag
	}
	return ""
}

func (x *InlineProgressBar) GetIconDragHash() string {
	if x != nil {
		return x.IconDragHash
	}
	return ""
}

func (x *InlineProgressBar) GetIconStop() string {
	if x != nil {
		return x.IconStop
	}
	return ""
}

func (x *InlineProgressBar) GetIconStopHash() string {
	if x != nil {
		return x.IconStopHash
	}
	return ""
}

type InlineThreePointPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelType int32 `protobuf:"varint,1,opt,name=panel_type,json=panelType,proto3" json:"panel_type,omitempty"`
	ShareId string `protobuf:"bytes,2,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	ShareOrigin string `protobuf:"bytes,3,opt,name=share_origin,json=shareOrigin,proto3" json:"share_origin,omitempty"`
	FunctionalButtons []*ShareButtonItem `protobuf:"bytes,4,rep,name=functional_buttons,json=functionalButtons,proto3" json:"functional_buttons,omitempty"`
}

func (x *InlineThreePointPanel) Reset() {
	*x = InlineThreePointPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineThreePointPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineThreePointPanel) ProtoMessage() {}

func (x *InlineThreePointPanel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineThreePointPanel.ProtoReflect.Descriptor instead.
func (*InlineThreePointPanel) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{28}
}

func (x *InlineThreePointPanel) GetPanelType() int32 {
	if x != nil {
		return x.PanelType
	}
	return 0
}

func (x *InlineThreePointPanel) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *InlineThreePointPanel) GetShareOrigin() string {
	if x != nil {
		return x.ShareOrigin
	}
	return ""
}

func (x *InlineThreePointPanel) GetFunctionalButtons() []*ShareButtonItem {
	if x != nil {
		return x.FunctionalButtons
	}
	return nil
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Param string `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	Goto string `protobuf:"bytes,3,opt,name=goto,proto3" json:"goto,omitempty"`
	Linktype string `protobuf:"bytes,4,opt,name=linktype,proto3" json:"linktype,omitempty"`
	Position int32 `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	Trackid string `protobuf:"bytes,6,opt,name=trackid,proto3" json:"trackid,omitempty"`
	// Types that are assignable to CardItem:
	//
	//	*Item_Special
	//	*Item_Article
	//	*Item_Banner
	//	*Item_Live
	//	*Item_Game
	//	*Item_Purchase
	//	*Item_RecommendWord
	//	*Item_Dynamic
	//	*Item_SuggestKeyword
	//	*Item_SpecialGuide
	//	*Item_Comic
	//	*Item_ChannelNew
	//	*Item_OgvCard
	//	*Item_BangumiRelates
	//	*Item_FindMore
	//	*Item_Esport
	//	*Item_AuthorNew
	//	*Item_Tips
	//	*Item_Cm
	//	*Item_PediaCard
	//	*Item_UgcInline
	//	*Item_LiveInline
	//	*Item_TopGame
	//	*Item_Sports
	//	*Item_PediaCardInline
	//	*Item_RecommendTips
	//	*Item_CollectionCard
	//	*Item_OgvChannel
	//	*Item_OgvInline
	//	*Item_Author
	//	*Item_Av
	//	*Item_Bangumi
	//	*Item_EsportsInline
	CardItem isItem_CardItem `protobuf_oneof:"card_item"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{29}
}

func (x *Item) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Item) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *Item) GetGoto() string {
	if x != nil {
		return x.Goto
	}
	return ""
}

func (x *Item) GetLinktype() string {
	if x != nil {
		return x.Linktype
	}
	return ""
}

func (x *Item) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Item) GetTrackid() string {
	if x != nil {
		return x.Trackid
	}
	return ""
}

func (m *Item) GetCardItem() isItem_CardItem {
	if m != nil {
		return m.CardItem
	}
	return nil
}

func (x *Item) GetSpecial() *SearchSpecialCard {
	if x, ok := x.GetCardItem().(*Item_Special); ok {
		return x.Special
	}
	return nil
}

func (x *Item) GetArticle() *SearchArticleCard {
	if x, ok := x.GetCardItem().(*Item_Article); ok {
		return x.Article
	}
	return nil
}

func (x *Item) GetBanner() *SearchBannerCard {
	if x, ok := x.GetCardItem().(*Item_Banner); ok {
		return x.Banner
	}
	return nil
}

func (x *Item) GetLive() *SearchLiveCard {
	if x, ok := x.GetCardItem().(*Item_Live); ok {
		return x.Live
	}
	return nil
}

func (x *Item) GetGame() *SearchGameCard {
	if x, ok := x.GetCardItem().(*Item_Game); ok {
		return x.Game
	}
	return nil
}

func (x *Item) GetPurchase() *SearchPurchaseCard {
	if x, ok := x.GetCardItem().(*Item_Purchase); ok {
		return x.Purchase
	}
	return nil
}

func (x *Item) GetRecommendWord() *SearchRecommendWordCard {
	if x, ok := x.GetCardItem().(*Item_RecommendWord); ok {
		return x.RecommendWord
	}
	return nil
}

func (x *Item) GetDynamic() *SearchDynamicCard {
	if x, ok := x.GetCardItem().(*Item_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

func (x *Item) GetSuggestKeyword() *SearchNoResultSuggestWordCard {
	if x, ok := x.GetCardItem().(*Item_SuggestKeyword); ok {
		return x.SuggestKeyword
	}
	return nil
}

func (x *Item) GetSpecialGuide() *SearchSpecialGuideCard {
	if x, ok := x.GetCardItem().(*Item_SpecialGuide); ok {
		return x.SpecialGuide
	}
	return nil
}

func (x *Item) GetComic() *SearchComicCard {
	if x, ok := x.GetCardItem().(*Item_Comic); ok {
		return x.Comic
	}
	return nil
}

func (x *Item) GetChannelNew() *SearchNewChannelCard {
	if x, ok := x.GetCardItem().(*Item_ChannelNew); ok {
		return x.ChannelNew
	}
	return nil
}

func (x *Item) GetOgvCard() *SearchOgvCard {
	if x, ok := x.GetCardItem().(*Item_OgvCard); ok {
		return x.OgvCard
	}
	return nil
}

func (x *Item) GetBangumiRelates() *SearchOgvRelationCard {
	if x, ok := x.GetCardItem().(*Item_BangumiRelates); ok {
		return x.BangumiRelates
	}
	return nil
}

func (x *Item) GetFindMore() *SearchOgvRecommendCard {
	if x, ok := x.GetCardItem().(*Item_FindMore); ok {
		return x.FindMore
	}
	return nil
}

func (x *Item) GetEsport() *SearchSportCard {
	if x, ok := x.GetCardItem().(*Item_Esport); ok {
		return x.Esport
	}
	return nil
}

func (x *Item) GetAuthorNew() *SearchAuthorNewCard {
	if x, ok := x.GetCardItem().(*Item_AuthorNew); ok {
		return x.AuthorNew
	}
	return nil
}

func (x *Item) GetTips() *SearchTipsCard {
	if x, ok := x.GetCardItem().(*Item_Tips); ok {
		return x.Tips
	}
	return nil
}

func (x *Item) GetCm() *SearchAdCard {
	if x, ok := x.GetCardItem().(*Item_Cm); ok {
		return x.Cm
	}
	return nil
}

func (x *Item) GetPediaCard() *SearchPediaCard {
	if x, ok := x.GetCardItem().(*Item_PediaCard); ok {
		return x.PediaCard
	}
	return nil
}

func (x *Item) GetUgcInline() *SearchUgcInlineCard {
	if x, ok := x.GetCardItem().(*Item_UgcInline); ok {
		return x.UgcInline
	}
	return nil
}

func (x *Item) GetLiveInline() *SearchLiveInlineCard {
	if x, ok := x.GetCardItem().(*Item_LiveInline); ok {
		return x.LiveInline
	}
	return nil
}

func (x *Item) GetTopGame() *SearchTopGameCard {
	if x, ok := x.GetCardItem().(*Item_TopGame); ok {
		return x.TopGame
	}
	return nil
}

func (x *Item) GetSports() *SearchOlympicGameCard {
	if x, ok := x.GetCardItem().(*Item_Sports); ok {
		return x.Sports
	}
	return nil
}

func (x *Item) GetPediaCardInline() *SearchOlympicWikiCard {
	if x, ok := x.GetCardItem().(*Item_PediaCardInline); ok {
		return x.PediaCardInline
	}
	return nil
}

func (x *Item) GetRecommendTips() *SearchRecommendTipCard {
	if x, ok := x.GetCardItem().(*Item_RecommendTips); ok {
		return x.RecommendTips
	}
	return nil
}

func (x *Item) GetCollectionCard() *SearchCollectionCard {
	if x, ok := x.GetCardItem().(*Item_CollectionCard); ok {
		return x.CollectionCard
	}
	return nil
}

func (x *Item) GetOgvChannel() *SearchOgvChannelCard {
	if x, ok := x.GetCardItem().(*Item_OgvChannel); ok {
		return x.OgvChannel
	}
	return nil
}

func (x *Item) GetOgvInline() *SearchOgvInlineCard {
	if x, ok := x.GetCardItem().(*Item_OgvInline); ok {
		return x.OgvInline
	}
	return nil
}

func (x *Item) GetAuthor() *SearchUpperCard {
	if x, ok := x.GetCardItem().(*Item_Author); ok {
		return x.Author
	}
	return nil
}

func (x *Item) GetAv() *SearchVideoCard {
	if x, ok := x.GetCardItem().(*Item_Av); ok {
		return x.Av
	}
	return nil
}

func (x *Item) GetBangumi() *SearchBangumiCard {
	if x, ok := x.GetCardItem().(*Item_Bangumi); ok {
		return x.Bangumi
	}
	return nil
}

func (x *Item) GetEsportsInline() *SearchSportInlineCard {
	if x, ok := x.GetCardItem().(*Item_EsportsInline); ok {
		return x.EsportsInline
	}
	return nil
}

type isItem_CardItem interface {
	isItem_CardItem()
}

type Item_Special struct {
	Special *SearchSpecialCard `protobuf:"bytes,7,opt,name=special,proto3,oneof"`
}

type Item_Article struct {
	Article *SearchArticleCard `protobuf:"bytes,8,opt,name=article,proto3,oneof"`
}

type Item_Banner struct {
	Banner *SearchBannerCard `protobuf:"bytes,9,opt,name=banner,proto3,oneof"`
}

type Item_Live struct {
	Live *SearchLiveCard `protobuf:"bytes,10,opt,name=live,proto3,oneof"`
}

type Item_Game struct {
	Game *SearchGameCard `protobuf:"bytes,11,opt,name=game,proto3,oneof"`
}

type Item_Purchase struct {
	Purchase *SearchPurchaseCard `protobuf:"bytes,12,opt,name=purchase,proto3,oneof"`
}

type Item_RecommendWord struct {
	RecommendWord *SearchRecommendWordCard `protobuf:"bytes,13,opt,name=recommend_word,json=recommendWord,proto3,oneof"`
}

type Item_Dynamic struct {
	Dynamic *SearchDynamicCard `protobuf:"bytes,14,opt,name=dynamic,proto3,oneof"`
}

type Item_SuggestKeyword struct {
	SuggestKeyword *SearchNoResultSuggestWordCard `protobuf:"bytes,15,opt,name=suggest_keyword,json=suggestKeyword,proto3,oneof"`
}

type Item_SpecialGuide struct {
	SpecialGuide *SearchSpecialGuideCard `protobuf:"bytes,16,opt,name=special_guide,json=specialGuide,proto3,oneof"`
}

type Item_Comic struct {
	Comic *SearchComicCard `protobuf:"bytes,17,opt,name=comic,proto3,oneof"`
}

type Item_ChannelNew struct {
	ChannelNew *SearchNewChannelCard `protobuf:"bytes,18,opt,name=channel_new,json=channelNew,proto3,oneof"`
}

type Item_OgvCard struct {
	OgvCard *SearchOgvCard `protobuf:"bytes,19,opt,name=ogv_card,json=ogvCard,proto3,oneof"`
}

type Item_BangumiRelates struct {
	BangumiRelates *SearchOgvRelationCard `protobuf:"bytes,20,opt,name=bangumi_relates,json=bangumiRelates,proto3,oneof"`
}

type Item_FindMore struct {
	FindMore *SearchOgvRecommendCard `protobuf:"bytes,21,opt,name=find_more,json=findMore,proto3,oneof"`
}

type Item_Esport struct {
	Esport *SearchSportCard `protobuf:"bytes,22,opt,name=esport,proto3,oneof"`
}

type Item_AuthorNew struct {
	AuthorNew *SearchAuthorNewCard `protobuf:"bytes,23,opt,name=author_new,json=authorNew,proto3,oneof"`
}

type Item_Tips struct {
	Tips *SearchTipsCard `protobuf:"bytes,24,opt,name=tips,proto3,oneof"`
}

type Item_Cm struct {
	Cm *SearchAdCard `protobuf:"bytes,25,opt,name=cm,proto3,oneof"`
}

type Item_PediaCard struct {
	PediaCard *SearchPediaCard `protobuf:"bytes,26,opt,name=pedia_card,json=pediaCard,proto3,oneof"`
}

type Item_UgcInline struct {
	UgcInline *SearchUgcInlineCard `protobuf:"bytes,27,opt,name=ugc_inline,json=ugcInline,proto3,oneof"`
}

type Item_LiveInline struct {
	LiveInline *SearchLiveInlineCard `protobuf:"bytes,28,opt,name=live_inline,json=liveInline,proto3,oneof"`
}

type Item_TopGame struct {
	TopGame *SearchTopGameCard `protobuf:"bytes,29,opt,name=top_game,json=topGame,proto3,oneof"`
}

type Item_Sports struct {
	Sports *SearchOlympicGameCard `protobuf:"bytes,30,opt,name=sports,proto3,oneof"`
}

type Item_PediaCardInline struct {
	PediaCardInline *SearchOlympicWikiCard `protobuf:"bytes,31,opt,name=pedia_card_inline,json=pediaCardInline,proto3,oneof"`
}

type Item_RecommendTips struct {
	RecommendTips *SearchRecommendTipCard `protobuf:"bytes,32,opt,name=recommend_tips,json=recommendTips,proto3,oneof"`
}

type Item_CollectionCard struct {
	CollectionCard *SearchCollectionCard `protobuf:"bytes,33,opt,name=collection_card,json=collectionCard,proto3,oneof"`
}

type Item_OgvChannel struct {
	OgvChannel *SearchOgvChannelCard `protobuf:"bytes,34,opt,name=ogv_channel,json=ogvChannel,proto3,oneof"`
}

type Item_OgvInline struct {
	OgvInline *SearchOgvInlineCard `protobuf:"bytes,35,opt,name=ogv_inline,json=ogvInline,proto3,oneof"`
}

type Item_Author struct {
	Author *SearchUpperCard `protobuf:"bytes,36,opt,name=author,proto3,oneof"`
}

type Item_Av struct {
	Av *SearchVideoCard `protobuf:"bytes,37,opt,name=av,proto3,oneof"`
}

type Item_Bangumi struct {
	Bangumi *SearchBangumiCard `protobuf:"bytes,38,opt,name=bangumi,proto3,oneof"`
}

type Item_EsportsInline struct {
	EsportsInline *SearchSportInlineCard `protobuf:"bytes,39,opt,name=esports_inline,json=esportsInline,proto3,oneof"`
}

func (*Item_Special) isItem_CardItem() {}

func (*Item_Article) isItem_CardItem() {}

func (*Item_Banner) isItem_CardItem() {}

func (*Item_Live) isItem_CardItem() {}

func (*Item_Game) isItem_CardItem() {}

func (*Item_Purchase) isItem_CardItem() {}

func (*Item_RecommendWord) isItem_CardItem() {}

func (*Item_Dynamic) isItem_CardItem() {}

func (*Item_SuggestKeyword) isItem_CardItem() {}

func (*Item_SpecialGuide) isItem_CardItem() {}

func (*Item_Comic) isItem_CardItem() {}

func (*Item_ChannelNew) isItem_CardItem() {}

func (*Item_OgvCard) isItem_CardItem() {}

func (*Item_BangumiRelates) isItem_CardItem() {}

func (*Item_FindMore) isItem_CardItem() {}

func (*Item_Esport) isItem_CardItem() {}

func (*Item_AuthorNew) isItem_CardItem() {}

func (*Item_Tips) isItem_CardItem() {}

func (*Item_Cm) isItem_CardItem() {}

func (*Item_PediaCard) isItem_CardItem() {}

func (*Item_UgcInline) isItem_CardItem() {}

func (*Item_LiveInline) isItem_CardItem() {}

func (*Item_TopGame) isItem_CardItem() {}

func (*Item_Sports) isItem_CardItem() {}

func (*Item_PediaCardInline) isItem_CardItem() {}

func (*Item_RecommendTips) isItem_CardItem() {}

func (*Item_CollectionCard) isItem_CardItem() {}

func (*Item_OgvChannel) isItem_CardItem() {}

func (*Item_OgvInline) isItem_CardItem() {}

func (*Item_Author) isItem_CardItem() {}

func (*Item_Av) isItem_CardItem() {}

func (*Item_Bangumi) isItem_CardItem() {}

func (*Item_EsportsInline) isItem_CardItem() {}

type LikeResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ContentHash string `protobuf:"bytes,2,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
}

func (x *LikeResource) Reset() {
	*x = LikeResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeResource) ProtoMessage() {}

func (x *LikeResource) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeResource.ProtoReflect.Descriptor instead.
func (*LikeResource) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{30}
}

func (x *LikeResource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LikeResource) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

type LiveBadgeResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	AnimationUrl string `protobuf:"bytes,2,opt,name=animation_url,json=animationUrl,proto3" json:"animation_url,omitempty"`
	AnimationUrlHash string `protobuf:"bytes,3,opt,name=animation_url_hash,json=animationUrlHash,proto3" json:"animation_url_hash,omitempty"`
	BackgroundColorLight string `protobuf:"bytes,4,opt,name=background_color_light,json=backgroundColorLight,proto3" json:"background_color_light,omitempty"`
	BackgroundColorNight string `protobuf:"bytes,5,opt,name=background_color_night,json=backgroundColorNight,proto3" json:"background_color_night,omitempty"`
	AlphaLight int64 `protobuf:"varint,6,opt,name=alpha_light,json=alphaLight,proto3" json:"alpha_light,omitempty"`
	AlphaNight int64 `protobuf:"varint,7,opt,name=alpha_night,json=alphaNight,proto3" json:"alpha_night,omitempty"`
	FontColor string `protobuf:"bytes,8,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
}

func (x *LiveBadgeResource) Reset() {
	*x = LiveBadgeResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveBadgeResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveBadgeResource) ProtoMessage() {}

func (x *LiveBadgeResource) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveBadgeResource.ProtoReflect.Descriptor instead.
func (*LiveBadgeResource) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{31}
}

func (x *LiveBadgeResource) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *LiveBadgeResource) GetAnimationUrl() string {
	if x != nil {
		return x.AnimationUrl
	}
	return ""
}

func (x *LiveBadgeResource) GetAnimationUrlHash() string {
	if x != nil {
		return x.AnimationUrlHash
	}
	return ""
}

func (x *LiveBadgeResource) GetBackgroundColorLight() string {
	if x != nil {
		return x.BackgroundColorLight
	}
	return ""
}

func (x *LiveBadgeResource) GetBackgroundColorNight() string {
	if x != nil {
		return x.BackgroundColorNight
	}
	return ""
}

func (x *LiveBadgeResource) GetAlphaLight() int64 {
	if x != nil {
		return x.AlphaLight
	}
	return 0
}

func (x *LiveBadgeResource) GetAlphaNight() int64 {
	if x != nil {
		return x.AlphaNight
	}
	return 0
}

func (x *LiveBadgeResource) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

type Mask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar *Avatar `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Button *Button `protobuf:"bytes,2,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *Mask) Reset() {
	*x = Mask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mask) ProtoMessage() {}

func (x *Mask) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mask.ProtoReflect.Descriptor instead.
func (*Mask) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{32}
}

func (x *Mask) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *Mask) GetButton() *Button {
	if x != nil {
		return x.Button
	}
	return nil
}

type MatchInfoObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	MatchStage string `protobuf:"bytes,3,opt,name=match_stage,json=matchStage,proto3" json:"match_stage,omitempty"`
	Team1 *MatchTeam `protobuf:"bytes,4,opt,name=team1,proto3" json:"team1,omitempty"`
	Team2 *MatchTeam `protobuf:"bytes,5,opt,name=team2,proto3" json:"team2,omitempty"`
	MatchLabel *MatchItem `protobuf:"bytes,6,opt,name=match_label,json=matchLabel,proto3" json:"match_label,omitempty"`
	MatchTime *MatchItem `protobuf:"bytes,7,opt,name=match_time,json=matchTime,proto3" json:"match_time,omitempty"`
	MatchButton *MatchItem `protobuf:"bytes,8,opt,name=match_button,json=matchButton,proto3" json:"match_button,omitempty"`
}

func (x *MatchInfoObj) Reset() {
	*x = MatchInfoObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfoObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfoObj) ProtoMessage() {}

func (x *MatchInfoObj) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfoObj.ProtoReflect.Descriptor instead.
func (*MatchInfoObj) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{33}
}

func (x *MatchInfoObj) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchInfoObj) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MatchInfoObj) GetMatchStage() string {
	if x != nil {
		return x.MatchStage
	}
	return ""
}

func (x *MatchInfoObj) GetTeam1() *MatchTeam {
	if x != nil {
		return x.Team1
	}
	return nil
}

func (x *MatchInfoObj) GetTeam2() *MatchTeam {
	if x != nil {
		return x.Team2
	}
	return nil
}

func (x *MatchInfoObj) GetMatchLabel() *MatchItem {
	if x != nil {
		return x.MatchLabel
	}
	return nil
}

func (x *MatchInfoObj) GetMatchTime() *MatchItem {
	if x != nil {
		return x.MatchTime
	}
	return nil
}

func (x *MatchInfoObj) GetMatchButton() *MatchItem {
	if x != nil {
		return x.MatchButton
	}
	return nil
}

type MatchItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	TextColor string `protobuf:"bytes,3,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	TextColorNight string `protobuf:"bytes,4,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	Uri string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	LiveLink string `protobuf:"bytes,6,opt,name=live_link,json=liveLink,proto3" json:"live_link,omitempty"`
	Texts *Texts `protobuf:"bytes,7,opt,name=texts,proto3" json:"texts,omitempty"`
}

func (x *MatchItem) Reset() {
	*x = MatchItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchItem) ProtoMessage() {}

func (x *MatchItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchItem.ProtoReflect.Descriptor instead.
func (*MatchItem) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{34}
}

func (x *MatchItem) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *MatchItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MatchItem) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *MatchItem) GetTextColorNight() string {
	if x != nil {
		return x.TextColorNight
	}
	return ""
}

func (x *MatchItem) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MatchItem) GetLiveLink() string {
	if x != nil {
		return x.LiveLink
	}
	return ""
}

func (x *MatchItem) GetTexts() *Texts {
	if x != nil {
		return x.Texts
	}
	return nil
}

type MatchTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	Score int32 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *MatchTeam) Reset() {
	*x = MatchTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTeam) ProtoMessage() {}

func (x *MatchTeam) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTeam.ProtoReflect.Descriptor instead.
func (*MatchTeam) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{35}
}

func (x *MatchTeam) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchTeam) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MatchTeam) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *MatchTeam) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type Nav struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Pages int32 `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Type int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Nav) Reset() {
	*x = Nav{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nav) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nav) ProtoMessage() {}

func (x *Nav) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nav.ProtoReflect.Descriptor instead.
func (*Nav) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{36}
}

func (x *Nav) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Nav) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Nav) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *Nav) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type Navigation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Children []*Navigation `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	InlineChildren []*Navigation `protobuf:"bytes,3,rep,name=inline_children,json=inlineChildren,proto3" json:"inline_children,omitempty"`
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Uri string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	Button *NavigationButton `protobuf:"bytes,6,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *Navigation) Reset() {
	*x = Navigation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Navigation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Navigation) ProtoMessage() {}

func (x *Navigation) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Navigation.ProtoReflect.Descriptor instead.
func (*Navigation) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{37}
}

func (x *Navigation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Navigation) GetChildren() []*Navigation {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Navigation) GetInlineChildren() []*Navigation {
	if x != nil {
		return x.InlineChildren
	}
	return nil
}

func (x *Navigation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Navigation) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Navigation) GetButton() *NavigationButton {
	if x != nil {
		return x.Button
	}
	return nil
}

type NavigationButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int64 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *NavigationButton) Reset() {
	*x = NavigationButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationButton) ProtoMessage() {}

func (x *NavigationButton) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationButton.ProtoReflect.Descriptor instead.
func (*NavigationButton) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{38}
}

func (x *NavigationButton) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NavigationButton) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *NavigationButton) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type NftFaceIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionType int32 `protobuf:"varint,1,opt,name=region_type,json=regionType,proto3" json:"region_type,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	ShowStatus int32 `protobuf:"varint,3,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`
}

func (x *NftFaceIcon) Reset() {
	*x = NftFaceIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftFaceIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftFaceIcon) ProtoMessage() {}

func (x *NftFaceIcon) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftFaceIcon.ProtoReflect.Descriptor instead.
func (*NftFaceIcon) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{39}
}

func (x *NftFaceIcon) GetRegionType() int32 {
	if x != nil {
		return x.RegionType
	}
	return 0
}

func (x *NftFaceIcon) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *NftFaceIcon) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type Notice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	NoticeId int64 `protobuf:"varint,2,opt,name=notice_id,json=noticeId,proto3" json:"notice_id,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	NoticeType int64 `protobuf:"varint,5,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	Icon string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	IconNight string `protobuf:"bytes,7,opt,name=icon_night,json=iconNight,proto3" json:"icon_night,omitempty"`
	TextColor string `protobuf:"bytes,8,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	TextColorNight string `protobuf:"bytes,9,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	BgColor string `protobuf:"bytes,10,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	BgColorNight string `protobuf:"bytes,11,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
}

func (x *Notice) Reset() {
	*x = Notice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notice) ProtoMessage() {}

func (x *Notice) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notice.ProtoReflect.Descriptor instead.
func (*Notice) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{40}
}

func (x *Notice) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *Notice) GetNoticeId() int64 {
	if x != nil {
		return x.NoticeId
	}
	return 0
}

func (x *Notice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Notice) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Notice) GetNoticeType() int64 {
	if x != nil {
		return x.NoticeType
	}
	return 0
}

func (x *Notice) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Notice) GetIconNight() string {
	if x != nil {
		return x.IconNight
	}
	return ""
}

func (x *Notice) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *Notice) GetTextColorNight() string {
	if x != nil {
		return x.TextColorNight
	}
	return ""
}

func (x *Notice) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *Notice) GetBgColorNight() string {
	if x != nil {
		return x.BgColorNight
	}
	return ""
}

type OfficialVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *OfficialVerify) Reset() {
	*x = OfficialVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialVerify) ProtoMessage() {}

func (x *OfficialVerify) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialVerify.ProtoReflect.Descriptor instead.
func (*OfficialVerify) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{41}
}

func (x *OfficialVerify) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OfficialVerify) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type OgvCardUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundImage string `protobuf:"bytes,1,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	GaussianBlurValue string `protobuf:"bytes,2,opt,name=gaussian_blur_value,json=gaussianBlurValue,proto3" json:"gaussian_blur_value,omitempty"`
	ModuleColor string `protobuf:"bytes,3,opt,name=module_color,json=moduleColor,proto3" json:"module_color,omitempty"`
}

func (x *OgvCardUI) Reset() {
	*x = OgvCardUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OgvCardUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OgvCardUI) ProtoMessage() {}

func (x *OgvCardUI) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OgvCardUI.ProtoReflect.Descriptor instead.
func (*OgvCardUI) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{42}
}

func (x *OgvCardUI) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

func (x *OgvCardUI) GetGaussianBlurValue() string {
	if x != nil {
		return x.GaussianBlurValue
	}
	return ""
}

func (x *OgvCardUI) GetModuleColor() string {
	if x != nil {
		return x.ModuleColor
	}
	return ""
}

type OgvClipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayStartTime int64 `protobuf:"varint,1,opt,name=play_start_time,json=playStartTime,proto3" json:"play_start_time,omitempty"`
	PlayEndTime int64 `protobuf:"varint,2,opt,name=play_end_time,json=playEndTime,proto3" json:"play_end_time,omitempty"`
}

func (x *OgvClipInfo) Reset() {
	*x = OgvClipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OgvClipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OgvClipInfo) ProtoMessage() {}

func (x *OgvClipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OgvClipInfo.ProtoReflect.Descriptor instead.
func (*OgvClipInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{43}
}

func (x *OgvClipInfo) GetPlayStartTime() int64 {
	if x != nil {
		return x.PlayStartTime
	}
	return 0
}

func (x *OgvClipInfo) GetPlayEndTime() int64 {
	if x != nil {
		return x.PlayEndTime
	}
	return 0
}

type OgvRecommendWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Goto string `protobuf:"bytes,2,opt,name=goto,proto3" json:"goto,omitempty"`
	Param string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	Uri string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *OgvRecommendWord) Reset() {
	*x = OgvRecommendWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OgvRecommendWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OgvRecommendWord) ProtoMessage() {}

func (x *OgvRecommendWord) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OgvRecommendWord.ProtoReflect.Descriptor instead.
func (*OgvRecommendWord) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{44}
}

func (x *OgvRecommendWord) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OgvRecommendWord) GetGoto() string {
	if x != nil {
		return x.Goto
	}
	return ""
}

func (x *OgvRecommendWord) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *OgvRecommendWord) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type PediaCover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverType int64 `protobuf:"varint,1,opt,name=cover_type,json=coverType,proto3" json:"cover_type,omitempty"`
	CoverSunUrl string `protobuf:"bytes,2,opt,name=cover_sun_url,json=coverSunUrl,proto3" json:"cover_sun_url,omitempty"`
	CoverNightUrl string `protobuf:"bytes,3,opt,name=cover_night_url,json=coverNightUrl,proto3" json:"cover_night_url,omitempty"`
	CoverWidth int32 `protobuf:"varint,4,opt,name=cover_width,json=coverWidth,proto3" json:"cover_width,omitempty"`
	CoverHeight int32 `protobuf:"varint,5,opt,name=cover_height,json=coverHeight,proto3" json:"cover_height,omitempty"`
}

func (x *PediaCover) Reset() {
	*x = PediaCover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PediaCover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PediaCover) ProtoMessage() {}

func (x *PediaCover) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PediaCover.ProtoReflect.Descriptor instead.
func (*PediaCover) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{45}
}

func (x *PediaCover) GetCoverType() int64 {
	if x != nil {
		return x.CoverType
	}
	return 0
}

func (x *PediaCover) GetCoverSunUrl() string {
	if x != nil {
		return x.CoverSunUrl
	}
	return ""
}

func (x *PediaCover) GetCoverNightUrl() string {
	if x != nil {
		return x.CoverNightUrl
	}
	return ""
}

func (x *PediaCover) GetCoverWidth() int32 {
	if x != nil {
		return x.CoverWidth
	}
	return 0
}

func (x *PediaCover) GetCoverHeight() int32 {
	if x != nil {
		return x.CoverHeight
	}
	return 0
}

type PlayerArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLive int32 `protobuf:"varint,1,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	Aid int64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	Cid int64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	SubType int32 `protobuf:"varint,4,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	RoomId int64 `protobuf:"varint,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	EpId int64 `protobuf:"varint,7,opt,name=ep_id,json=epId,proto3" json:"ep_id,omitempty"`
	IsPreview int32 `protobuf:"varint,8,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Duration int32 `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	SeasonId int64 `protobuf:"varint,11,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	ReportRequiredPlayDuration int32 `protobuf:"varint,12,opt,name=report_required_play_duration,json=reportRequiredPlayDuration,proto3" json:"report_required_play_duration,omitempty"`
	ReportRequiredTime int32 `protobuf:"varint,13,opt,name=report_required_time,json=reportRequiredTime,proto3" json:"report_required_time,omitempty"`
	ManualPlay int32 `protobuf:"varint,14,opt,name=manual_play,json=manualPlay,proto3" json:"manual_play,omitempty"`
	HidePlayButton bool `protobuf:"varint,15,opt,name=hide_play_button,json=hidePlayButton,proto3" json:"hide_play_button,omitempty"`
	ContentMode int32 `protobuf:"varint,16,opt,name=content_mode,json=contentMode,proto3" json:"content_mode,omitempty"`
	ReportHistory int32 `protobuf:"varint,17,opt,name=report_history,json=reportHistory,proto3" json:"report_history,omitempty"`
}

func (x *PlayerArgs) Reset() {
	*x = PlayerArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerArgs) ProtoMessage() {}

func (x *PlayerArgs) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerArgs.ProtoReflect.Descriptor instead.
func (*PlayerArgs) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{46}
}

func (x *PlayerArgs) GetIsLive() int32 {
	if x != nil {
		return x.IsLive
	}
	return 0
}

func (x *PlayerArgs) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *PlayerArgs) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *PlayerArgs) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *PlayerArgs) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *PlayerArgs) GetEpId() int64 {
	if x != nil {
		return x.EpId
	}
	return 0
}

func (x *PlayerArgs) GetIsPreview() int32 {
	if x != nil {
		return x.IsPreview
	}
	return 0
}

func (x *PlayerArgs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlayerArgs) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PlayerArgs) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *PlayerArgs) GetReportRequiredPlayDuration() int32 {
	if x != nil {
		return x.ReportRequiredPlayDuration
	}
	return 0
}

func (x *PlayerArgs) GetReportRequiredTime() int32 {
	if x != nil {
		return x.ReportRequiredTime
	}
	return 0
}

func (x *PlayerArgs) GetManualPlay() int32 {
	if x != nil {
		return x.ManualPlay
	}
	return 0
}

func (x *PlayerArgs) GetHidePlayButton() bool {
	if x != nil {
		return x.HidePlayButton
	}
	return false
}

func (x *PlayerArgs) GetContentMode() int32 {
	if x != nil {
		return x.ContentMode
	}
	return 0
}

func (x *PlayerArgs) GetReportHistory() int32 {
	if x != nil {
		return x.ReportHistory
	}
	return 0
}

type PlayerWidget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PlayerWidget) Reset() {
	*x = PlayerWidget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerWidget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerWidget) ProtoMessage() {}

func (x *PlayerWidget) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerWidget.ProtoReflect.Descriptor instead.
func (*PlayerWidget) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{47}
}

func (x *PlayerWidget) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlayerWidget) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type RankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchNightIconUrl string `protobuf:"bytes,1,opt,name=search_night_icon_url,json=searchNightIconUrl,proto3" json:"search_night_icon_url,omitempty"`
	SearchDayIconUrl string `protobuf:"bytes,2,opt,name=search_day_icon_url,json=searchDayIconUrl,proto3" json:"search_day_icon_url,omitempty"`
	SearchBkgNightColor string `protobuf:"bytes,3,opt,name=search_bkg_night_color,json=searchBkgNightColor,proto3" json:"search_bkg_night_color,omitempty"`
	SearchBkgDayColor string `protobuf:"bytes,4,opt,name=search_bkg_day_color,json=searchBkgDayColor,proto3" json:"search_bkg_day_color,omitempty"`
	SearchFontNightColor string `protobuf:"bytes,5,opt,name=search_font_night_color,json=searchFontNightColor,proto3" json:"search_font_night_color,omitempty"`
	SearchFontDayColor string `protobuf:"bytes,6,opt,name=search_font_day_color,json=searchFontDayColor,proto3" json:"search_font_day_color,omitempty"`
	RankContent string `protobuf:"bytes,7,opt,name=rank_content,json=rankContent,proto3" json:"rank_content,omitempty"`
	RankLink string `protobuf:"bytes,8,opt,name=rank_link,json=rankLink,proto3" json:"rank_link,omitempty"`
}

func (x *RankInfo) Reset() {
	*x = RankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInfo) ProtoMessage() {}

func (x *RankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInfo.ProtoReflect.Descriptor instead.
func (*RankInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{48}
}

func (x *RankInfo) GetSearchNightIconUrl() string {
	if x != nil {
		return x.SearchNightIconUrl
	}
	return ""
}

func (x *RankInfo) GetSearchDayIconUrl() string {
	if x != nil {
		return x.SearchDayIconUrl
	}
	return ""
}

func (x *RankInfo) GetSearchBkgNightColor() string {
	if x != nil {
		return x.SearchBkgNightColor
	}
	return ""
}

func (x *RankInfo) GetSearchBkgDayColor() string {
	if x != nil {
		return x.SearchBkgDayColor
	}
	return ""
}

func (x *RankInfo) GetSearchFontNightColor() string {
	if x != nil {
		return x.SearchFontNightColor
	}
	return ""
}

func (x *RankInfo) GetSearchFontDayColor() string {
	if x != nil {
		return x.SearchFontDayColor
	}
	return ""
}

func (x *RankInfo) GetRankContent() string {
	if x != nil {
		return x.RankContent
	}
	return ""
}

func (x *RankInfo) GetRankLink() string {
	if x != nil {
		return x.RankLink
	}
	return ""
}

type RcmdReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *RcmdReason) Reset() {
	*x = RcmdReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RcmdReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcmdReason) ProtoMessage() {}

func (x *RcmdReason) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcmdReason.ProtoReflect.Descriptor instead.
func (*RcmdReason) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{49}
}

func (x *RcmdReason) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ReasonStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	TextColorNight string `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	BgColor string `protobuf:"bytes,4,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	BgColorNight string `protobuf:"bytes,5,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	BorderColor string `protobuf:"bytes,6,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`
	BorderColorNight string `protobuf:"bytes,7,opt,name=border_color_night,json=borderColorNight,proto3" json:"border_color_night,omitempty"`
	BgStyle int32 `protobuf:"varint,8,opt,name=bg_style,json=bgStyle,proto3" json:"bg_style,omitempty"`
}

func (x *ReasonStyle) Reset() {
	*x = ReasonStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasonStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasonStyle) ProtoMessage() {}

func (x *ReasonStyle) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasonStyle.ProtoReflect.Descriptor instead.
func (*ReasonStyle) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{50}
}

func (x *ReasonStyle) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ReasonStyle) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *ReasonStyle) GetTextColorNight() string {
	if x != nil {
		return x.TextColorNight
	}
	return ""
}

func (x *ReasonStyle) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *ReasonStyle) GetBgColorNight() string {
	if x != nil {
		return x.BgColorNight
	}
	return ""
}

func (x *ReasonStyle) GetBorderColor() string {
	if x != nil {
		return x.BorderColor
	}
	return ""
}

func (x *ReasonStyle) GetBorderColorNight() string {
	if x != nil {
		return x.BorderColorNight
	}
	return ""
}

func (x *ReasonStyle) GetBgStyle() int32 {
	if x != nil {
		return x.BgStyle
	}
	return 0
}

type RecommendWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FromSource string `protobuf:"bytes,4,opt,name=from_source,json=fromSource,proto3" json:"from_source,omitempty"`
}

func (x *RecommendWord) Reset() {
	*x = RecommendWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendWord) ProtoMessage() {}

func (x *RecommendWord) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendWord.ProtoReflect.Descriptor instead.
func (*RecommendWord) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{51}
}

func (x *RecommendWord) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RecommendWord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecommendWord) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RecommendWord) GetFromSource() string {
	if x != nil {
		return x.FromSource
	}
	return ""
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{52}
}

func (x *Relation) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type RightTopLiveBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveStatus int32 `protobuf:"varint,1,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	InLive *LiveBadgeResource `protobuf:"bytes,2,opt,name=in_live,json=inLive,proto3" json:"in_live,omitempty"`
	LiveStatsDesc string `protobuf:"bytes,3,opt,name=live_stats_desc,json=liveStatsDesc,proto3" json:"live_stats_desc,omitempty"`
}

func (x *RightTopLiveBadge) Reset() {
	*x = RightTopLiveBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightTopLiveBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightTopLiveBadge) ProtoMessage() {}

func (x *RightTopLiveBadge) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightTopLiveBadge.ProtoReflect.Descriptor instead.
func (*RightTopLiveBadge) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{53}
}

func (x *RightTopLiveBadge) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *RightTopLiveBadge) GetInLive() *LiveBadgeResource {
	if x != nil {
		return x.InLive
	}
	return nil
}

func (x *RightTopLiveBadge) GetLiveStatsDesc() string {
	if x != nil {
		return x.LiveStatsDesc
	}
	return ""
}

type SearchAdCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonStr string `protobuf:"bytes,1,opt,name=json_str,json=jsonStr,proto3" json:"json_str,omitempty"`
}

func (x *SearchAdCard) Reset() {
	*x = SearchAdCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAdCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdCard) ProtoMessage() {}

func (x *SearchAdCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdCard.ProtoReflect.Descriptor instead.
func (*SearchAdCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{54}
}

func (x *SearchAdCard) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

type SearchAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Order int32 `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	TidList string `protobuf:"bytes,3,opt,name=tid_list,json=tidList,proto3" json:"tid_list,omitempty"`
	DurationList string `protobuf:"bytes,4,opt,name=duration_list,json=durationList,proto3" json:"duration_list,omitempty"`
	ExtraWord string `protobuf:"bytes,5,opt,name=extra_word,json=extraWord,proto3" json:"extra_word,omitempty"`
	FromSource string `protobuf:"bytes,6,opt,name=from_source,json=fromSource,proto3" json:"from_source,omitempty"`
	IsOrgQuery int32 `protobuf:"varint,7,opt,name=is_org_query,json=isOrgQuery,proto3" json:"is_org_query,omitempty"`
	LocalTime int32 `protobuf:"varint,8,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	AdExtra string `protobuf:"bytes,9,opt,name=ad_extra,json=adExtra,proto3" json:"ad_extra,omitempty"`
	Pagination *pagination.Pagination `protobuf:"bytes,10,opt,name=pagination,proto3" json:"pagination,omitempty"`
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,11,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
}

func (x *SearchAllRequest) Reset() {
	*x = SearchAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAllRequest) ProtoMessage() {}

func (x *SearchAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAllRequest.ProtoReflect.Descriptor instead.
func (*SearchAllRequest) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{55}
}

func (x *SearchAllRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchAllRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SearchAllRequest) GetTidList() string {
	if x != nil {
		return x.TidList
	}
	return ""
}

func (x *SearchAllRequest) GetDurationList() string {
	if x != nil {
		return x.DurationList
	}
	return ""
}

func (x *SearchAllRequest) GetExtraWord() string {
	if x != nil {
		return x.ExtraWord
	}
	return ""
}

func (x *SearchAllRequest) GetFromSource() string {
	if x != nil {
		return x.FromSource
	}
	return ""
}

func (x *SearchAllRequest) GetIsOrgQuery() int32 {
	if x != nil {
		return x.IsOrgQuery
	}
	return 0
}

func (x *SearchAllRequest) GetLocalTime() int32 {
	if x != nil {
		return x.LocalTime
	}
	return 0
}

func (x *SearchAllRequest) GetAdExtra() string {
	if x != nil {
		return x.AdExtra
	}
	return ""
}

func (x *SearchAllRequest) GetPagination() *pagination.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchAllRequest) GetPlayerArgs() *v1.PlayerArgs {
	if x != nil {
		return x.PlayerArgs
	}
	return nil
}

type SearchAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Trackid string `protobuf:"bytes,2,opt,name=trackid,proto3" json:"trackid,omitempty"`
	Nav []*Nav `protobuf:"bytes,3,rep,name=nav,proto3" json:"nav,omitempty"`
	Item []*Item `protobuf:"bytes,4,rep,name=item,proto3" json:"item,omitempty"`
	EasterEgg *EasterEgg `protobuf:"bytes,5,opt,name=easter_egg,json=easterEgg,proto3" json:"easter_egg,omitempty"`
	ExpStr string `protobuf:"bytes,6,opt,name=exp_str,json=expStr,proto3" json:"exp_str,omitempty"`
	ExtraWordList []string `protobuf:"bytes,7,rep,name=extra_word_list,json=extraWordList,proto3" json:"extra_word_list,omitempty"`
	OrgExtraWord string `protobuf:"bytes,8,opt,name=org_extra_word,json=orgExtraWord,proto3" json:"org_extra_word,omitempty"`
	SelectBarType int64 `protobuf:"varint,9,opt,name=select_bar_type,json=selectBarType,proto3" json:"select_bar_type,omitempty"`
	NewSearchExpNum int64 `protobuf:"varint,10,opt,name=new_search_exp_num,json=newSearchExpNum,proto3" json:"new_search_exp_num,omitempty"`
	Pagination *pagination.PaginationReply `protobuf:"bytes,11,opt,name=pagination,proto3" json:"pagination,omitempty"`
	AppDisplayOption *DisplayOption `protobuf:"bytes,12,opt,name=app_display_option,json=appDisplayOption,proto3" json:"app_display_option,omitempty"`
	Annotation map[string]string `protobuf:"bytes,13,rep,name=annotation,proto3" json:"annotation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchAllResponse) Reset() {
	*x = SearchAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAllResponse) ProtoMessage() {}

func (x *SearchAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAllResponse.ProtoReflect.Descriptor instead.
func (*SearchAllResponse) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{56}
}

func (x *SearchAllResponse) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchAllResponse) GetTrackid() string {
	if x != nil {
		return x.Trackid
	}
	return ""
}

func (x *SearchAllResponse) GetNav() []*Nav {
	if x != nil {
		return x.Nav
	}
	return nil
}

func (x *SearchAllResponse) GetItem() []*Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *SearchAllResponse) GetEasterEgg() *EasterEgg {
	if x != nil {
		return x.EasterEgg
	}
	return nil
}

func (x *SearchAllResponse) GetExpStr() string {
	if x != nil {
		return x.ExpStr
	}
	return ""
}

func (x *SearchAllResponse) GetExtraWordList() []string {
	if x != nil {
		return x.ExtraWordList
	}
	return nil
}

func (x *SearchAllResponse) GetOrgExtraWord() string {
	if x != nil {
		return x.OrgExtraWord
	}
	return ""
}

func (x *SearchAllResponse) GetSelectBarType() int64 {
	if x != nil {
		return x.SelectBarType
	}
	return 0
}

func (x *SearchAllResponse) GetNewSearchExpNum() int64 {
	if x != nil {
		return x.NewSearchExpNum
	}
	return 0
}

func (x *SearchAllResponse) GetPagination() *pagination.PaginationReply {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchAllResponse) GetAppDisplayOption() *DisplayOption {
	if x != nil {
		return x.AppDisplayOption
	}
	return nil
}

func (x *SearchAllResponse) GetAnnotation() map[string]string {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type SearchArticleCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Play int32 `protobuf:"varint,3,opt,name=play,proto3" json:"play,omitempty"`
	Like int32 `protobuf:"varint,4,opt,name=like,proto3" json:"like,omitempty"`
	Reply int32 `protobuf:"varint,5,opt,name=reply,proto3" json:"reply,omitempty"`
	ImageUrls []string `protobuf:"bytes,6,rep,name=image_urls,json=imageUrls,proto3" json:"image_urls,omitempty"`
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	TemplateId int32 `protobuf:"varint,8,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Id int64 `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	Mid int64 `protobuf:"varint,10,opt,name=mid,proto3" json:"mid,omitempty"`
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Desc string `protobuf:"bytes,12,opt,name=desc,proto3" json:"desc,omitempty"`
	View int32 `protobuf:"varint,13,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *SearchArticleCard) Reset() {
	*x = SearchArticleCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArticleCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArticleCard) ProtoMessage() {}

func (x *SearchArticleCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArticleCard.ProtoReflect.Descriptor instead.
func (*SearchArticleCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{57}
}

func (x *SearchArticleCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchArticleCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchArticleCard) GetPlay() int32 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *SearchArticleCard) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *SearchArticleCard) GetReply() int32 {
	if x != nil {
		return x.Reply
	}
	return 0
}

func (x *SearchArticleCard) GetImageUrls() []string {
	if x != nil {
		return x.ImageUrls
	}
	return nil
}

func (x *SearchArticleCard) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SearchArticleCard) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *SearchArticleCard) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchArticleCard) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *SearchArticleCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchArticleCard) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SearchArticleCard) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

type SearchAuthorNewCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	LiveFace int32 `protobuf:"varint,3,opt,name=live_face,json=liveFace,proto3" json:"live_face,omitempty"`
	LiveUri string `protobuf:"bytes,4,opt,name=live_uri,json=liveUri,proto3" json:"live_uri,omitempty"`
	LiveLink string `protobuf:"bytes,5,opt,name=live_link,json=liveLink,proto3" json:"live_link,omitempty"`
	Fans int32 `protobuf:"varint,6,opt,name=fans,proto3" json:"fans,omitempty"`
	Level int32 `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	Sign string `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
	IsUp bool `protobuf:"varint,9,opt,name=is_up,json=isUp,proto3" json:"is_up,omitempty"`
	Archives int32 `protobuf:"varint,10,opt,name=archives,proto3" json:"archives,omitempty"`
	Mid int64 `protobuf:"varint,11,opt,name=mid,proto3" json:"mid,omitempty"`
	Roomid int64 `protobuf:"varint,12,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Relation *Relation `protobuf:"bytes,13,opt,name=relation,proto3" json:"relation,omitempty"`
	OfficialVerify *OfficialVerify `protobuf:"bytes,14,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify,omitempty"`
	FaceNftNew int32 `protobuf:"varint,15,opt,name=face_nft_new,json=faceNftNew,proto3" json:"face_nft_new,omitempty"`
	NftFaceIcon *NftFaceIcon `protobuf:"bytes,16,opt,name=nft_face_icon,json=nftFaceIcon,proto3" json:"nft_face_icon,omitempty"`
	IsSeniorMember int32 `protobuf:"varint,17,opt,name=is_senior_member,json=isSeniorMember,proto3" json:"is_senior_member,omitempty"`
	Background *Background `protobuf:"bytes,18,opt,name=background,proto3" json:"background,omitempty"`
	AvStyle int32 `protobuf:"varint,19,opt,name=av_style,json=avStyle,proto3" json:"av_style,omitempty"`
	Space *Space `protobuf:"bytes,20,opt,name=space,proto3" json:"space,omitempty"`
	AvItems []*AvItem `protobuf:"bytes,21,rep,name=av_items,json=avItems,proto3" json:"av_items,omitempty"`
	Notice *Notice `protobuf:"bytes,22,opt,name=notice,proto3" json:"notice,omitempty"`
	SharePlane *SharePlane `protobuf:"bytes,23,opt,name=share_plane,json=sharePlane,proto3" json:"share_plane,omitempty"`
	InlineType string `protobuf:"bytes,24,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
	InlineLive *SearchInlineData `protobuf:"bytes,25,opt,name=inline_live,json=inlineLive,proto3" json:"inline_live,omitempty"`
	IsInlineLive int32 `protobuf:"varint,26,opt,name=is_inline_live,json=isInlineLive,proto3" json:"is_inline_live,omitempty"`
	ThreePoint []*ThreePoint `protobuf:"bytes,27,rep,name=three_point,json=threePoint,proto3" json:"three_point,omitempty"`
	LiveStatus int32 `protobuf:"varint,28,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	Vip *VipInfo `protobuf:"bytes,29,opt,name=vip,proto3" json:"vip,omitempty"`
}

func (x *SearchAuthorNewCard) Reset() {
	*x = SearchAuthorNewCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAuthorNewCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAuthorNewCard) ProtoMessage() {}

func (x *SearchAuthorNewCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAuthorNewCard.ProtoReflect.Descriptor instead.
func (*SearchAuthorNewCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{58}
}

func (x *SearchAuthorNewCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchAuthorNewCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchAuthorNewCard) GetLiveFace() int32 {
	if x != nil {
		return x.LiveFace
	}
	return 0
}

func (x *SearchAuthorNewCard) GetLiveUri() string {
	if x != nil {
		return x.LiveUri
	}
	return ""
}

func (x *SearchAuthorNewCard) GetLiveLink() string {
	if x != nil {
		return x.LiveLink
	}
	return ""
}

func (x *SearchAuthorNewCard) GetFans() int32 {
	if x != nil {
		return x.Fans
	}
	return 0
}

func (x *SearchAuthorNewCard) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SearchAuthorNewCard) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *SearchAuthorNewCard) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

func (x *SearchAuthorNewCard) GetArchives() int32 {
	if x != nil {
		return x.Archives
	}
	return 0
}

func (x *SearchAuthorNewCard) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *SearchAuthorNewCard) GetRoomid() int64 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *SearchAuthorNewCard) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *SearchAuthorNewCard) GetOfficialVerify() *OfficialVerify {
	if x != nil {
		return x.OfficialVerify
	}
	return nil
}

func (x *SearchAuthorNewCard) GetFaceNftNew() int32 {
	if x != nil {
		return x.FaceNftNew
	}
	return 0
}

func (x *SearchAuthorNewCard) GetNftFaceIcon() *NftFaceIcon {
	if x != nil {
		return x.NftFaceIcon
	}
	return nil
}

func (x *SearchAuthorNewCard) GetIsSeniorMember() int32 {
	if x != nil {
		return x.IsSeniorMember
	}
	return 0
}

func (x *SearchAuthorNewCard) GetBackground() *Background {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *SearchAuthorNewCard) GetAvStyle() int32 {
	if x != nil {
		return x.AvStyle
	}
	return 0
}

func (x *SearchAuthorNewCard) GetSpace() *Space {
	if x != nil {
		return x.Space
	}
	return nil
}

func (x *SearchAuthorNewCard) GetAvItems() []*AvItem {
	if x != nil {
		return x.AvItems
	}
	return nil
}

func (x *SearchAuthorNewCard) GetNotice() *Notice {
	if x != nil {
		return x.Notice
	}
	return nil
}

func (x *SearchAuthorNewCard) GetSharePlane() *SharePlane {
	if x != nil {
		return x.SharePlane
	}
	return nil
}

func (x *SearchAuthorNewCard) GetInlineType() string {
	if x != nil {
		return x.InlineType
	}
	return ""
}

func (x *SearchAuthorNewCard) GetInlineLive() *SearchInlineData {
	if x != nil {
		return x.InlineLive
	}
	return nil
}

func (x *SearchAuthorNewCard) GetIsInlineLive() int32 {
	if x != nil {
		return x.IsInlineLive
	}
	return 0
}

func (x *SearchAuthorNewCard) GetThreePoint() []*ThreePoint {
	if x != nil {
		return x.ThreePoint
	}
	return nil
}

func (x *SearchAuthorNewCard) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *SearchAuthorNewCard) GetVip() *VipInfo {
	if x != nil {
		return x.Vip
	}
	return nil
}

type SearchBangumiCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	MediaType int32 `protobuf:"varint,3,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	PlayState int32 `protobuf:"varint,4,opt,name=play_state,json=playState,proto3" json:"play_state,omitempty"`
	Area string `protobuf:"bytes,5,opt,name=area,proto3" json:"area,omitempty"`
	Style string `protobuf:"bytes,6,opt,name=style,proto3" json:"style,omitempty"`
	Styles string `protobuf:"bytes,7,opt,name=styles,proto3" json:"styles,omitempty"`
	Cv string `protobuf:"bytes,8,opt,name=cv,proto3" json:"cv,omitempty"`
	Rating float64 `protobuf:"fixed64,9,opt,name=rating,proto3" json:"rating,omitempty"`
	Vote int32 `protobuf:"varint,10,opt,name=vote,proto3" json:"vote,omitempty"`
	Target string `protobuf:"bytes,11,opt,name=target,proto3" json:"target,omitempty"`
	Staff string `protobuf:"bytes,12,opt,name=staff,proto3" json:"staff,omitempty"`
	Prompt string `protobuf:"bytes,13,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Ptime int64 `protobuf:"varint,14,opt,name=ptime,proto3" json:"ptime,omitempty"`
	SeasonTypeName string `protobuf:"bytes,15,opt,name=season_type_name,json=seasonTypeName,proto3" json:"season_type_name,omitempty"`
	Episodes []*Episode `protobuf:"bytes,16,rep,name=episodes,proto3" json:"episodes,omitempty"`
	IsSelection int32 `protobuf:"varint,17,opt,name=is_selection,json=isSelection,proto3" json:"is_selection,omitempty"`
	IsAtten int32 `protobuf:"varint,18,opt,name=is_atten,json=isAtten,proto3" json:"is_atten,omitempty"`
	Label string `protobuf:"bytes,19,opt,name=label,proto3" json:"label,omitempty"`
	SeasonId int64 `protobuf:"varint,20,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	OutName string `protobuf:"bytes,21,opt,name=out_name,json=outName,proto3" json:"out_name,omitempty"`
	OutIcon string `protobuf:"bytes,22,opt,name=out_icon,json=outIcon,proto3" json:"out_icon,omitempty"`
	OutUrl string `protobuf:"bytes,23,opt,name=out_url,json=outUrl,proto3" json:"out_url,omitempty"`
	Badges []*ReasonStyle `protobuf:"bytes,24,rep,name=badges,proto3" json:"badges,omitempty"`
	IsOut int32 `protobuf:"varint,25,opt,name=is_out,json=isOut,proto3" json:"is_out,omitempty"`
	EpisodesNew []*EpisodeNew `protobuf:"bytes,26,rep,name=episodes_new,json=episodesNew,proto3" json:"episodes_new,omitempty"`
	WatchButton *WatchButton `protobuf:"bytes,27,opt,name=watch_button,json=watchButton,proto3" json:"watch_button,omitempty"`
	SelectionStyle string `protobuf:"bytes,28,opt,name=selection_style,json=selectionStyle,proto3" json:"selection_style,omitempty"`
	CheckMore *CheckMore `protobuf:"bytes,29,opt,name=check_more,json=checkMore,proto3" json:"check_more,omitempty"`
	FollowButton *FollowButton `protobuf:"bytes,30,opt,name=follow_button,json=followButton,proto3" json:"follow_button,omitempty"`
	StyleLabel *ReasonStyle `protobuf:"bytes,31,opt,name=style_label,json=styleLabel,proto3" json:"style_label,omitempty"`
	BadgesV2 []*ReasonStyle `protobuf:"bytes,32,rep,name=badges_v2,json=badgesV2,proto3" json:"badges_v2,omitempty"`
	StylesV2 string `protobuf:"bytes,33,opt,name=styles_v2,json=stylesV2,proto3" json:"styles_v2,omitempty"`
}

func (x *SearchBangumiCard) Reset() {
	*x = SearchBangumiCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBangumiCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBangumiCard) ProtoMessage() {}

func (x *SearchBangumiCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBangumiCard.ProtoReflect.Descriptor instead.
func (*SearchBangumiCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{59}
}

func (x *SearchBangumiCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchBangumiCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchBangumiCard) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *SearchBangumiCard) GetPlayState() int32 {
	if x != nil {
		return x.PlayState
	}
	return 0
}

func (x *SearchBangumiCard) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *SearchBangumiCard) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *SearchBangumiCard) GetStyles() string {
	if x != nil {
		return x.Styles
	}
	return ""
}

func (x *SearchBangumiCard) GetCv() string {
	if x != nil {
		return x.Cv
	}
	return ""
}

func (x *SearchBangumiCard) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *SearchBangumiCard) GetVote() int32 {
	if x != nil {
		return x.Vote
	}
	return 0
}

func (x *SearchBangumiCard) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *SearchBangumiCard) GetStaff() string {
	if x != nil {
		return x.Staff
	}
	return ""
}

func (x *SearchBangumiCard) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *SearchBangumiCard) GetPtime() int64 {
	if x != nil {
		return x.Ptime
	}
	return 0
}

func (x *SearchBangumiCard) GetSeasonTypeName() string {
	if x != nil {
		return x.SeasonTypeName
	}
	return ""
}

func (x *SearchBangumiCard) GetEpisodes() []*Episode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *SearchBangumiCard) GetIsSelection() int32 {
	if x != nil {
		return x.IsSelection
	}
	return 0
}

func (x *SearchBangumiCard) GetIsAtten() int32 {
	if x != nil {
		return x.IsAtten
	}
	return 0
}

func (x *SearchBangumiCard) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SearchBangumiCard) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SearchBangumiCard) GetOutName() string {
	if x != nil {
		return x.OutName
	}
	return ""
}

func (x *SearchBangumiCard) GetOutIcon() string {
	if x != nil {
		return x.OutIcon
	}
	return ""
}

func (x *SearchBangumiCard) GetOutUrl() string {
	if x != nil {
		return x.OutUrl
	}
	return ""
}

func (x *SearchBangumiCard) GetBadges() []*ReasonStyle {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *SearchBangumiCard) GetIsOut() int32 {
	if x != nil {
		return x.IsOut
	}
	return 0
}

func (x *SearchBangumiCard) GetEpisodesNew() []*EpisodeNew {
	if x != nil {
		return x.EpisodesNew
	}
	return nil
}

func (x *SearchBangumiCard) GetWatchButton() *WatchButton {
	if x != nil {
		return x.WatchButton
	}
	return nil
}

func (x *SearchBangumiCard) GetSelectionStyle() string {
	if x != nil {
		return x.SelectionStyle
	}
	return ""
}

func (x *SearchBangumiCard) GetCheckMore() *CheckMore {
	if x != nil {
		return x.CheckMore
	}
	return nil
}

func (x *SearchBangumiCard) GetFollowButton() *FollowButton {
	if x != nil {
		return x.FollowButton
	}
	return nil
}

func (x *SearchBangumiCard) GetStyleLabel() *ReasonStyle {
	if x != nil {
		return x.StyleLabel
	}
	return nil
}

func (x *SearchBangumiCard) GetBadgesV2() []*ReasonStyle {
	if x != nil {
		return x.BadgesV2
	}
	return nil
}

func (x *SearchBangumiCard) GetStylesV2() string {
	if x != nil {
		return x.StylesV2
	}
	return ""
}

type SearchBannerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
}

func (x *SearchBannerCard) Reset() {
	*x = SearchBannerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBannerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBannerCard) ProtoMessage() {}

func (x *SearchBannerCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBannerCard.ProtoReflect.Descriptor instead.
func (*SearchBannerCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{60}
}

func (x *SearchBannerCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchBannerCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

type SearchByTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 搜索目标类型, 番剧为7
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 关键词
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	CategorySort int32 `protobuf:"varint,3,opt,name=category_sort,json=categorySort,proto3" json:"category_sort,omitempty"`
	CategoryId int64 `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	UserType int32 `protobuf:"varint,5,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	UserSort int32 `protobuf:"varint,6,opt,name=user_sort,json=userSort,proto3" json:"user_sort,omitempty"`
	Pagination *pagination.Pagination `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,8,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
}

func (x *SearchByTypeRequest) Reset() {
	*x = SearchByTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchByTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByTypeRequest) ProtoMessage() {}

func (x *SearchByTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByTypeRequest.ProtoReflect.Descriptor instead.
func (*SearchByTypeRequest) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{61}
}

func (x *SearchByTypeRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SearchByTypeRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchByTypeRequest) GetCategorySort() int32 {
	if x != nil {
		return x.CategorySort
	}
	return 0
}

func (x *SearchByTypeRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SearchByTypeRequest) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *SearchByTypeRequest) GetUserSort() int32 {
	if x != nil {
		return x.UserSort
	}
	return 0
}

func (x *SearchByTypeRequest) GetPagination() *pagination.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchByTypeRequest) GetPlayerArgs() *v1.PlayerArgs {
	if x != nil {
		return x.PlayerArgs
	}
	return nil
}

type SearchByTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 追踪id
	Trackid string `protobuf:"bytes,1,opt,name=trackid,proto3" json:"trackid,omitempty"`
	// 当前页码
	Pages int32 `protobuf:"varint,2,opt,name=pages,proto3" json:"pages,omitempty"`
	ExpStr string `protobuf:"bytes,3,opt,name=exp_str,json=expStr,proto3" json:"exp_str,omitempty"`
	// 搜索关键词
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 是否为推荐结果
	ResultIsRecommend int32 `protobuf:"varint,5,opt,name=result_is_recommend,json=resultIsRecommend,proto3" json:"result_is_recommend,omitempty"`
	// 搜索结果条目
	Items []*Item `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
	// 分页信息
	Pagination *pagination.PaginationReply `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Annotation map[string]string `protobuf:"bytes,8,rep,name=annotation,proto3" json:"annotation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchByTypeResponse) Reset() {
	*x = SearchByTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchByTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByTypeResponse) ProtoMessage() {}

func (x *SearchByTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByTypeResponse.ProtoReflect.Descriptor instead.
func (*SearchByTypeResponse) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{62}
}

func (x *SearchByTypeResponse) GetTrackid() string {
	if x != nil {
		return x.Trackid
	}
	return ""
}

func (x *SearchByTypeResponse) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *SearchByTypeResponse) GetExpStr() string {
	if x != nil {
		return x.ExpStr
	}
	return ""
}

func (x *SearchByTypeResponse) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchByTypeResponse) GetResultIsRecommend() int32 {
	if x != nil {
		return x.ResultIsRecommend
	}
	return 0
}

func (x *SearchByTypeResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchByTypeResponse) GetPagination() *pagination.PaginationReply {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchByTypeResponse) GetAnnotation() map[string]string {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type SearchCollectionCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	AvItems []*AvItem `protobuf:"bytes,4,rep,name=av_items,json=avItems,proto3" json:"av_items,omitempty"`
	BottomButton *BottomButton `protobuf:"bytes,5,opt,name=bottom_button,json=bottomButton,proto3" json:"bottom_button,omitempty"`
	CollectionIcon string `protobuf:"bytes,6,opt,name=collection_icon,json=collectionIcon,proto3" json:"collection_icon,omitempty"`
	ShowCardDesc1 string `protobuf:"bytes,7,opt,name=show_card_desc1,json=showCardDesc1,proto3" json:"show_card_desc1,omitempty"`
	ShowCardDesc2 string `protobuf:"bytes,8,opt,name=show_card_desc2,json=showCardDesc2,proto3" json:"show_card_desc2,omitempty"`
}

func (x *SearchCollectionCard) Reset() {
	*x = SearchCollectionCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCollectionCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCollectionCard) ProtoMessage() {}

func (x *SearchCollectionCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCollectionCard.ProtoReflect.Descriptor instead.
func (*SearchCollectionCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{63}
}

func (x *SearchCollectionCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchCollectionCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchCollectionCard) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SearchCollectionCard) GetAvItems() []*AvItem {
	if x != nil {
		return x.AvItems
	}
	return nil
}

func (x *SearchCollectionCard) GetBottomButton() *BottomButton {
	if x != nil {
		return x.BottomButton
	}
	return nil
}

func (x *SearchCollectionCard) GetCollectionIcon() string {
	if x != nil {
		return x.CollectionIcon
	}
	return ""
}

func (x *SearchCollectionCard) GetShowCardDesc1() string {
	if x != nil {
		return x.ShowCardDesc1
	}
	return ""
}

func (x *SearchCollectionCard) GetShowCardDesc2() string {
	if x != nil {
		return x.ShowCardDesc2
	}
	return ""
}

type SearchComicCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Style string `protobuf:"bytes,4,opt,name=style,proto3" json:"style,omitempty"`
	ComicUrl string `protobuf:"bytes,5,opt,name=comic_url,json=comicUrl,proto3" json:"comic_url,omitempty"`
	Badge string `protobuf:"bytes,6,opt,name=badge,proto3" json:"badge,omitempty"`
}

func (x *SearchComicCard) Reset() {
	*x = SearchComicCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComicCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComicCard) ProtoMessage() {}

func (x *SearchComicCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComicCard.ProtoReflect.Descriptor instead.
func (*SearchComicCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{64}
}

func (x *SearchComicCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchComicCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchComicCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchComicCard) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *SearchComicCard) GetComicUrl() string {
	if x != nil {
		return x.ComicUrl
	}
	return ""
}

func (x *SearchComicCard) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

type SearchComicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Param string `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	Comic *SearchComicCard `protobuf:"bytes,3,opt,name=comic,proto3" json:"comic,omitempty"`
}

func (x *SearchComicInfo) Reset() {
	*x = SearchComicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComicInfo) ProtoMessage() {}

func (x *SearchComicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComicInfo.ProtoReflect.Descriptor instead.
func (*SearchComicInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{65}
}

func (x *SearchComicInfo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *SearchComicInfo) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *SearchComicInfo) GetComic() *SearchComicCard {
	if x != nil {
		return x.Comic
	}
	return nil
}

type SearchComicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdList string `protobuf:"bytes,1,opt,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *SearchComicRequest) Reset() {
	*x = SearchComicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComicRequest) ProtoMessage() {}

func (x *SearchComicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComicRequest.ProtoReflect.Descriptor instead.
func (*SearchComicRequest) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{66}
}

func (x *SearchComicRequest) GetIdList() string {
	if x != nil {
		return x.IdList
	}
	return ""
}

type SearchComicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SearchComicInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SearchComicResponse) Reset() {
	*x = SearchComicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComicResponse) ProtoMessage() {}

func (x *SearchComicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComicResponse.ProtoReflect.Descriptor instead.
func (*SearchComicResponse) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{67}
}

func (x *SearchComicResponse) GetItems() []*SearchComicInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type SearchDynamicCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	CoverCount int32 `protobuf:"varint,3,opt,name=cover_count,json=coverCount,proto3" json:"cover_count,omitempty"`
	Covers []string `protobuf:"bytes,4,rep,name=covers,proto3" json:"covers,omitempty"`
	Upper *Upper `protobuf:"bytes,5,opt,name=upper,proto3" json:"upper,omitempty"`
	Stat *Stat `protobuf:"bytes,6,opt,name=stat,proto3" json:"stat,omitempty"`
	DyTopic []*DyTopic `protobuf:"bytes,7,rep,name=dy_topic,json=dyTopic,proto3" json:"dy_topic,omitempty"`
}

func (x *SearchDynamicCard) Reset() {
	*x = SearchDynamicCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDynamicCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDynamicCard) ProtoMessage() {}

func (x *SearchDynamicCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDynamicCard.ProtoReflect.Descriptor instead.
func (*SearchDynamicCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{68}
}

func (x *SearchDynamicCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchDynamicCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchDynamicCard) GetCoverCount() int32 {
	if x != nil {
		return x.CoverCount
	}
	return 0
}

func (x *SearchDynamicCard) GetCovers() []string {
	if x != nil {
		return x.Covers
	}
	return nil
}

func (x *SearchDynamicCard) GetUpper() *Upper {
	if x != nil {
		return x.Upper
	}
	return nil
}

func (x *SearchDynamicCard) GetStat() *Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

func (x *SearchDynamicCard) GetDyTopic() []*DyTopic {
	if x != nil {
		return x.DyTopic
	}
	return nil
}

type SearchGameCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Reserve string `protobuf:"bytes,3,opt,name=reserve,proto3" json:"reserve,omitempty"`
	Rating float32 `protobuf:"fixed32,4,opt,name=rating,proto3" json:"rating,omitempty"`
	Tags string `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	NoticeName string `protobuf:"bytes,6,opt,name=notice_name,json=noticeName,proto3" json:"notice_name,omitempty"`
	NoticeContent string `protobuf:"bytes,7,opt,name=notice_content,json=noticeContent,proto3" json:"notice_content,omitempty"`
	GiftContent string `protobuf:"bytes,8,opt,name=gift_content,json=giftContent,proto3" json:"gift_content,omitempty"`
	GiftUrl string `protobuf:"bytes,9,opt,name=gift_url,json=giftUrl,proto3" json:"gift_url,omitempty"`
	ReserveStatus int32 `protobuf:"varint,10,opt,name=reserve_status,json=reserveStatus,proto3" json:"reserve_status,omitempty"`
	RankInfo *RankInfo `protobuf:"bytes,11,opt,name=rank_info,json=rankInfo,proto3" json:"rank_info,omitempty"`
	SpecialBgColor string `protobuf:"bytes,12,opt,name=special_bg_color,json=specialBgColor,proto3" json:"special_bg_color,omitempty"`
	CloudGameParams *CloudGameParams `protobuf:"bytes,13,opt,name=cloud_game_params,json=cloudGameParams,proto3" json:"cloud_game_params,omitempty"`
	ShowCloudGameEntry bool `protobuf:"varint,14,opt,name=show_cloud_game_entry,json=showCloudGameEntry,proto3" json:"show_cloud_game_entry,omitempty"`
}

func (x *SearchGameCard) Reset() {
	*x = SearchGameCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGameCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGameCard) ProtoMessage() {}

func (x *SearchGameCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGameCard.ProtoReflect.Descriptor instead.
func (*SearchGameCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{69}
}

func (x *SearchGameCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchGameCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchGameCard) GetReserve() string {
	if x != nil {
		return x.Reserve
	}
	return ""
}

func (x *SearchGameCard) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *SearchGameCard) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SearchGameCard) GetNoticeName() string {
	if x != nil {
		return x.NoticeName
	}
	return ""
}

func (x *SearchGameCard) GetNoticeContent() string {
	if x != nil {
		return x.NoticeContent
	}
	return ""
}

func (x *SearchGameCard) GetGiftContent() string {
	if x != nil {
		return x.GiftContent
	}
	return ""
}

func (x *SearchGameCard) GetGiftUrl() string {
	if x != nil {
		return x.GiftUrl
	}
	return ""
}

func (x *SearchGameCard) GetReserveStatus() int32 {
	if x != nil {
		return x.ReserveStatus
	}
	return 0
}

func (x *SearchGameCard) GetRankInfo() *RankInfo {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

func (x *SearchGameCard) GetSpecialBgColor() string {
	if x != nil {
		return x.SpecialBgColor
	}
	return ""
}

func (x *SearchGameCard) GetCloudGameParams() *CloudGameParams {
	if x != nil {
		return x.CloudGameParams
	}
	return nil
}

func (x *SearchGameCard) GetShowCloudGameEntry() bool {
	if x != nil {
		return x.ShowCloudGameEntry
	}
	return false
}

type SearchInlineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PlayerArgs *PlayerArgs `protobuf:"bytes,3,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	CanPlay int32 `protobuf:"varint,4,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	Args *Args `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
	CardGoto string `protobuf:"bytes,6,opt,name=card_goto,json=cardGoto,proto3" json:"card_goto,omitempty"`
	CardType string `protobuf:"bytes,7,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	Cover string `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover,omitempty"`
	CoverLeftIcon1 int32 `protobuf:"varint,9,opt,name=cover_left_icon1,json=coverLeftIcon1,proto3" json:"cover_left_icon1,omitempty"`
	CoverLeftIcon2 int32 `protobuf:"varint,10,opt,name=cover_left_icon2,json=coverLeftIcon2,proto3" json:"cover_left_icon2,omitempty"`
	CoverLeftText1 string `protobuf:"bytes,11,opt,name=cover_left_text1,json=coverLeftText1,proto3" json:"cover_left_text1,omitempty"`
	CoverLeftText2 string `protobuf:"bytes,12,opt,name=cover_left_text2,json=coverLeftText2,proto3" json:"cover_left_text2,omitempty"`
	UpArgs *UpArgs `protobuf:"bytes,13,opt,name=up_args,json=upArgs,proto3" json:"up_args,omitempty"`
	ExtraUri string `protobuf:"bytes,14,opt,name=extra_uri,json=extraUri,proto3" json:"extra_uri,omitempty"`
	IsFav bool `protobuf:"varint,15,opt,name=is_fav,json=isFav,proto3" json:"is_fav,omitempty"`
	IsCoin bool `protobuf:"varint,16,opt,name=is_coin,json=isCoin,proto3" json:"is_coin,omitempty"`
	Goto string `protobuf:"bytes,17,opt,name=goto,proto3" json:"goto,omitempty"`
	Share *Share `protobuf:"bytes,18,opt,name=share,proto3" json:"share,omitempty"`
	ThreePoint *ThreePoint2 `protobuf:"bytes,19,opt,name=three_point,json=threePoint,proto3" json:"three_point,omitempty"`
	ThreePointV2 []*ThreePointV2 `protobuf:"bytes,20,rep,name=three_point_v2,json=threePointV2,proto3" json:"three_point_v2,omitempty"`
	SharePlane *SharePlane `protobuf:"bytes,21,opt,name=share_plane,json=sharePlane,proto3" json:"share_plane,omitempty"`
	ThreePointMeta *InlineThreePointPanel `protobuf:"bytes,22,opt,name=three_point_meta,json=threePointMeta,proto3" json:"three_point_meta,omitempty"`
	Avatar *Avatar `protobuf:"bytes,23,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CoverRightText string `protobuf:"bytes,24,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	Desc string `protobuf:"bytes,25,opt,name=desc,proto3" json:"desc,omitempty"`
	InlineProgressBar *InlineProgressBar `protobuf:"bytes,26,opt,name=inline_progress_bar,json=inlineProgressBar,proto3" json:"inline_progress_bar,omitempty"`
	LikeButton *SearchLikeButtonItem `protobuf:"bytes,27,opt,name=like_button,json=likeButton,proto3" json:"like_button,omitempty"`
	OfficialIcon int32 `protobuf:"varint,28,opt,name=official_icon,json=officialIcon,proto3" json:"official_icon,omitempty"`
	OfficialIconV2 int32 `protobuf:"varint,29,opt,name=official_icon_v2,json=officialIconV2,proto3" json:"official_icon_v2,omitempty"`
	Param string `protobuf:"bytes,30,opt,name=param,proto3" json:"param,omitempty"`
	TrafficConfig *TrafficConfig `protobuf:"bytes,31,opt,name=traffic_config,json=trafficConfig,proto3" json:"traffic_config,omitempty"`
	IsAtten bool `protobuf:"varint,32,opt,name=is_atten,json=isAtten,proto3" json:"is_atten,omitempty"`
	GotoIcon *GotoIcon `protobuf:"bytes,33,opt,name=goto_icon,json=gotoIcon,proto3" json:"goto_icon,omitempty"`
	DisableDanmaku bool `protobuf:"varint,34,opt,name=disable_danmaku,json=disableDanmaku,proto3" json:"disable_danmaku,omitempty"`
	HideDanmakuSwitch bool `protobuf:"varint,35,opt,name=hide_danmaku_switch,json=hideDanmakuSwitch,proto3" json:"hide_danmaku_switch,omitempty"`
	BadgeStyle *ReasonStyle `protobuf:"bytes,36,opt,name=badge_style,json=badgeStyle,proto3" json:"badge_style,omitempty"`
	PlayerWidget *PlayerWidget `protobuf:"bytes,37,opt,name=player_widget,json=playerWidget,proto3" json:"player_widget,omitempty"`
	CoverBadgeStyle *ReasonStyle `protobuf:"bytes,38,opt,name=cover_badge_style,json=coverBadgeStyle,proto3" json:"cover_badge_style,omitempty"`
	RightTopLiveBadge *RightTopLiveBadge `protobuf:"bytes,39,opt,name=right_top_live_badge,json=rightTopLiveBadge,proto3" json:"right_top_live_badge,omitempty"`
}

func (x *SearchInlineData) Reset() {
	*x = SearchInlineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInlineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInlineData) ProtoMessage() {}

func (x *SearchInlineData) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInlineData.ProtoReflect.Descriptor instead.
func (*SearchInlineData) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{70}
}

func (x *SearchInlineData) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *SearchInlineData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchInlineData) GetPlayerArgs() *PlayerArgs {
	if x != nil {
		return x.PlayerArgs
	}
	return nil
}

func (x *SearchInlineData) GetCanPlay() int32 {
	if x != nil {
		return x.CanPlay
	}
	return 0
}

func (x *SearchInlineData) GetArgs() *Args {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *SearchInlineData) GetCardGoto() string {
	if x != nil {
		return x.CardGoto
	}
	return ""
}

func (x *SearchInlineData) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *SearchInlineData) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchInlineData) GetCoverLeftIcon1() int32 {
	if x != nil {
		return x.CoverLeftIcon1
	}
	return 0
}

func (x *SearchInlineData) GetCoverLeftIcon2() int32 {
	if x != nil {
		return x.CoverLeftIcon2
	}
	return 0
}

func (x *SearchInlineData) GetCoverLeftText1() string {
	if x != nil {
		return x.CoverLeftText1
	}
	return ""
}

func (x *SearchInlineData) GetCoverLeftText2() string {
	if x != nil {
		return x.CoverLeftText2
	}
	return ""
}

func (x *SearchInlineData) GetUpArgs() *UpArgs {
	if x != nil {
		return x.UpArgs
	}
	return nil
}

func (x *SearchInlineData) GetExtraUri() string {
	if x != nil {
		return x.ExtraUri
	}
	return ""
}

func (x *SearchInlineData) GetIsFav() bool {
	if x != nil {
		return x.IsFav
	}
	return false
}

func (x *SearchInlineData) GetIsCoin() bool {
	if x != nil {
		return x.IsCoin
	}
	return false
}

func (x *SearchInlineData) GetGoto() string {
	if x != nil {
		return x.Goto
	}
	return ""
}

func (x *SearchInlineData) GetShare() *Share {
	if x != nil {
		return x.Share
	}
	return nil
}

func (x *SearchInlineData) GetThreePoint() *ThreePoint2 {
	if x != nil {
		return x.ThreePoint
	}
	return nil
}

func (x *SearchInlineData) GetThreePointV2() []*ThreePointV2 {
	if x != nil {
		return x.ThreePointV2
	}
	return nil
}

func (x *SearchInlineData) GetSharePlane() *SharePlane {
	if x != nil {
		return x.SharePlane
	}
	return nil
}

func (x *SearchInlineData) GetThreePointMeta() *InlineThreePointPanel {
	if x != nil {
		return x.ThreePointMeta
	}
	return nil
}

func (x *SearchInlineData) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *SearchInlineData) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *SearchInlineData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SearchInlineData) GetInlineProgressBar() *InlineProgressBar {
	if x != nil {
		return x.InlineProgressBar
	}
	return nil
}

func (x *SearchInlineData) GetLikeButton() *SearchLikeButtonItem {
	if x != nil {
		return x.LikeButton
	}
	return nil
}

func (x *SearchInlineData) GetOfficialIcon() int32 {
	if x != nil {
		return x.OfficialIcon
	}
	return 0
}

func (x *SearchInlineData) GetOfficialIconV2() int32 {
	if x != nil {
		return x.OfficialIconV2
	}
	return 0
}

func (x *SearchInlineData) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *SearchInlineData) GetTrafficConfig() *TrafficConfig {
	if x != nil {
		return x.TrafficConfig
	}
	return nil
}

func (x *SearchInlineData) GetIsAtten() bool {
	if x != nil {
		return x.IsAtten
	}
	return false
}

func (x *SearchInlineData) GetGotoIcon() *GotoIcon {
	if x != nil {
		return x.GotoIcon
	}
	return nil
}

func (x *SearchInlineData) GetDisableDanmaku() bool {
	if x != nil {
		return x.DisableDanmaku
	}
	return false
}

func (x *SearchInlineData) GetHideDanmakuSwitch() bool {
	if x != nil {
		return x.HideDanmakuSwitch
	}
	return false
}

func (x *SearchInlineData) GetBadgeStyle() *ReasonStyle {
	if x != nil {
		return x.BadgeStyle
	}
	return nil
}

func (x *SearchInlineData) GetPlayerWidget() *PlayerWidget {
	if x != nil {
		return x.PlayerWidget
	}
	return nil
}

func (x *SearchInlineData) GetCoverBadgeStyle() *ReasonStyle {
	if x != nil {
		return x.CoverBadgeStyle
	}
	return nil
}

func (x *SearchInlineData) GetRightTopLiveBadge() *RightTopLiveBadge {
	if x != nil {
		return x.RightTopLiveBadge
	}
	return nil
}

type SearchLikeButtonItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Selected int32 `protobuf:"varint,3,opt,name=selected,proto3" json:"selected,omitempty"`
	ShowCount bool `protobuf:"varint,4,opt,name=show_count,json=showCount,proto3" json:"show_count,omitempty"`
	LikeResource *LikeResource `protobuf:"bytes,5,opt,name=like_resource,json=likeResource,proto3" json:"like_resource,omitempty"`
	LikeNightResource *LikeResource `protobuf:"bytes,6,opt,name=like_night_resource,json=likeNightResource,proto3" json:"like_night_resource,omitempty"`
	DislikeResource *LikeResource `protobuf:"bytes,7,opt,name=dislike_resource,json=dislikeResource,proto3" json:"dislike_resource,omitempty"`
	DislikeNightResource *LikeResource `protobuf:"bytes,8,opt,name=dislike_night_resource,json=dislikeNightResource,proto3" json:"dislike_night_resource,omitempty"`
}

func (x *SearchLikeButtonItem) Reset() {
	*x = SearchLikeButtonItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLikeButtonItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLikeButtonItem) ProtoMessage() {}

func (x *SearchLikeButtonItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLikeButtonItem.ProtoReflect.Descriptor instead.
func (*SearchLikeButtonItem) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{71}
}

func (x *SearchLikeButtonItem) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *SearchLikeButtonItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchLikeButtonItem) GetSelected() int32 {
	if x != nil {
		return x.Selected
	}
	return 0
}

func (x *SearchLikeButtonItem) GetShowCount() bool {
	if x != nil {
		return x.ShowCount
	}
	return false
}

func (x *SearchLikeButtonItem) GetLikeResource() *LikeResource {
	if x != nil {
		return x.LikeResource
	}
	return nil
}

func (x *SearchLikeButtonItem) GetLikeNightResource() *LikeResource {
	if x != nil {
		return x.LikeNightResource
	}
	return nil
}

func (x *SearchLikeButtonItem) GetDislikeResource() *LikeResource {
	if x != nil {
		return x.DislikeResource
	}
	return nil
}

func (x *SearchLikeButtonItem) GetDislikeNightResource() *LikeResource {
	if x != nil {
		return x.DislikeNightResource
	}
	return nil
}

type SearchLiveCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	RcmdReason *RcmdReason `protobuf:"bytes,3,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Online int32 `protobuf:"varint,5,opt,name=online,proto3" json:"online,omitempty"`
	Badge string `protobuf:"bytes,6,opt,name=badge,proto3" json:"badge,omitempty"`
	LiveLink string `protobuf:"bytes,7,opt,name=live_link,json=liveLink,proto3" json:"live_link,omitempty"`
	CardLeftText string `protobuf:"bytes,8,opt,name=card_left_text,json=cardLeftText,proto3" json:"card_left_text,omitempty"`
	CardLeftIcon int32 `protobuf:"varint,9,opt,name=card_left_icon,json=cardLeftIcon,proto3" json:"card_left_icon,omitempty"`
	ShowCardDesc2 string `protobuf:"bytes,10,opt,name=show_card_desc2,json=showCardDesc2,proto3" json:"show_card_desc2,omitempty"`
	RightTopLiveBadge *RightTopLiveBadge `protobuf:"bytes,11,opt,name=right_top_live_badge,json=rightTopLiveBadge,proto3" json:"right_top_live_badge,omitempty"`
}

func (x *SearchLiveCard) Reset() {
	*x = SearchLiveCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLiveCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLiveCard) ProtoMessage() {}

func (x *SearchLiveCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLiveCard.ProtoReflect.Descriptor instead.
func (*SearchLiveCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{72}
}

func (x *SearchLiveCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchLiveCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchLiveCard) GetRcmdReason() *RcmdReason {
	if x != nil {
		return x.RcmdReason
	}
	return nil
}

func (x *SearchLiveCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchLiveCard) GetOnline() int32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *SearchLiveCard) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *SearchLiveCard) GetLiveLink() string {
	if x != nil {
		return x.LiveLink
	}
	return ""
}

func (x *SearchLiveCard) GetCardLeftText() string {
	if x != nil {
		return x.CardLeftText
	}
	return ""
}

func (x *SearchLiveCard) GetCardLeftIcon() int32 {
	if x != nil {
		return x.CardLeftIcon
	}
	return 0
}

func (x *SearchLiveCard) GetShowCardDesc2() string {
	if x != nil {
		return x.ShowCardDesc2
	}
	return ""
}

func (x *SearchLiveCard) GetRightTopLiveBadge() *RightTopLiveBadge {
	if x != nil {
		return x.RightTopLiveBadge
	}
	return nil
}

type SearchLiveInlineCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,4,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	Roomid int64 `protobuf:"varint,5,opt,name=roomid,proto3" json:"roomid,omitempty"`
	LiveLink string `protobuf:"bytes,6,opt,name=live_link,json=liveLink,proto3" json:"live_link,omitempty"`
	LiveRoomInline *SearchInlineData `protobuf:"bytes,7,opt,name=live_room_inline,json=liveRoomInline,proto3" json:"live_room_inline,omitempty"`
	InlineType string `protobuf:"bytes,8,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
}

func (x *SearchLiveInlineCard) Reset() {
	*x = SearchLiveInlineCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLiveInlineCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLiveInlineCard) ProtoMessage() {}

func (x *SearchLiveInlineCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLiveInlineCard.ProtoReflect.Descriptor instead.
func (*SearchLiveInlineCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{73}
}

func (x *SearchLiveInlineCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchLiveInlineCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchLiveInlineCard) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *SearchLiveInlineCard) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

func (x *SearchLiveInlineCard) GetRoomid() int64 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *SearchLiveInlineCard) GetLiveLink() string {
	if x != nil {
		return x.LiveLink
	}
	return ""
}

func (x *SearchLiveInlineCard) GetLiveRoomInline() *SearchInlineData {
	if x != nil {
		return x.LiveRoomInline
	}
	return nil
}

func (x *SearchLiveInlineCard) GetInlineType() string {
	if x != nil {
		return x.InlineType
	}
	return ""
}

type SearchNewChannelCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	TypeIcon string `protobuf:"bytes,4,opt,name=type_icon,json=typeIcon,proto3" json:"type_icon,omitempty"`
	ChannelLabel1 *ChannelLabel `protobuf:"bytes,5,opt,name=channel_label1,json=channelLabel1,proto3" json:"channel_label1,omitempty"`
	ChannelLabel2 *ChannelLabel `protobuf:"bytes,6,opt,name=channel_label2,json=channelLabel2,proto3" json:"channel_label2,omitempty"`
	ChannelButton *ChannelLabel `protobuf:"bytes,7,opt,name=channel_button,json=channelButton,proto3" json:"channel_button,omitempty"`
	DesignType string `protobuf:"bytes,8,opt,name=design_type,json=designType,proto3" json:"design_type,omitempty"`
	Items []*ChannelMixedItem `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SearchNewChannelCard) Reset() {
	*x = SearchNewChannelCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNewChannelCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNewChannelCard) ProtoMessage() {}

func (x *SearchNewChannelCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNewChannelCard.ProtoReflect.Descriptor instead.
func (*SearchNewChannelCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{74}
}

func (x *SearchNewChannelCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchNewChannelCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchNewChannelCard) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchNewChannelCard) GetTypeIcon() string {
	if x != nil {
		return x.TypeIcon
	}
	return ""
}

func (x *SearchNewChannelCard) GetChannelLabel1() *ChannelLabel {
	if x != nil {
		return x.ChannelLabel1
	}
	return nil
}

func (x *SearchNewChannelCard) GetChannelLabel2() *ChannelLabel {
	if x != nil {
		return x.ChannelLabel2
	}
	return nil
}

func (x *SearchNewChannelCard) GetChannelButton() *ChannelLabel {
	if x != nil {
		return x.ChannelButton
	}
	return nil
}

func (x *SearchNewChannelCard) GetDesignType() string {
	if x != nil {
		return x.DesignType
	}
	return ""
}

func (x *SearchNewChannelCard) GetItems() []*ChannelMixedItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type SearchNoResultSuggestWordCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	SugKeyWordType int32 `protobuf:"varint,3,opt,name=sug_key_word_type,json=sugKeyWordType,proto3" json:"sug_key_word_type,omitempty"`
}

func (x *SearchNoResultSuggestWordCard) Reset() {
	*x = SearchNoResultSuggestWordCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNoResultSuggestWordCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNoResultSuggestWordCard) ProtoMessage() {}

func (x *SearchNoResultSuggestWordCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNoResultSuggestWordCard.ProtoReflect.Descriptor instead.
func (*SearchNoResultSuggestWordCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{75}
}

func (x *SearchNoResultSuggestWordCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchNoResultSuggestWordCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchNoResultSuggestWordCard) GetSugKeyWordType() int32 {
	if x != nil {
		return x.SugKeyWordType
	}
	return 0
}

type SearchOgvCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	SubTitle1 string `protobuf:"bytes,2,opt,name=sub_title1,json=subTitle1,proto3" json:"sub_title1,omitempty"`
	SubTitle2 string `protobuf:"bytes,3,opt,name=sub_title2,json=subTitle2,proto3" json:"sub_title2,omitempty"`
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	BgCover string `protobuf:"bytes,5,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	SpecialBgColor string `protobuf:"bytes,6,opt,name=special_bg_color,json=specialBgColor,proto3" json:"special_bg_color,omitempty"`
	CoverUri string `protobuf:"bytes,7,opt,name=cover_uri,json=coverUri,proto3" json:"cover_uri,omitempty"`
}

func (x *SearchOgvCard) Reset() {
	*x = SearchOgvCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOgvCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOgvCard) ProtoMessage() {}

func (x *SearchOgvCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOgvCard.ProtoReflect.Descriptor instead.
func (*SearchOgvCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{76}
}

func (x *SearchOgvCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchOgvCard) GetSubTitle1() string {
	if x != nil {
		return x.SubTitle1
	}
	return ""
}

func (x *SearchOgvCard) GetSubTitle2() string {
	if x != nil {
		return x.SubTitle2
	}
	return ""
}

func (x *SearchOgvCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchOgvCard) GetBgCover() string {
	if x != nil {
		return x.BgCover
	}
	return ""
}

func (x *SearchOgvCard) GetSpecialBgColor() string {
	if x != nil {
		return x.SpecialBgColor
	}
	return ""
}

func (x *SearchOgvCard) GetCoverUri() string {
	if x != nil {
		return x.CoverUri
	}
	return ""
}

type SearchOgvChannelCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	MediaId int64 `protobuf:"varint,3,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Styles string `protobuf:"bytes,4,opt,name=styles,proto3" json:"styles,omitempty"`
	Area string `protobuf:"bytes,5,opt,name=area,proto3" json:"area,omitempty"`
	Staff string `protobuf:"bytes,6,opt,name=staff,proto3" json:"staff,omitempty"`
	Badge string `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
	WatchButton *WatchButton `protobuf:"bytes,8,opt,name=watch_button,json=watchButton,proto3" json:"watch_button,omitempty"`
	Rating float64 `protobuf:"fixed64,9,opt,name=rating,proto3" json:"rating,omitempty"`
	Desc string `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`
	BadgesV2 []*ReasonStyle `protobuf:"bytes,11,rep,name=badges_v2,json=badgesV2,proto3" json:"badges_v2,omitempty"`
	StylesV2 string `protobuf:"bytes,12,opt,name=styles_v2,json=stylesV2,proto3" json:"styles_v2,omitempty"`
}

func (x *SearchOgvChannelCard) Reset() {
	*x = SearchOgvChannelCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOgvChannelCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOgvChannelCard) ProtoMessage() {}

func (x *SearchOgvChannelCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOgvChannelCard.ProtoReflect.Descriptor instead.
func (*SearchOgvChannelCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{77}
}

func (x *SearchOgvChannelCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchOgvChannelCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchOgvChannelCard) GetMediaId() int64 {
	if x != nil {
		return x.MediaId
	}
	return 0
}

func (x *SearchOgvChannelCard) GetStyles() string {
	if x != nil {
		return x.Styles
	}
	return ""
}

func (x *SearchOgvChannelCard) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *SearchOgvChannelCard) GetStaff() string {
	if x != nil {
		return x.Staff
	}
	return ""
}

func (x *SearchOgvChannelCard) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *SearchOgvChannelCard) GetWatchButton() *WatchButton {
	if x != nil {
		return x.WatchButton
	}
	return nil
}

func (x *SearchOgvChannelCard) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *SearchOgvChannelCard) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SearchOgvChannelCard) GetBadgesV2() []*ReasonStyle {
	if x != nil {
		return x.BadgesV2
	}
	return nil
}

func (x *SearchOgvChannelCard) GetStylesV2() string {
	if x != nil {
		return x.StylesV2
	}
	return ""
}

type SearchOgvInlineCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Danmaku int32 `protobuf:"varint,4,opt,name=danmaku,proto3" json:"danmaku,omitempty"`
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Face string `protobuf:"bytes,6,opt,name=face,proto3" json:"face,omitempty"`
	InlineType string `protobuf:"bytes,7,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
	Mid int64 `protobuf:"varint,8,opt,name=mid,proto3" json:"mid,omitempty"`
	Play int64 `protobuf:"varint,9,opt,name=play,proto3" json:"play,omitempty"`
	OgvInline *SearchInlineData `protobuf:"bytes,10,opt,name=ogv_inline,json=ogvInline,proto3" json:"ogv_inline,omitempty"`
	OgvClipInfo *OgvClipInfo `protobuf:"bytes,11,opt,name=ogv_clip_info,json=ogvClipInfo,proto3" json:"ogv_clip_info,omitempty"`
	WatchButton *WatchButton `protobuf:"bytes,12,opt,name=watch_button,json=watchButton,proto3" json:"watch_button,omitempty"`
	Score string `protobuf:"bytes,13,opt,name=score,proto3" json:"score,omitempty"`
	OgvInlineExp int32 `protobuf:"varint,14,opt,name=ogv_inline_exp,json=ogvInlineExp,proto3" json:"ogv_inline_exp,omitempty"`
	BadgesV2 []*ReasonStyle `protobuf:"bytes,15,rep,name=badges_v2,json=badgesV2,proto3" json:"badges_v2,omitempty"`
}

func (x *SearchOgvInlineCard) Reset() {
	*x = SearchOgvInlineCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOgvInlineCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOgvInlineCard) ProtoMessage() {}

func (x *SearchOgvInlineCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOgvInlineCard.ProtoReflect.Descriptor instead.
func (*SearchOgvInlineCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{78}
}

func (x *SearchOgvInlineCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchOgvInlineCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchOgvInlineCard) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SearchOgvInlineCard) GetDanmaku() int32 {
	if x != nil {
		return x.Danmaku
	}
	return 0
}

func (x *SearchOgvInlineCard) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SearchOgvInlineCard) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *SearchOgvInlineCard) GetInlineType() string {
	if x != nil {
		return x.InlineType
	}
	return ""
}

func (x *SearchOgvInlineCard) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *SearchOgvInlineCard) GetPlay() int64 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *SearchOgvInlineCard) GetOgvInline() *SearchInlineData {
	if x != nil {
		return x.OgvInline
	}
	return nil
}

func (x *SearchOgvInlineCard) GetOgvClipInfo() *OgvClipInfo {
	if x != nil {
		return x.OgvClipInfo
	}
	return nil
}

func (x *SearchOgvInlineCard) GetWatchButton() *WatchButton {
	if x != nil {
		return x.WatchButton
	}
	return nil
}

func (x *SearchOgvInlineCard) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *SearchOgvInlineCard) GetOgvInlineExp() int32 {
	if x != nil {
		return x.OgvInlineExp
	}
	return 0
}

func (x *SearchOgvInlineCard) GetBadgesV2() []*ReasonStyle {
	if x != nil {
		return x.BadgesV2
	}
	return nil
}

type SearchOgvRecommendCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Items []*OgvRecommendWord `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	SpecialBgColor string `protobuf:"bytes,4,opt,name=special_bg_color,json=specialBgColor,proto3" json:"special_bg_color,omitempty"`
}

func (x *SearchOgvRecommendCard) Reset() {
	*x = SearchOgvRecommendCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOgvRecommendCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOgvRecommendCard) ProtoMessage() {}

func (x *SearchOgvRecommendCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOgvRecommendCard.ProtoReflect.Descriptor instead.
func (*SearchOgvRecommendCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{79}
}

func (x *SearchOgvRecommendCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchOgvRecommendCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchOgvRecommendCard) GetItems() []*OgvRecommendWord {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchOgvRecommendCard) GetSpecialBgColor() string {
	if x != nil {
		return x.SpecialBgColor
	}
	return ""
}

type SearchOgvRelationCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	SpecialBgColor string `protobuf:"bytes,3,opt,name=special_bg_color,json=specialBgColor,proto3" json:"special_bg_color,omitempty"`
	MoreText string `protobuf:"bytes,4,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	MoreUrl string `protobuf:"bytes,5,opt,name=more_url,json=moreUrl,proto3" json:"more_url,omitempty"`
	Items []*DetailsRelationItem `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
	IsNewStyle int32 `protobuf:"varint,7,opt,name=is_new_style,json=isNewStyle,proto3" json:"is_new_style,omitempty"`
	OgvCardUi *OgvCardUI `protobuf:"bytes,8,opt,name=ogv_card_ui,json=ogvCardUi,proto3" json:"ogv_card_ui,omitempty"`
}

func (x *SearchOgvRelationCard) Reset() {
	*x = SearchOgvRelationCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOgvRelationCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOgvRelationCard) ProtoMessage() {}

func (x *SearchOgvRelationCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOgvRelationCard.ProtoReflect.Descriptor instead.
func (*SearchOgvRelationCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{80}
}

func (x *SearchOgvRelationCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchOgvRelationCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchOgvRelationCard) GetSpecialBgColor() string {
	if x != nil {
		return x.SpecialBgColor
	}
	return ""
}

func (x *SearchOgvRelationCard) GetMoreText() string {
	if x != nil {
		return x.MoreText
	}
	return ""
}

func (x *SearchOgvRelationCard) GetMoreUrl() string {
	if x != nil {
		return x.MoreUrl
	}
	return ""
}

func (x *SearchOgvRelationCard) GetItems() []*DetailsRelationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchOgvRelationCard) GetIsNewStyle() int32 {
	if x != nil {
		return x.IsNewStyle
	}
	return 0
}

func (x *SearchOgvRelationCard) GetOgvCardUi() *OgvCardUI {
	if x != nil {
		return x.OgvCardUi
	}
	return nil
}

type SearchOlympicGameCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	SportsMatchItem *SportsMatchItem `protobuf:"bytes,3,opt,name=sports_match_item,json=sportsMatchItem,proto3" json:"sports_match_item,omitempty"`
	MatchTop *MatchItem `protobuf:"bytes,4,opt,name=match_top,json=matchTop,proto3" json:"match_top,omitempty"`
	BgCover string `protobuf:"bytes,5,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	ExtraLink []*ExtraLink `protobuf:"bytes,6,rep,name=extra_link,json=extraLink,proto3" json:"extra_link,omitempty"`
	InlineType string `protobuf:"bytes,7,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
	UgcInline *SearchInlineData `protobuf:"bytes,8,opt,name=ugc_inline,json=ugcInline,proto3" json:"ugc_inline,omitempty"`
	LiveRoomInline *SearchInlineData `protobuf:"bytes,9,opt,name=live_room_inline,json=liveRoomInline,proto3" json:"live_room_inline,omitempty"`
	MatchBottom *MatchItem `protobuf:"bytes,10,opt,name=match_bottom,json=matchBottom,proto3" json:"match_bottom,omitempty"`
}

func (x *SearchOlympicGameCard) Reset() {
	*x = SearchOlympicGameCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOlympicGameCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOlympicGameCard) ProtoMessage() {}

func (x *SearchOlympicGameCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOlympicGameCard.ProtoReflect.Descriptor instead.
func (*SearchOlympicGameCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{81}
}

func (x *SearchOlympicGameCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchOlympicGameCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchOlympicGameCard) GetSportsMatchItem() *SportsMatchItem {
	if x != nil {
		return x.SportsMatchItem
	}
	return nil
}

func (x *SearchOlympicGameCard) GetMatchTop() *MatchItem {
	if x != nil {
		return x.MatchTop
	}
	return nil
}

func (x *SearchOlympicGameCard) GetBgCover() string {
	if x != nil {
		return x.BgCover
	}
	return ""
}

func (x *SearchOlympicGameCard) GetExtraLink() []*ExtraLink {
	if x != nil {
		return x.ExtraLink
	}
	return nil
}

func (x *SearchOlympicGameCard) GetInlineType() string {
	if x != nil {
		return x.InlineType
	}
	return ""
}

func (x *SearchOlympicGameCard) GetUgcInline() *SearchInlineData {
	if x != nil {
		return x.UgcInline
	}
	return nil
}

func (x *SearchOlympicGameCard) GetLiveRoomInline() *SearchInlineData {
	if x != nil {
		return x.LiveRoomInline
	}
	return nil
}

func (x *SearchOlympicGameCard) GetMatchBottom() *MatchItem {
	if x != nil {
		return x.MatchBottom
	}
	return nil
}

type SearchOlympicWikiCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	CardBusinessBadge *CardBusinessBadge `protobuf:"bytes,3,opt,name=card_business_badge,json=cardBusinessBadge,proto3" json:"card_business_badge,omitempty"`
	ReadMore *NavigationButton `protobuf:"bytes,4,opt,name=read_more,json=readMore,proto3" json:"read_more,omitempty"`
	InlineType string `protobuf:"bytes,5,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
	UgcInline *SearchInlineData `protobuf:"bytes,6,opt,name=ugc_inline,json=ugcInline,proto3" json:"ugc_inline,omitempty"`
	LiveRoomInline *SearchInlineData `protobuf:"bytes,7,opt,name=live_room_inline,json=liveRoomInline,proto3" json:"live_room_inline,omitempty"`
	PediaCover *PediaCover `protobuf:"bytes,8,opt,name=pedia_cover,json=pediaCover,proto3" json:"pedia_cover,omitempty"`
	Navigation []*Navigation `protobuf:"bytes,9,rep,name=navigation,proto3" json:"navigation,omitempty"`
}

func (x *SearchOlympicWikiCard) Reset() {
	*x = SearchOlympicWikiCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOlympicWikiCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOlympicWikiCard) ProtoMessage() {}

func (x *SearchOlympicWikiCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOlympicWikiCard.ProtoReflect.Descriptor instead.
func (*SearchOlympicWikiCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{82}
}

func (x *SearchOlympicWikiCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchOlympicWikiCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchOlympicWikiCard) GetCardBusinessBadge() *CardBusinessBadge {
	if x != nil {
		return x.CardBusinessBadge
	}
	return nil
}

func (x *SearchOlympicWikiCard) GetReadMore() *NavigationButton {
	if x != nil {
		return x.ReadMore
	}
	return nil
}

func (x *SearchOlympicWikiCard) GetInlineType() string {
	if x != nil {
		return x.InlineType
	}
	return ""
}

func (x *SearchOlympicWikiCard) GetUgcInline() *SearchInlineData {
	if x != nil {
		return x.UgcInline
	}
	return nil
}

func (x *SearchOlympicWikiCard) GetLiveRoomInline() *SearchInlineData {
	if x != nil {
		return x.LiveRoomInline
	}
	return nil
}

func (x *SearchOlympicWikiCard) GetPediaCover() *PediaCover {
	if x != nil {
		return x.PediaCover
	}
	return nil
}

func (x *SearchOlympicWikiCard) GetNavigation() []*Navigation {
	if x != nil {
		return x.Navigation
	}
	return nil
}

type SearchPediaCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Navigation []*Navigation `protobuf:"bytes,3,rep,name=navigation,proto3" json:"navigation,omitempty"`
	ReadMore *NavigationButton `protobuf:"bytes,4,opt,name=read_more,json=readMore,proto3" json:"read_more,omitempty"`
	NavigationModuleCount int32 `protobuf:"varint,5,opt,name=navigation_module_count,json=navigationModuleCount,proto3" json:"navigation_module_count,omitempty"`
	PediaCover *PediaCover `protobuf:"bytes,6,opt,name=pedia_cover,json=pediaCover,proto3" json:"pedia_cover,omitempty"`
	CardBusinessBadge *CardBusinessBadge `protobuf:"bytes,7,opt,name=card_business_badge,json=cardBusinessBadge,proto3" json:"card_business_badge,omitempty"`
}

func (x *SearchPediaCard) Reset() {
	*x = SearchPediaCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPediaCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPediaCard) ProtoMessage() {}

func (x *SearchPediaCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPediaCard.ProtoReflect.Descriptor instead.
func (*SearchPediaCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{83}
}

func (x *SearchPediaCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchPediaCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchPediaCard) GetNavigation() []*Navigation {
	if x != nil {
		return x.Navigation
	}
	return nil
}

func (x *SearchPediaCard) GetReadMore() *NavigationButton {
	if x != nil {
		return x.ReadMore
	}
	return nil
}

func (x *SearchPediaCard) GetNavigationModuleCount() int32 {
	if x != nil {
		return x.NavigationModuleCount
	}
	return 0
}

func (x *SearchPediaCard) GetPediaCover() *PediaCover {
	if x != nil {
		return x.PediaCover
	}
	return nil
}

func (x *SearchPediaCard) GetCardBusinessBadge() *CardBusinessBadge {
	if x != nil {
		return x.CardBusinessBadge
	}
	return nil
}

type SearchPurchaseCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Badge string `protobuf:"bytes,3,opt,name=badge,proto3" json:"badge,omitempty"`
	Venue string `protobuf:"bytes,4,opt,name=venue,proto3" json:"venue,omitempty"`
	Price int32 `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	PriceComplete string `protobuf:"bytes,6,opt,name=price_complete,json=priceComplete,proto3" json:"price_complete,omitempty"`
	PriceType int32 `protobuf:"varint,7,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	RequiredNumber int32 `protobuf:"varint,8,opt,name=required_number,json=requiredNumber,proto3" json:"required_number,omitempty"`
	City string `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`
	ShowTime string `protobuf:"bytes,10,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
	Id int64 `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	ShopName string `protobuf:"bytes,12,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
}

func (x *SearchPurchaseCard) Reset() {
	*x = SearchPurchaseCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPurchaseCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPurchaseCard) ProtoMessage() {}

func (x *SearchPurchaseCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPurchaseCard.ProtoReflect.Descriptor instead.
func (*SearchPurchaseCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{84}
}

func (x *SearchPurchaseCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchPurchaseCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchPurchaseCard) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *SearchPurchaseCard) GetVenue() string {
	if x != nil {
		return x.Venue
	}
	return ""
}

func (x *SearchPurchaseCard) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SearchPurchaseCard) GetPriceComplete() string {
	if x != nil {
		return x.PriceComplete
	}
	return ""
}

func (x *SearchPurchaseCard) GetPriceType() int32 {
	if x != nil {
		return x.PriceType
	}
	return 0
}

func (x *SearchPurchaseCard) GetRequiredNumber() int32 {
	if x != nil {
		return x.RequiredNumber
	}
	return 0
}

func (x *SearchPurchaseCard) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SearchPurchaseCard) GetShowTime() string {
	if x != nil {
		return x.ShowTime
	}
	return ""
}

func (x *SearchPurchaseCard) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchPurchaseCard) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

type SearchRecommendTipCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
}

func (x *SearchRecommendTipCard) Reset() {
	*x = SearchRecommendTipCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecommendTipCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecommendTipCard) ProtoMessage() {}

func (x *SearchRecommendTipCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecommendTipCard.ProtoReflect.Descriptor instead.
func (*SearchRecommendTipCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{85}
}

func (x *SearchRecommendTipCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchRecommendTipCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

type SearchRecommendWordCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	List []*RecommendWord `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchRecommendWordCard) Reset() {
	*x = SearchRecommendWordCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecommendWordCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecommendWordCard) ProtoMessage() {}

func (x *SearchRecommendWordCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecommendWordCard.ProtoReflect.Descriptor instead.
func (*SearchRecommendWordCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{86}
}

func (x *SearchRecommendWordCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchRecommendWordCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchRecommendWordCard) GetList() []*RecommendWord {
	if x != nil {
		return x.List
	}
	return nil
}

type SearchSpecialCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	NewRecTags []*ReasonStyle `protobuf:"bytes,3,rep,name=new_rec_tags,json=newRecTags,proto3" json:"new_rec_tags,omitempty"`
	CardBusinessBadge *CardBusinessBadge `protobuf:"bytes,4,opt,name=card_business_badge,json=cardBusinessBadge,proto3" json:"card_business_badge,omitempty"`
	Badge string `protobuf:"bytes,5,opt,name=badge,proto3" json:"badge,omitempty"`
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	NewRecTagsV2 []*ReasonStyle `protobuf:"bytes,7,rep,name=new_rec_tags_v2,json=newRecTagsV2,proto3" json:"new_rec_tags_v2,omitempty"`
}

func (x *SearchSpecialCard) Reset() {
	*x = SearchSpecialCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSpecialCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSpecialCard) ProtoMessage() {}

func (x *SearchSpecialCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSpecialCard.ProtoReflect.Descriptor instead.
func (*SearchSpecialCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{87}
}

func (x *SearchSpecialCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchSpecialCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchSpecialCard) GetNewRecTags() []*ReasonStyle {
	if x != nil {
		return x.NewRecTags
	}
	return nil
}

func (x *SearchSpecialCard) GetCardBusinessBadge() *CardBusinessBadge {
	if x != nil {
		return x.CardBusinessBadge
	}
	return nil
}

func (x *SearchSpecialCard) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *SearchSpecialCard) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SearchSpecialCard) GetNewRecTagsV2() []*ReasonStyle {
	if x != nil {
		return x.NewRecTagsV2
	}
	return nil
}

type SearchSpecialGuideCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *SearchSpecialGuideCard) Reset() {
	*x = SearchSpecialGuideCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSpecialGuideCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSpecialGuideCard) ProtoMessage() {}

func (x *SearchSpecialGuideCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSpecialGuideCard.ProtoReflect.Descriptor instead.
func (*SearchSpecialGuideCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{88}
}

func (x *SearchSpecialGuideCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchSpecialGuideCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchSpecialGuideCard) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SearchSpecialGuideCard) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type SearchSportCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	BgCover string `protobuf:"bytes,3,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	MatchTop *MatchItem `protobuf:"bytes,4,opt,name=match_top,json=matchTop,proto3" json:"match_top,omitempty"`
	MatchBottom *MatchItem `protobuf:"bytes,5,opt,name=match_bottom,json=matchBottom,proto3" json:"match_bottom,omitempty"`
	ExtraLink []*ExtraLink `protobuf:"bytes,6,rep,name=extra_link,json=extraLink,proto3" json:"extra_link,omitempty"`
	Items []*MatchInfoObj `protobuf:"bytes,7,rep,name=items,proto3" json:"items,omitempty"`
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SearchSportCard) Reset() {
	*x = SearchSportCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSportCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSportCard) ProtoMessage() {}

func (x *SearchSportCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSportCard.ProtoReflect.Descriptor instead.
func (*SearchSportCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{89}
}

func (x *SearchSportCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchSportCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchSportCard) GetBgCover() string {
	if x != nil {
		return x.BgCover
	}
	return ""
}

func (x *SearchSportCard) GetMatchTop() *MatchItem {
	if x != nil {
		return x.MatchTop
	}
	return nil
}

func (x *SearchSportCard) GetMatchBottom() *MatchItem {
	if x != nil {
		return x.MatchBottom
	}
	return nil
}

func (x *SearchSportCard) GetExtraLink() []*ExtraLink {
	if x != nil {
		return x.ExtraLink
	}
	return nil
}

func (x *SearchSportCard) GetItems() []*MatchInfoObj {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchSportCard) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SearchSportInlineCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	BgCover string `protobuf:"bytes,3,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	MatchTop *MatchItem `protobuf:"bytes,4,opt,name=match_top,json=matchTop,proto3" json:"match_top,omitempty"`
	MatchBottom *MatchItem `protobuf:"bytes,5,opt,name=match_bottom,json=matchBottom,proto3" json:"match_bottom,omitempty"`
	ExtraLink []*ExtraLink `protobuf:"bytes,6,rep,name=extra_link,json=extraLink,proto3" json:"extra_link,omitempty"`
	Items []*MatchInfoObj `protobuf:"bytes,7,rep,name=items,proto3" json:"items,omitempty"`
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	EsportsInline *SearchInlineData `protobuf:"bytes,9,opt,name=esports_inline,json=esportsInline,proto3" json:"esports_inline,omitempty"`
	InlineType string `protobuf:"bytes,10,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
}

func (x *SearchSportInlineCard) Reset() {
	*x = SearchSportInlineCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSportInlineCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSportInlineCard) ProtoMessage() {}

func (x *SearchSportInlineCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSportInlineCard.ProtoReflect.Descriptor instead.
func (*SearchSportInlineCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{90}
}

func (x *SearchSportInlineCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchSportInlineCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchSportInlineCard) GetBgCover() string {
	if x != nil {
		return x.BgCover
	}
	return ""
}

func (x *SearchSportInlineCard) GetMatchTop() *MatchItem {
	if x != nil {
		return x.MatchTop
	}
	return nil
}

func (x *SearchSportInlineCard) GetMatchBottom() *MatchItem {
	if x != nil {
		return x.MatchBottom
	}
	return nil
}

func (x *SearchSportInlineCard) GetExtraLink() []*ExtraLink {
	if x != nil {
		return x.ExtraLink
	}
	return nil
}

func (x *SearchSportInlineCard) GetItems() []*MatchInfoObj {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchSportInlineCard) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchSportInlineCard) GetEsportsInline() *SearchInlineData {
	if x != nil {
		return x.EsportsInline
	}
	return nil
}

func (x *SearchSportInlineCard) GetInlineType() string {
	if x != nil {
		return x.InlineType
	}
	return ""
}

type SearchTipsCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	SubTitle string `protobuf:"bytes,4,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`
	CoverNight string `protobuf:"bytes,134,opt,name=cover_night,json=coverNight,proto3" json:"cover_night,omitempty"`
}

func (x *SearchTipsCard) Reset() {
	*x = SearchTipsCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTipsCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTipsCard) ProtoMessage() {}

func (x *SearchTipsCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTipsCard.ProtoReflect.Descriptor instead.
func (*SearchTipsCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{91}
}

func (x *SearchTipsCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchTipsCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchTipsCard) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *SearchTipsCard) GetCoverNight() string {
	if x != nil {
		return x.CoverNight
	}
	return ""
}

type SearchTopGameCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Array int32 `protobuf:"varint,3,opt,name=array,proto3" json:"array,omitempty"`
	BackgroundImage string `protobuf:"bytes,4,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	ButtonType int32 `protobuf:"varint,5,opt,name=button_type,json=buttonType,proto3" json:"button_type,omitempty"`
	GameIcon string `protobuf:"bytes,6,opt,name=game_icon,json=gameIcon,proto3" json:"game_icon,omitempty"`
	GameBaseId int64 `protobuf:"varint,7,opt,name=game_base_id,json=gameBaseId,proto3" json:"game_base_id,omitempty"`
	GameStatus int32 `protobuf:"varint,8,opt,name=game_status,json=gameStatus,proto3" json:"game_status,omitempty"`
	InlineType string `protobuf:"bytes,9,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
	TopGameUi *TopGameUI `protobuf:"bytes,10,opt,name=top_game_ui,json=topGameUi,proto3" json:"top_game_ui,omitempty"`
	NoticeContent string `protobuf:"bytes,11,opt,name=notice_content,json=noticeContent,proto3" json:"notice_content,omitempty"`
	NoticeName string `protobuf:"bytes,12,opt,name=notice_name,json=noticeName,proto3" json:"notice_name,omitempty"`
	Rating float32 `protobuf:"fixed32,13,opt,name=rating,proto3" json:"rating,omitempty"`
	Score string `protobuf:"bytes,14,opt,name=score,proto3" json:"score,omitempty"`
	TabInfo []*TabInfo `protobuf:"bytes,15,rep,name=tab_info,json=tabInfo,proto3" json:"tab_info,omitempty"`
	Tags string `protobuf:"bytes,16,opt,name=tags,proto3" json:"tags,omitempty"`
	UgcInline *SearchInlineData `protobuf:"bytes,17,opt,name=ugc_inline,json=ugcInline,proto3" json:"ugc_inline,omitempty"`
	VideoCoverImage string `protobuf:"bytes,18,opt,name=video_cover_image,json=videoCoverImage,proto3" json:"video_cover_image,omitempty"`
	InlineLive *SearchInlineData `protobuf:"bytes,19,opt,name=inline_live,json=inlineLive,proto3" json:"inline_live,omitempty"`
}

func (x *SearchTopGameCard) Reset() {
	*x = SearchTopGameCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTopGameCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTopGameCard) ProtoMessage() {}

func (x *SearchTopGameCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTopGameCard.ProtoReflect.Descriptor instead.
func (*SearchTopGameCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{92}
}

func (x *SearchTopGameCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchTopGameCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchTopGameCard) GetArray() int32 {
	if x != nil {
		return x.Array
	}
	return 0
}

func (x *SearchTopGameCard) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

func (x *SearchTopGameCard) GetButtonType() int32 {
	if x != nil {
		return x.ButtonType
	}
	return 0
}

func (x *SearchTopGameCard) GetGameIcon() string {
	if x != nil {
		return x.GameIcon
	}
	return ""
}

func (x *SearchTopGameCard) GetGameBaseId() int64 {
	if x != nil {
		return x.GameBaseId
	}
	return 0
}

func (x *SearchTopGameCard) GetGameStatus() int32 {
	if x != nil {
		return x.GameStatus
	}
	return 0
}

func (x *SearchTopGameCard) GetInlineType() string {
	if x != nil {
		return x.InlineType
	}
	return ""
}

func (x *SearchTopGameCard) GetTopGameUi() *TopGameUI {
	if x != nil {
		return x.TopGameUi
	}
	return nil
}

func (x *SearchTopGameCard) GetNoticeContent() string {
	if x != nil {
		return x.NoticeContent
	}
	return ""
}

func (x *SearchTopGameCard) GetNoticeName() string {
	if x != nil {
		return x.NoticeName
	}
	return ""
}

func (x *SearchTopGameCard) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *SearchTopGameCard) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *SearchTopGameCard) GetTabInfo() []*TabInfo {
	if x != nil {
		return x.TabInfo
	}
	return nil
}

func (x *SearchTopGameCard) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SearchTopGameCard) GetUgcInline() *SearchInlineData {
	if x != nil {
		return x.UgcInline
	}
	return nil
}

func (x *SearchTopGameCard) GetVideoCoverImage() string {
	if x != nil {
		return x.VideoCoverImage
	}
	return ""
}

func (x *SearchTopGameCard) GetInlineLive() *SearchInlineData {
	if x != nil {
		return x.InlineLive
	}
	return nil
}

type SearchUgcInlineCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Danmaku int32 `protobuf:"varint,4,opt,name=danmaku,proto3" json:"danmaku,omitempty"`
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	InlineType string `protobuf:"bytes,6,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
	Mid int64 `protobuf:"varint,7,opt,name=mid,proto3" json:"mid,omitempty"`
	Play int64 `protobuf:"varint,8,opt,name=play,proto3" json:"play,omitempty"`
	UgcInline *SearchInlineData `protobuf:"bytes,9,opt,name=ugc_inline,json=ugcInline,proto3" json:"ugc_inline,omitempty"`
	FullText *FullTextResult `protobuf:"bytes,10,opt,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
}

func (x *SearchUgcInlineCard) Reset() {
	*x = SearchUgcInlineCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUgcInlineCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUgcInlineCard) ProtoMessage() {}

func (x *SearchUgcInlineCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUgcInlineCard.ProtoReflect.Descriptor instead.
func (*SearchUgcInlineCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{93}
}

func (x *SearchUgcInlineCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchUgcInlineCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchUgcInlineCard) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SearchUgcInlineCard) GetDanmaku() int32 {
	if x != nil {
		return x.Danmaku
	}
	return 0
}

func (x *SearchUgcInlineCard) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SearchUgcInlineCard) GetInlineType() string {
	if x != nil {
		return x.InlineType
	}
	return ""
}

func (x *SearchUgcInlineCard) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *SearchUgcInlineCard) GetPlay() int64 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *SearchUgcInlineCard) GetUgcInline() *SearchInlineData {
	if x != nil {
		return x.UgcInline
	}
	return nil
}

func (x *SearchUgcInlineCard) GetFullText() *FullTextResult {
	if x != nil {
		return x.FullText
	}
	return nil
}

type SearchUpperCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Sign string `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	Fans int32 `protobuf:"varint,4,opt,name=fans,proto3" json:"fans,omitempty"`
	Archives int32 `protobuf:"varint,5,opt,name=archives,proto3" json:"archives,omitempty"`
	LiveStatus int32 `protobuf:"varint,6,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	Roomid int32 `protobuf:"varint,7,opt,name=roomid,proto3" json:"roomid,omitempty"`
	OfficialVerify *OfficialVerify `protobuf:"bytes,8,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify,omitempty"`
	FaceNftNew int32 `protobuf:"varint,9,opt,name=face_nft_new,json=faceNftNew,proto3" json:"face_nft_new,omitempty"`
	NftFaceIcon *NftFaceIcon `protobuf:"bytes,10,opt,name=nft_face_icon,json=nftFaceIcon,proto3" json:"nft_face_icon,omitempty"`
	AvItems []*AvItem `protobuf:"bytes,11,rep,name=av_items,json=avItems,proto3" json:"av_items,omitempty"`
	IsUp bool `protobuf:"varint,12,opt,name=is_up,json=isUp,proto3" json:"is_up,omitempty"`
	Attentions int32 `protobuf:"varint,13,opt,name=attentions,proto3" json:"attentions,omitempty"`
	Level int32 `protobuf:"varint,14,opt,name=level,proto3" json:"level,omitempty"`
	IsSeniorMember int32 `protobuf:"varint,15,opt,name=is_senior_member,json=isSeniorMember,proto3" json:"is_senior_member,omitempty"`
	Vip *VipInfo `protobuf:"bytes,16,opt,name=vip,proto3" json:"vip,omitempty"`
	Relation *Relation `protobuf:"bytes,17,opt,name=relation,proto3" json:"relation,omitempty"`
	LiveLink string `protobuf:"bytes,18,opt,name=live_link,json=liveLink,proto3" json:"live_link,omitempty"`
	Notice *Notice `protobuf:"bytes,19,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (x *SearchUpperCard) Reset() {
	*x = SearchUpperCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUpperCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUpperCard) ProtoMessage() {}

func (x *SearchUpperCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUpperCard.ProtoReflect.Descriptor instead.
func (*SearchUpperCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{94}
}

func (x *SearchUpperCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchUpperCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchUpperCard) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *SearchUpperCard) GetFans() int32 {
	if x != nil {
		return x.Fans
	}
	return 0
}

func (x *SearchUpperCard) GetArchives() int32 {
	if x != nil {
		return x.Archives
	}
	return 0
}

func (x *SearchUpperCard) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *SearchUpperCard) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *SearchUpperCard) GetOfficialVerify() *OfficialVerify {
	if x != nil {
		return x.OfficialVerify
	}
	return nil
}

func (x *SearchUpperCard) GetFaceNftNew() int32 {
	if x != nil {
		return x.FaceNftNew
	}
	return 0
}

func (x *SearchUpperCard) GetNftFaceIcon() *NftFaceIcon {
	if x != nil {
		return x.NftFaceIcon
	}
	return nil
}

func (x *SearchUpperCard) GetAvItems() []*AvItem {
	if x != nil {
		return x.AvItems
	}
	return nil
}

func (x *SearchUpperCard) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

func (x *SearchUpperCard) GetAttentions() int32 {
	if x != nil {
		return x.Attentions
	}
	return 0
}

func (x *SearchUpperCard) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SearchUpperCard) GetIsSeniorMember() int32 {
	if x != nil {
		return x.IsSeniorMember
	}
	return 0
}

func (x *SearchUpperCard) GetVip() *VipInfo {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *SearchUpperCard) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *SearchUpperCard) GetLiveLink() string {
	if x != nil {
		return x.LiveLink
	}
	return ""
}

func (x *SearchUpperCard) GetNotice() *Notice {
	if x != nil {
		return x.Notice
	}
	return nil
}

type SearchVideoCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	RcmdReason *RcmdReason `protobuf:"bytes,3,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	NewRecTags []*ReasonStyle `protobuf:"bytes,4,rep,name=new_rec_tags,json=newRecTags,proto3" json:"new_rec_tags,omitempty"`
	ThreePoint []*ThreePoint `protobuf:"bytes,5,rep,name=three_point,json=threePoint,proto3" json:"three_point,omitempty"`
	Share *Share `protobuf:"bytes,6,opt,name=share,proto3" json:"share,omitempty"`
	CardBusinessBadge *CardBusinessBadge `protobuf:"bytes,7,opt,name=card_business_badge,json=cardBusinessBadge,proto3" json:"card_business_badge,omitempty"`
	Play int32 `protobuf:"varint,8,opt,name=play,proto3" json:"play,omitempty"`
	Danmaku int32 `protobuf:"varint,9,opt,name=danmaku,proto3" json:"danmaku,omitempty"`
	Author string `protobuf:"bytes,10,opt,name=author,proto3" json:"author,omitempty"`
	Desc string `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	Duration string `protobuf:"bytes,12,opt,name=duration,proto3" json:"duration,omitempty"`
	Badges []*ReasonStyle `protobuf:"bytes,13,rep,name=badges,proto3" json:"badges,omitempty"`
	Mid int64 `protobuf:"varint,14,opt,name=mid,proto3" json:"mid,omitempty"`
	ShowCardDesc1 string `protobuf:"bytes,15,opt,name=show_card_desc1,json=showCardDesc1,proto3" json:"show_card_desc1,omitempty"`
	ShowCardDesc2 string `protobuf:"bytes,16,opt,name=show_card_desc2,json=showCardDesc2,proto3" json:"show_card_desc2,omitempty"`
	FullText *FullTextResult `protobuf:"bytes,17,opt,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
	NewRecTagsV2 []*ReasonStyle `protobuf:"bytes,18,rep,name=new_rec_tags_v2,json=newRecTagsV2,proto3" json:"new_rec_tags_v2,omitempty"`
	BadgesV2 []*ReasonStyle `protobuf:"bytes,19,rep,name=badges_v2,json=badgesV2,proto3" json:"badges_v2,omitempty"`
}

func (x *SearchVideoCard) Reset() {
	*x = SearchVideoCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVideoCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVideoCard) ProtoMessage() {}

func (x *SearchVideoCard) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVideoCard.ProtoReflect.Descriptor instead.
func (*SearchVideoCard) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{95}
}

func (x *SearchVideoCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchVideoCard) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SearchVideoCard) GetRcmdReason() *RcmdReason {
	if x != nil {
		return x.RcmdReason
	}
	return nil
}

func (x *SearchVideoCard) GetNewRecTags() []*ReasonStyle {
	if x != nil {
		return x.NewRecTags
	}
	return nil
}

func (x *SearchVideoCard) GetThreePoint() []*ThreePoint {
	if x != nil {
		return x.ThreePoint
	}
	return nil
}

func (x *SearchVideoCard) GetShare() *Share {
	if x != nil {
		return x.Share
	}
	return nil
}

func (x *SearchVideoCard) GetCardBusinessBadge() *CardBusinessBadge {
	if x != nil {
		return x.CardBusinessBadge
	}
	return nil
}

func (x *SearchVideoCard) GetPlay() int32 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *SearchVideoCard) GetDanmaku() int32 {
	if x != nil {
		return x.Danmaku
	}
	return 0
}

func (x *SearchVideoCard) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SearchVideoCard) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SearchVideoCard) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *SearchVideoCard) GetBadges() []*ReasonStyle {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *SearchVideoCard) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *SearchVideoCard) GetShowCardDesc1() string {
	if x != nil {
		return x.ShowCardDesc1
	}
	return ""
}

func (x *SearchVideoCard) GetShowCardDesc2() string {
	if x != nil {
		return x.ShowCardDesc2
	}
	return ""
}

func (x *SearchVideoCard) GetFullText() *FullTextResult {
	if x != nil {
		return x.FullText
	}
	return nil
}

func (x *SearchVideoCard) GetNewRecTagsV2() []*ReasonStyle {
	if x != nil {
		return x.NewRecTagsV2
	}
	return nil
}

func (x *SearchVideoCard) GetBadgesV2() []*ReasonStyle {
	if x != nil {
		return x.BadgesV2
	}
	return nil
}

type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Video *Video `protobuf:"bytes,2,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{96}
}

func (x *Share) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Share) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

type ShareButtonItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	ButtonMetas []*ButtonMeta `protobuf:"bytes,2,rep,name=button_metas,json=buttonMetas,proto3" json:"button_metas,omitempty"`
}

func (x *ShareButtonItem) Reset() {
	*x = ShareButtonItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareButtonItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareButtonItem) ProtoMessage() {}

func (x *ShareButtonItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareButtonItem.ProtoReflect.Descriptor instead.
func (*ShareButtonItem) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{97}
}

func (x *ShareButtonItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ShareButtonItem) GetButtonMetas() []*ButtonMeta {
	if x != nil {
		return x.ButtonMetas
	}
	return nil
}

type SharePlane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	ShareSubtitle string `protobuf:"bytes,2,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	Aid int64 `protobuf:"varint,5,opt,name=aid,proto3" json:"aid,omitempty"`
	Bvid string `protobuf:"bytes,6,opt,name=bvid,proto3" json:"bvid,omitempty"`
	ShareTo *ShareTo `protobuf:"bytes,7,opt,name=share_to,json=shareTo,proto3" json:"share_to,omitempty"`
	Author string `protobuf:"bytes,8,opt,name=author,proto3" json:"author,omitempty"`
	AuthorId int64 `protobuf:"varint,9,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	ShortLink string `protobuf:"bytes,10,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	PlayNumber string `protobuf:"bytes,11,opt,name=play_number,json=playNumber,proto3" json:"play_number,omitempty"`
	RoomId int64 `protobuf:"varint,12,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	EpId int32 `protobuf:"varint,13,opt,name=ep_id,json=epId,proto3" json:"ep_id,omitempty"`
	AreaName string `protobuf:"bytes,14,opt,name=area_name,json=areaName,proto3" json:"area_name,omitempty"`
	AuthorFace string `protobuf:"bytes,15,opt,name=author_face,json=authorFace,proto3" json:"author_face,omitempty"`
	SeasonId int32 `protobuf:"varint,16,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	ShareFrom string `protobuf:"bytes,17,opt,name=share_from,json=shareFrom,proto3" json:"share_from,omitempty"`
	SeasonTitle string `protobuf:"bytes,18,opt,name=season_title,json=seasonTitle,proto3" json:"season_title,omitempty"`
	From string `protobuf:"bytes,19,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *SharePlane) Reset() {
	*x = SharePlane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePlane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePlane) ProtoMessage() {}

func (x *SharePlane) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePlane.ProtoReflect.Descriptor instead.
func (*SharePlane) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{98}
}

func (x *SharePlane) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SharePlane) GetShareSubtitle() string {
	if x != nil {
		return x.ShareSubtitle
	}
	return ""
}

func (x *SharePlane) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SharePlane) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *SharePlane) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *SharePlane) GetBvid() string {
	if x != nil {
		return x.Bvid
	}
	return ""
}

func (x *SharePlane) GetShareTo() *ShareTo {
	if x != nil {
		return x.ShareTo
	}
	return nil
}

func (x *SharePlane) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SharePlane) GetAuthorId() int64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *SharePlane) GetShortLink() string {
	if x != nil {
		return x.ShortLink
	}
	return ""
}

func (x *SharePlane) GetPlayNumber() string {
	if x != nil {
		return x.PlayNumber
	}
	return ""
}

func (x *SharePlane) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SharePlane) GetEpId() int32 {
	if x != nil {
		return x.EpId
	}
	return 0
}

func (x *SharePlane) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *SharePlane) GetAuthorFace() string {
	if x != nil {
		return x.AuthorFace
	}
	return ""
}

func (x *SharePlane) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SharePlane) GetShareFrom() string {
	if x != nil {
		return x.ShareFrom
	}
	return ""
}

func (x *SharePlane) GetSeasonTitle() string {
	if x != nil {
		return x.SeasonTitle
	}
	return ""
}

func (x *SharePlane) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type ShareTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dynamic bool `protobuf:"varint,1,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	Im bool `protobuf:"varint,2,opt,name=im,proto3" json:"im,omitempty"`
	Copy bool `protobuf:"varint,3,opt,name=copy,proto3" json:"copy,omitempty"`
	More bool `protobuf:"varint,4,opt,name=more,proto3" json:"more,omitempty"`
	Wechat bool `protobuf:"varint,5,opt,name=wechat,proto3" json:"wechat,omitempty"`
	Weibo bool `protobuf:"varint,6,opt,name=weibo,proto3" json:"weibo,omitempty"`
	WechatMonment bool `protobuf:"varint,7,opt,name=wechat_monment,json=wechatMonment,proto3" json:"wechat_monment,omitempty"`
	Qq bool `protobuf:"varint,8,opt,name=qq,proto3" json:"qq,omitempty"`
	Qzone bool `protobuf:"varint,9,opt,name=qzone,proto3" json:"qzone,omitempty"`
	Facebook bool `protobuf:"varint,10,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Line bool `protobuf:"varint,11,opt,name=line,proto3" json:"line,omitempty"`
	Messenger bool `protobuf:"varint,12,opt,name=messenger,proto3" json:"messenger,omitempty"`
	WhatsApp bool `protobuf:"varint,13,opt,name=whats_app,json=whatsApp,proto3" json:"whats_app,omitempty"`
	Twitter bool `protobuf:"varint,14,opt,name=twitter,proto3" json:"twitter,omitempty"`
}

func (x *ShareTo) Reset() {
	*x = ShareTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareTo) ProtoMessage() {}

func (x *ShareTo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareTo.ProtoReflect.Descriptor instead.
func (*ShareTo) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{99}
}

func (x *ShareTo) GetDynamic() bool {
	if x != nil {
		return x.Dynamic
	}
	return false
}

func (x *ShareTo) GetIm() bool {
	if x != nil {
		return x.Im
	}
	return false
}

func (x *ShareTo) GetCopy() bool {
	if x != nil {
		return x.Copy
	}
	return false
}

func (x *ShareTo) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

func (x *ShareTo) GetWechat() bool {
	if x != nil {
		return x.Wechat
	}
	return false
}

func (x *ShareTo) GetWeibo() bool {
	if x != nil {
		return x.Weibo
	}
	return false
}

func (x *ShareTo) GetWechatMonment() bool {
	if x != nil {
		return x.WechatMonment
	}
	return false
}

func (x *ShareTo) GetQq() bool {
	if x != nil {
		return x.Qq
	}
	return false
}

func (x *ShareTo) GetQzone() bool {
	if x != nil {
		return x.Qzone
	}
	return false
}

func (x *ShareTo) GetFacebook() bool {
	if x != nil {
		return x.Facebook
	}
	return false
}

func (x *ShareTo) GetLine() bool {
	if x != nil {
		return x.Line
	}
	return false
}

func (x *ShareTo) GetMessenger() bool {
	if x != nil {
		return x.Messenger
	}
	return false
}

func (x *ShareTo) GetWhatsApp() bool {
	if x != nil {
		return x.WhatsApp
	}
	return false
}

func (x *ShareTo) GetTwitter() bool {
	if x != nil {
		return x.Twitter
	}
	return false
}

type Space struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show int32 `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	TextColorNight string `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	SpaceUrl string `protobuf:"bytes,5,opt,name=space_url,json=spaceUrl,proto3" json:"space_url,omitempty"`
}

func (x *Space) Reset() {
	*x = Space{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Space) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Space) ProtoMessage() {}

func (x *Space) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Space.ProtoReflect.Descriptor instead.
func (*Space) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{100}
}

func (x *Space) GetShow() int32 {
	if x != nil {
		return x.Show
	}
	return 0
}

func (x *Space) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *Space) GetTextColorNight() string {
	if x != nil {
		return x.TextColorNight
	}
	return ""
}

func (x *Space) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Space) GetSpaceUrl() string {
	if x != nil {
		return x.SpaceUrl
	}
	return ""
}

type SportsMatchItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId int64 `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	SeasonId int64 `protobuf:"varint,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	MatchName string `protobuf:"bytes,3,opt,name=match_name,json=matchName,proto3" json:"match_name,omitempty"`
	Img string `protobuf:"bytes,4,opt,name=img,proto3" json:"img,omitempty"`
	BeginTimeDesc string `protobuf:"bytes,5,opt,name=begin_time_desc,json=beginTimeDesc,proto3" json:"begin_time_desc,omitempty"`
	MatchStatusDesc string `protobuf:"bytes,6,opt,name=match_status_desc,json=matchStatusDesc,proto3" json:"match_status_desc,omitempty"`
	SubContent string `protobuf:"bytes,7,opt,name=sub_content,json=subContent,proto3" json:"sub_content,omitempty"`
	SubExtraIcon string `protobuf:"bytes,8,opt,name=sub_extra_icon,json=subExtraIcon,proto3" json:"sub_extra_icon,omitempty"`
}

func (x *SportsMatchItem) Reset() {
	*x = SportsMatchItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportsMatchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportsMatchItem) ProtoMessage() {}

func (x *SportsMatchItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportsMatchItem.ProtoReflect.Descriptor instead.
func (*SportsMatchItem) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{101}
}

func (x *SportsMatchItem) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *SportsMatchItem) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SportsMatchItem) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

func (x *SportsMatchItem) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *SportsMatchItem) GetBeginTimeDesc() string {
	if x != nil {
		return x.BeginTimeDesc
	}
	return ""
}

func (x *SportsMatchItem) GetMatchStatusDesc() string {
	if x != nil {
		return x.MatchStatusDesc
	}
	return ""
}

func (x *SportsMatchItem) GetSubContent() string {
	if x != nil {
		return x.SubContent
	}
	return ""
}

func (x *SportsMatchItem) GetSubExtraIcon() string {
	if x != nil {
		return x.SubExtraIcon
	}
	return ""
}

type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Play int32 `protobuf:"varint,1,opt,name=play,proto3" json:"play,omitempty"`
	Like int32 `protobuf:"varint,2,opt,name=like,proto3" json:"like,omitempty"`
	Reply int32 `protobuf:"varint,3,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{102}
}

func (x *Stat) GetPlay() int32 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *Stat) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *Stat) GetReply() int32 {
	if x != nil {
		return x.Reply
	}
	return 0
}

type TabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabName string `protobuf:"bytes,1,opt,name=tab_name,json=tabName,proto3" json:"tab_name,omitempty"`
	TabUrl string `protobuf:"bytes,2,opt,name=tab_url,json=tabUrl,proto3" json:"tab_url,omitempty"`
	Sort int32 `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *TabInfo) Reset() {
	*x = TabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabInfo) ProtoMessage() {}

func (x *TabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabInfo.ProtoReflect.Descriptor instead.
func (*TabInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{103}
}

func (x *TabInfo) GetTabName() string {
	if x != nil {
		return x.TabName
	}
	return ""
}

func (x *TabInfo) GetTabUrl() string {
	if x != nil {
		return x.TabUrl
	}
	return ""
}

func (x *TabInfo) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type TextButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *TextButton) Reset() {
	*x = TextButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextButton) ProtoMessage() {}

func (x *TextButton) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextButton.ProtoReflect.Descriptor instead.
func (*TextButton) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{104}
}

func (x *TextButton) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextButton) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type TextLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *TextLabel) Reset() {
	*x = TextLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextLabel) ProtoMessage() {}

func (x *TextLabel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextLabel.ProtoReflect.Descriptor instead.
func (*TextLabel) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{105}
}

func (x *TextLabel) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextLabel) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type Texts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingText string `protobuf:"bytes,1,opt,name=booking_text,json=bookingText,proto3" json:"booking_text,omitempty"`
	UnbookingText string `protobuf:"bytes,2,opt,name=unbooking_text,json=unbookingText,proto3" json:"unbooking_text,omitempty"`
}

func (x *Texts) Reset() {
	*x = Texts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Texts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Texts) ProtoMessage() {}

func (x *Texts) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Texts.ProtoReflect.Descriptor instead.
func (*Texts) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{106}
}

func (x *Texts) GetBookingText() string {
	if x != nil {
		return x.BookingText
	}
	return ""
}

func (x *Texts) GetUnbookingText() string {
	if x != nil {
		return x.UnbookingText
	}
	return ""
}

type ThreePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ThreePoint) Reset() {
	*x = ThreePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreePoint) ProtoMessage() {}

func (x *ThreePoint) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreePoint.ProtoReflect.Descriptor instead.
func (*ThreePoint) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{107}
}

func (x *ThreePoint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThreePoint) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ThreePoint) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ThreePoint2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DislikeReasons []*DislikeReason `protobuf:"bytes,1,rep,name=dislike_reasons,json=dislikeReasons,proto3" json:"dislike_reasons,omitempty"`
	Feedbacks []*DislikeReason `protobuf:"bytes,2,rep,name=feedbacks,proto3" json:"feedbacks,omitempty"`
	WatchLater int32 `protobuf:"varint,3,opt,name=watch_later,json=watchLater,proto3" json:"watch_later,omitempty"`
}

func (x *ThreePoint2) Reset() {
	*x = ThreePoint2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreePoint2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreePoint2) ProtoMessage() {}

func (x *ThreePoint2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreePoint2.ProtoReflect.Descriptor instead.
func (*ThreePoint2) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{108}
}

func (x *ThreePoint2) GetDislikeReasons() []*DislikeReason {
	if x != nil {
		return x.DislikeReasons
	}
	return nil
}

func (x *ThreePoint2) GetFeedbacks() []*DislikeReason {
	if x != nil {
		return x.Feedbacks
	}
	return nil
}

func (x *ThreePoint2) GetWatchLater() int32 {
	if x != nil {
		return x.WatchLater
	}
	return 0
}

type ThreePointV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Reasons []*DislikeReason `protobuf:"bytes,3,rep,name=reasons,proto3" json:"reasons,omitempty"`
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ThreePointV2) Reset() {
	*x = ThreePointV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreePointV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreePointV2) ProtoMessage() {}

func (x *ThreePointV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreePointV2.ProtoReflect.Descriptor instead.
func (*ThreePointV2) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{109}
}

func (x *ThreePointV2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ThreePointV2) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *ThreePointV2) GetReasons() []*DislikeReason {
	if x != nil {
		return x.Reasons
	}
	return nil
}

func (x *ThreePointV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThreePointV2) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ThreePointV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	SelectedTitle string `protobuf:"bytes,2,opt,name=selected_title,json=selectedTitle,proto3" json:"selected_title,omitempty"`
	Subtitle string `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Reasons []*DislikeReason `protobuf:"bytes,4,rep,name=reasons,proto3" json:"reasons,omitempty"`
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Id int64 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Selected int32 `protobuf:"varint,7,opt,name=selected,proto3" json:"selected,omitempty"`
	Icon string `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	SelectedIcon string `protobuf:"bytes,9,opt,name=selected_icon,json=selectedIcon,proto3" json:"selected_icon,omitempty"`
	Url string `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	DefaultId int32 `protobuf:"varint,11,opt,name=default_id,json=defaultId,proto3" json:"default_id,omitempty"`
}

func (x *ThreePointV3) Reset() {
	*x = ThreePointV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreePointV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreePointV3) ProtoMessage() {}

func (x *ThreePointV3) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreePointV3.ProtoReflect.Descriptor instead.
func (*ThreePointV3) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{110}
}

func (x *ThreePointV3) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ThreePointV3) GetSelectedTitle() string {
	if x != nil {
		return x.SelectedTitle
	}
	return ""
}

func (x *ThreePointV3) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *ThreePointV3) GetReasons() []*DislikeReason {
	if x != nil {
		return x.Reasons
	}
	return nil
}

func (x *ThreePointV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThreePointV3) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ThreePointV3) GetSelected() int32 {
	if x != nil {
		return x.Selected
	}
	return 0
}

func (x *ThreePointV3) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ThreePointV3) GetSelectedIcon() string {
	if x != nil {
		return x.SelectedIcon
	}
	return ""
}

func (x *ThreePointV3) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ThreePointV3) GetDefaultId() int32 {
	if x != nil {
		return x.DefaultId
	}
	return 0
}

type ThreePointV4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharePlane *SharePlane `protobuf:"bytes,1,opt,name=share_plane,json=sharePlane,proto3" json:"share_plane,omitempty"`
	WatchLater *WatchLater `protobuf:"bytes,2,opt,name=watch_later,json=watchLater,proto3" json:"watch_later,omitempty"`
}

func (x *ThreePointV4) Reset() {
	*x = ThreePointV4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreePointV4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreePointV4) ProtoMessage() {}

func (x *ThreePointV4) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreePointV4.ProtoReflect.Descriptor instead.
func (*ThreePointV4) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{111}
}

func (x *ThreePointV4) GetSharePlane() *SharePlane {
	if x != nil {
		return x.SharePlane
	}
	return nil
}

func (x *ThreePointV4) GetWatchLater() *WatchLater {
	if x != nil {
		return x.WatchLater
	}
	return nil
}

type TopGameUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundImage string `protobuf:"bytes,1,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	CoverDefaultColor string `protobuf:"bytes,2,opt,name=cover_default_color,json=coverDefaultColor,proto3" json:"cover_default_color,omitempty"`
	GaussianBlurValue string `protobuf:"bytes,3,opt,name=gaussian_blur_value,json=gaussianBlurValue,proto3" json:"gaussian_blur_value,omitempty"`
	MaskColorValue string `protobuf:"bytes,4,opt,name=mask_color_value,json=maskColorValue,proto3" json:"mask_color_value,omitempty"`
	MaskOpacity string `protobuf:"bytes,5,opt,name=mask_opacity,json=maskOpacity,proto3" json:"mask_opacity,omitempty"`
	ModuleColor string `protobuf:"bytes,6,opt,name=module_color,json=moduleColor,proto3" json:"module_color,omitempty"`
}

func (x *TopGameUI) Reset() {
	*x = TopGameUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopGameUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopGameUI) ProtoMessage() {}

func (x *TopGameUI) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopGameUI.ProtoReflect.Descriptor instead.
func (*TopGameUI) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{112}
}

func (x *TopGameUI) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

func (x *TopGameUI) GetCoverDefaultColor() string {
	if x != nil {
		return x.CoverDefaultColor
	}
	return ""
}

func (x *TopGameUI) GetGaussianBlurValue() string {
	if x != nil {
		return x.GaussianBlurValue
	}
	return ""
}

func (x *TopGameUI) GetMaskColorValue() string {
	if x != nil {
		return x.MaskColorValue
	}
	return ""
}

func (x *TopGameUI) GetMaskOpacity() string {
	if x != nil {
		return x.MaskOpacity
	}
	return ""
}

func (x *TopGameUI) GetModuleColor() string {
	if x != nil {
		return x.ModuleColor
	}
	return ""
}

type TrafficConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Options []*TrafficConfigOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	DefaultOptionId int64 `protobuf:"varint,3,opt,name=default_option_id,json=defaultOptionId,proto3" json:"default_option_id,omitempty"`
}

func (x *TrafficConfig) Reset() {
	*x = TrafficConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficConfig) ProtoMessage() {}

func (x *TrafficConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficConfig.ProtoReflect.Descriptor instead.
func (*TrafficConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{113}
}

func (x *TrafficConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TrafficConfig) GetOptions() []*TrafficConfigOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TrafficConfig) GetDefaultOptionId() int64 {
	if x != nil {
		return x.DefaultOptionId
	}
	return 0
}

type TrafficConfigOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TrafficConfigOption) Reset() {
	*x = TrafficConfigOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficConfigOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficConfigOption) ProtoMessage() {}

func (x *TrafficConfigOption) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficConfigOption.ProtoReflect.Descriptor instead.
func (*TrafficConfigOption) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{114}
}

func (x *TrafficConfigOption) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrafficConfigOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type UpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpId int64 `protobuf:"varint,1,opt,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
	UpName string `protobuf:"bytes,2,opt,name=up_name,json=upName,proto3" json:"up_name,omitempty"`
	UpFace string `protobuf:"bytes,3,opt,name=up_face,json=upFace,proto3" json:"up_face,omitempty"`
	Selected int32 `protobuf:"varint,4,opt,name=selected,proto3" json:"selected,omitempty"`
}

func (x *UpArgs) Reset() {
	*x = UpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpArgs) ProtoMessage() {}

func (x *UpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpArgs.ProtoReflect.Descriptor instead.
func (*UpArgs) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{115}
}

func (x *UpArgs) GetUpId() int64 {
	if x != nil {
		return x.UpId
	}
	return 0
}

func (x *UpArgs) GetUpName() string {
	if x != nil {
		return x.UpName
	}
	return ""
}

func (x *UpArgs) GetUpFace() string {
	if x != nil {
		return x.UpFace
	}
	return ""
}

func (x *UpArgs) GetSelected() int32 {
	if x != nil {
		return x.Selected
	}
	return 0
}

type Upper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Cover string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	PtimeText string `protobuf:"bytes,4,opt,name=ptime_text,json=ptimeText,proto3" json:"ptime_text,omitempty"`
}

func (x *Upper) Reset() {
	*x = Upper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upper) ProtoMessage() {}

func (x *Upper) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upper.ProtoReflect.Descriptor instead.
func (*Upper) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{116}
}

func (x *Upper) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *Upper) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Upper) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Upper) GetPtimeText() string {
	if x != nil {
		return x.PtimeText
	}
	return ""
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bvid string `protobuf:"bytes,1,opt,name=bvid,proto3" json:"bvid,omitempty"`
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	ShareSubtitle string `protobuf:"bytes,3,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	IsHotLabel bool `protobuf:"varint,4,opt,name=is_hot_label,json=isHotLabel,proto3" json:"is_hot_label,omitempty"`
	Page int32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageCount int32 `protobuf:"varint,6,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	ShortLink string `protobuf:"bytes,7,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{117}
}

func (x *Video) GetBvid() string {
	if x != nil {
		return x.Bvid
	}
	return ""
}

func (x *Video) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *Video) GetShareSubtitle() string {
	if x != nil {
		return x.ShareSubtitle
	}
	return ""
}

func (x *Video) GetIsHotLabel() bool {
	if x != nil {
		return x.IsHotLabel
	}
	return false
}

func (x *Video) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Video) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *Video) GetShortLink() string {
	if x != nil {
		return x.ShortLink
	}
	return ""
}

type VipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	DueDate int64 `protobuf:"varint,3,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	VipPayType int32 `protobuf:"varint,4,opt,name=vip_pay_type,json=vipPayType,proto3" json:"vip_pay_type,omitempty"`
	ThemeType int32 `protobuf:"varint,5,opt,name=theme_type,json=themeType,proto3" json:"theme_type,omitempty"`
	Label *VipLabel `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	AvatarSubscript int32 `protobuf:"varint,7,opt,name=avatar_subscript,json=avatarSubscript,proto3" json:"avatar_subscript,omitempty"`
	NicknameColor string `protobuf:"bytes,8,opt,name=nickname_color,json=nicknameColor,proto3" json:"nickname_color,omitempty"`
	Role int64 `protobuf:"varint,9,opt,name=role,proto3" json:"role,omitempty"`
	AvatarSubscriptUrl string `protobuf:"bytes,10,opt,name=avatar_subscript_url,json=avatarSubscriptUrl,proto3" json:"avatar_subscript_url,omitempty"`
	TvVipStatus int32 `protobuf:"varint,11,opt,name=tv_vip_status,json=tvVipStatus,proto3" json:"tv_vip_status,omitempty"`
	TvVipPayType int32 `protobuf:"varint,12,opt,name=tv_vip_pay_type,json=tvVipPayType,proto3" json:"tv_vip_pay_type,omitempty"`
}

func (x *VipInfo) Reset() {
	*x = VipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipInfo) ProtoMessage() {}

func (x *VipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipInfo.ProtoReflect.Descriptor instead.
func (*VipInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{118}
}

func (x *VipInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VipInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VipInfo) GetDueDate() int64 {
	if x != nil {
		return x.DueDate
	}
	return 0
}

func (x *VipInfo) GetVipPayType() int32 {
	if x != nil {
		return x.VipPayType
	}
	return 0
}

func (x *VipInfo) GetThemeType() int32 {
	if x != nil {
		return x.ThemeType
	}
	return 0
}

func (x *VipInfo) GetLabel() *VipLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *VipInfo) GetAvatarSubscript() int32 {
	if x != nil {
		return x.AvatarSubscript
	}
	return 0
}

func (x *VipInfo) GetNicknameColor() string {
	if x != nil {
		return x.NicknameColor
	}
	return ""
}

func (x *VipInfo) GetRole() int64 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *VipInfo) GetAvatarSubscriptUrl() string {
	if x != nil {
		return x.AvatarSubscriptUrl
	}
	return ""
}

func (x *VipInfo) GetTvVipStatus() int32 {
	if x != nil {
		return x.TvVipStatus
	}
	return 0
}

func (x *VipInfo) GetTvVipPayType() int32 {
	if x != nil {
		return x.TvVipPayType
	}
	return 0
}

type VipLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	LabelTheme string `protobuf:"bytes,3,opt,name=label_theme,json=labelTheme,proto3" json:"label_theme,omitempty"`
	TextColor string `protobuf:"bytes,4,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	BgStyle int32 `protobuf:"varint,5,opt,name=bg_style,json=bgStyle,proto3" json:"bg_style,omitempty"`
	BgColor string `protobuf:"bytes,6,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	BorderColor string `protobuf:"bytes,7,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`
	UseImgLabel bool `protobuf:"varint,8,opt,name=use_img_label,json=useImgLabel,proto3" json:"use_img_label,omitempty"`
	ImgLabelUriHans string `protobuf:"bytes,9,opt,name=img_label_uri_hans,json=imgLabelUriHans,proto3" json:"img_label_uri_hans,omitempty"`
	ImgLabelUriHant string `protobuf:"bytes,10,opt,name=img_label_uri_hant,json=imgLabelUriHant,proto3" json:"img_label_uri_hant,omitempty"`
	ImgLabelUriHansStatic string `protobuf:"bytes,11,opt,name=img_label_uri_hans_static,json=imgLabelUriHansStatic,proto3" json:"img_label_uri_hans_static,omitempty"`
	ImgLabelUriHantStatic string `protobuf:"bytes,12,opt,name=img_label_uri_hant_static,json=imgLabelUriHantStatic,proto3" json:"img_label_uri_hant_static,omitempty"`
}

func (x *VipLabel) Reset() {
	*x = VipLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLabel) ProtoMessage() {}

func (x *VipLabel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLabel.ProtoReflect.Descriptor instead.
func (*VipLabel) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{119}
}

func (x *VipLabel) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VipLabel) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *VipLabel) GetLabelTheme() string {
	if x != nil {
		return x.LabelTheme
	}
	return ""
}

func (x *VipLabel) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *VipLabel) GetBgStyle() int32 {
	if x != nil {
		return x.BgStyle
	}
	return 0
}

func (x *VipLabel) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *VipLabel) GetBorderColor() string {
	if x != nil {
		return x.BorderColor
	}
	return ""
}

func (x *VipLabel) GetUseImgLabel() bool {
	if x != nil {
		return x.UseImgLabel
	}
	return false
}

func (x *VipLabel) GetImgLabelUriHans() string {
	if x != nil {
		return x.ImgLabelUriHans
	}
	return ""
}

func (x *VipLabel) GetImgLabelUriHant() string {
	if x != nil {
		return x.ImgLabelUriHant
	}
	return ""
}

func (x *VipLabel) GetImgLabelUriHansStatic() string {
	if x != nil {
		return x.ImgLabelUriHansStatic
	}
	return ""
}

func (x *VipLabel) GetImgLabelUriHantStatic() string {
	if x != nil {
		return x.ImgLabelUriHantStatic
	}
	return ""
}

type WatchButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *WatchButton) Reset() {
	*x = WatchButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchButton) ProtoMessage() {}

func (x *WatchButton) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchButton.ProtoReflect.Descriptor instead.
func (*WatchButton) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{120}
}

func (x *WatchButton) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WatchButton) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type WatchedShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch bool `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Num int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	TextSmall string `protobuf:"bytes,3,opt,name=text_small,json=textSmall,proto3" json:"text_small,omitempty"`
	TextLarge string `protobuf:"bytes,4,opt,name=text_large,json=textLarge,proto3" json:"text_large,omitempty"`
	Icon string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	IconLocation string `protobuf:"bytes,6,opt,name=icon_location,json=iconLocation,proto3" json:"icon_location,omitempty"`
	IconWeb string `protobuf:"bytes,7,opt,name=icon_web,json=iconWeb,proto3" json:"icon_web,omitempty"`
}

func (x *WatchedShow) Reset() {
	*x = WatchedShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchedShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchedShow) ProtoMessage() {}

func (x *WatchedShow) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchedShow.ProtoReflect.Descriptor instead.
func (*WatchedShow) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{121}
}

func (x *WatchedShow) GetSwitch() bool {
	if x != nil {
		return x.Switch
	}
	return false
}

func (x *WatchedShow) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WatchedShow) GetTextSmall() string {
	if x != nil {
		return x.TextSmall
	}
	return ""
}

func (x *WatchedShow) GetTextLarge() string {
	if x != nil {
		return x.TextLarge
	}
	return ""
}

func (x *WatchedShow) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *WatchedShow) GetIconLocation() string {
	if x != nil {
		return x.IconLocation
	}
	return ""
}

func (x *WatchedShow) GetIconWeb() string {
	if x != nil {
		return x.IconWeb
	}
	return ""
}

type WatchLater struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
}

func (x *WatchLater) Reset() {
	*x = WatchLater{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchLater) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchLater) ProtoMessage() {}

func (x *WatchLater) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_polymer_app_search_v1_search_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchLater.ProtoReflect.Descriptor instead.
func (*WatchLater) Descriptor() ([]byte, []int) {
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP(), []int{122}
}

func (x *WatchLater) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *WatchLater) GetBvid() string {
	if x != nil {
		return x.Bvid
	}
	return ""
}

var File_bilibili_polymer_app_search_v1_search_proto protoreflect.FileDescriptor

var file_bilibili_polymer_app_search_v1_search_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x30, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x22,
	0xfd, 0x01, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0c,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x4f,
	0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x66, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x22,
	0xb3, 0x02, 0x0a, 0x06, 0x41, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x74,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76,
	0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x32, 0x22, 0x5c, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x67, 0x5f, 0x70, 0x69,
	0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x67, 0x50,
	0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x66, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x67, 0x50, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x22, 0x36, 0x0a, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x06, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x36, 0x0a, 0x0c, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xec, 0x03, 0x0a,
	0x0e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x41, 0x44, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x57, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x0e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x39, 0x0a, 0x03,
	0x76, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x22, 0xe4, 0x01, 0x0a, 0x0a,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x41, 0x44, 0x41, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x22, 0xeb, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6f, 0x0a, 0x0a, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73,
	0x74, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x67, 0x6f, 0x74, 0x6f, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x74, 0x6f,
	0x49, 0x63, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x6f, 0x74, 0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x34, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x22, 0x9c, 0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x69,
	0x78, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e,
	0x31, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x32, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x22, 0x37, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x48, 0x0a, 0x0f, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x22, 0xc4, 0x03, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x57, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x74, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x56, 0x32, 0x12, 0x5c, 0x0a,
	0x14, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x56, 0x32, 0x22, 0x33, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x6e, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x22, 0x31, 0x0a, 0x07, 0x44, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x22, 0xe4, 0x02, 0x0a, 0x09, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x43, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x0a, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x4e, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x43, 0x0a, 0x06, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x31, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0xd0, 0x01,
	0x0a, 0x0c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6a, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x69, 0x22,
	0x8b, 0x01, 0x0a, 0x08, 0x47, 0x6f, 0x74, 0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x99, 0x01,
	0x0a, 0x11, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x72, 0x61, 0x67,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x72,
	0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x53,
	0x74, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x61, 0x73, 0x68, 0x22, 0xd4, 0x01, 0x0a, 0x15, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x5e, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x22, 0xe6, 0x16, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x08, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72,
	0x64, 0x12, 0x4d, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x12, 0x68, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x65,
	0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e,
	0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x77, 0x12, 0x4a, 0x0a, 0x08, 0x6f,
	0x67, 0x76, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x67, 0x76, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07,
	0x6f, 0x67, 0x76, 0x43, 0x61, 0x72, 0x64, 0x12, 0x60, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x67, 0x75,
	0x6d, 0x69, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x67, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x67, 0x75,
	0x6d, 0x69, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x66, 0x69, 0x6e,
	0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x67, 0x76, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x65,
	0x12, 0x49, 0x0a, 0x06, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x65, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x65,
	0x77, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x70, 0x73, 0x43, 0x61, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x02, 0x63, 0x6d, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x02, 0x63, 0x6d, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x0a, 0x75, 0x67, 0x63,
	0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x67, 0x63, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x09, 0x75, 0x67, 0x63, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x57, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x6f, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x6f, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x57, 0x69, 0x6b, 0x69, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5f,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x5f, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x57, 0x0a, 0x0b, 0x6f, 0x67, 0x76, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x67, 0x76,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x67, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x0a, 0x6f, 0x67, 0x76,
	0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x67, 0x76, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x67, 0x76, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x49, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x70, 0x70, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x02, 0x61, 0x76,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x02, 0x61, 0x76, 0x12, 0x4d, 0x0a,
	0x07, 0x62, 0x61, 0x6e, 0x67, 0x75, 0x6d, 0x69, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x6e, 0x67, 0x75, 0x6d, 0x69, 0x43, 0x61, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x67, 0x75, 0x6d, 0x69, 0x12, 0x5e, 0x0a, 0x0e,
	0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x65,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x43, 0x0a, 0x0c, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc7,
	0x02, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x04, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x3e, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x22, 0xbd, 0x03, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4f,
	0x62, 0x6a, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x74,
	0x65, 0x61, 0x6d, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x3f, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x4a, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x22, 0xea, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x22, 0x5d,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x59, 0x0a,
	0x03, 0x4e, 0x61, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x53, 0x0a, 0x0f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x48, 0x0a, 0x06,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x06,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x10, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x22, 0x63, 0x0a, 0x0b, 0x4e, 0x66, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x06, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x4e, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x67, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x22, 0x38, 0x0a,
	0x0e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x4f, 0x67, 0x76, 0x43,
	0x61, 0x72, 0x64, 0x55, 0x49, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x62, 0x6c, 0x75,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67,
	0x61, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x42, 0x6c, 0x75, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x0b, 0x4f, 0x67, 0x76, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x64,
	0x0a, 0x10, 0x4f, 0x67, 0x76, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x75, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x88, 0x04, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x65, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x38, 0x0a,
	0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xfc, 0x02, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x79, 0x49,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x62, 0x6b, 0x67, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6b,
	0x67, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x6b, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x6b, 0x67, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x6e, 0x74, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x6f,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x6e, 0x74, 0x44, 0x61,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x26, 0x0a, 0x0a, 0x52, 0x63, 0x6d, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x97,
	0x02, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x62, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x70, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x22, 0x0a, 0x08, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa8,
	0x01, 0x0a, 0x11, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0x29, 0x0a, 0x0c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x22, 0xb0, 0x03, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x6f, 0x72, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x73, 0x4f, 0x72, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x22, 0x83, 0x06, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x03, 0x6e, 0x61, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x61, 0x76, 0x52, 0x03, 0x6e, 0x61, 0x76, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x48, 0x0a, 0x0a, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x67, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67,
	0x67, 0x52, 0x09, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x70, 0x53, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x45, 0x78, 0x74, 0x72, 0x61, 0x57,
	0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x61,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x42, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x45, 0x78, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b,
	0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x70, 0x70, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x02,
	0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x22, 0xa2, 0x0a, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65,
	0x46, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x72, 0x69, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x61, 0x6e, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73,
	0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x55, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0f, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x66, 0x74,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x4f, 0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x5f, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x66, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x46,
	0x61, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x76, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x76, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x12,
	0x4b, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x03, 0x76, 0x69, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x76, 0x69, 0x70, 0x22, 0xfc, 0x09, 0x0a, 0x11, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x61, 0x6e, 0x67, 0x75, 0x6d, 0x69, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x76,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x43, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x06,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x4d, 0x0a,
	0x0c, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x77, 0x52,
	0x0b, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x4e, 0x0a, 0x0c,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x72, 0x65, 0x12,
	0x51, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x48, 0x0a, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x56, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x22, 0x3e, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xd5, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x22,
	0xd0, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x53, 0x74,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe9, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x41, 0x0a, 0x08, 0x61, 0x76, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x61, 0x76, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x31, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x32, 0x22, 0x9a,
	0x01, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x22, 0x2d,
	0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a,
	0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x11,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x52, 0x05, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x42, 0x0a,
	0x08, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x07, 0x64, 0x79, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0xb0, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x66, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x67, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x8f, 0x10, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x6f, 0x74, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x47, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x31, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x32, 0x12, 0x3f, 0x0a, 0x07, 0x75,
	0x70, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x06, 0x75, 0x70, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x55, 0x72, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x46, 0x61, 0x76,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x74,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x52, 0x0a, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0c,
	0x74, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x4b, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x74, 0x68, 0x72,
	0x65, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x61, 0x0a, 0x13, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x52, 0x11, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x12, 0x55, 0x0a, 0x0b, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x56,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x67, 0x6f, 0x74, 0x6f,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x74,
	0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x6f, 0x74, 0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x69, 0x64, 0x65, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x76,
	0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x22, 0xe7, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x11, 0x6c, 0x69, 0x6b, 0x65, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x16,
	0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6b, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x14, 0x64, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0xc0, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x4b, 0x0a, 0x0b, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x0a, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4c,
	0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x32, 0x12,
	0x62, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x72, 0x63,
	0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x5a, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x12, 0x53, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x32, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x69, 0x78, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x76, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11,
	0x73, 0x75, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x4b, 0x65, 0x79, 0x57,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4f, 0x67, 0x76, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x31, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x69, 0x22, 0x98, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x67, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x4e, 0x0a,
	0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x48, 0x0a, 0x09, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x56, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x56, 0x32,
	0x22, 0xda, 0x04, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x67, 0x76, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x6f, 0x67, 0x76, 0x5f, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6f, 0x67, 0x76,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x6f, 0x67, 0x76, 0x5f, 0x63, 0x6c,
	0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x67, 0x76, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6f, 0x67, 0x76, 0x43,
	0x6c, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x67, 0x76, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x67, 0x76, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x78, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x76, 0x32,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x56, 0x32, 0x22, 0xb6, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x67, 0x76, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x67, 0x76, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xdd, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x67, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x49,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x6f,
	0x67, 0x76, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x67, 0x76, 0x43, 0x61, 0x72, 0x64, 0x55, 0x49, 0x52, 0x09, 0x6f, 0x67, 0x76,
	0x43, 0x61, 0x72, 0x64, 0x55, 0x69, 0x22, 0xe9, 0x04, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x11,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x75, 0x67, 0x63, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x75,
	0x67, 0x63, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x22, 0xdc, 0x04, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x57, 0x69, 0x6b, 0x69, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x75,
	0x67, 0x63, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x75, 0x67, 0x63, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5a, 0x0a, 0x10,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc0, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x61, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x88, 0x01, 0x0a,
	0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x57, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x5f, 0x72, 0x65, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0a, 0x6e, 0x65,
	0x77, 0x52, 0x65, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x52, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x52, 0x65, 0x63, 0x54, 0x61, 0x67, 0x73, 0x56, 0x32, 0x22, 0x6e, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x8c, 0x03, 0x0a, 0x0f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x70, 0x12, 0x4c, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x48, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x62,
	0x6a, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8c, 0x04, 0x0a, 0x15, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f,
	0x70, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12,
	0x48, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x4f, 0x62, 0x6a, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a,
	0x0e, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x69, 0x70, 0x73, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4e,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x8b, 0x06, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x6f, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x6f, 0x70,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x47, 0x61,
	0x6d, 0x65, 0x55, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x75, 0x67, 0x63, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x75, 0x67, 0x63, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x51, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69,
	0x76, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x67, 0x63,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x75, 0x67, 0x63, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x75, 0x67, 0x63, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x9c, 0x06, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x57,
	0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x66, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x4f, 0x0a, 0x0d, 0x6e, 0x66, 0x74,
	0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x66, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0b, 0x6e,
	0x66, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x76,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x13, 0x0a,
	0x05, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x55, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x44, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x3e, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x22, 0xce, 0x07, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x0b,
	0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x31, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x32, 0x12, 0x4b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x52, 0x65,
	0x63, 0x54, 0x61, 0x67, 0x73, 0x56, 0x32, 0x12, 0x48, 0x0a, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x5f, 0x76, 0x32, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x56,
	0x32, 0x22, 0x58, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x74, 0x0a, 0x0f, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x73, 0x22, 0xb1, 0x04, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x76, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x76, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x65, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xdb, 0x02, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x70, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d,
	0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x65, 0x69, 0x62, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x4d, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x71, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x71, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x68, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x77, 0x68, 0x61, 0x74, 0x73, 0x41, 0x70, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x68, 0x6f,
	0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x95, 0x02, 0x0a, 0x0f,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x63, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c,
	0x69, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x51, 0x0a, 0x07, 0x54, 0x61, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x32, 0x0a, 0x0a,
	0x54, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x22, 0x31, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x22, 0x51, 0x0a, 0x05, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x22, 0x4a, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x32, 0x12, 0x56, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xda, 0x02, 0x0a, 0x0c, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x56, 0x34, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x72,
	0x22, 0x86, 0x02, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x49, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x75,
	0x73, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x61, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e,
	0x42, 0x6c, 0x75, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x4f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6b, 0x0a, 0x06, 0x55, 0x70, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x70, 0x46, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x05, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x05, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x76, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xb4, 0x03, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f,
	0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x76, 0x69, 0x70, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x76, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x76, 0x56, 0x69, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x76, 0x5f, 0x76, 0x69, 0x70, 0x5f,
	0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x76, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x03, 0x0a,
	0x08, 0x56, 0x69, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x49, 0x6d, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2b,
	0x0a, 0x12, 0x69, 0x6d, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x5f,
	0x68, 0x61, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x67, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x55, 0x72, 0x69, 0x48, 0x61, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x69,
	0x6d, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x68, 0x61, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x67, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x55, 0x72, 0x69, 0x48, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x6d, 0x67, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x68, 0x61, 0x6e, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6d, 0x67,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x55, 0x72, 0x69, 0x48, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x6d, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x75, 0x72, 0x69, 0x5f, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6d, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x55,
	0x72, 0x69, 0x48, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x22, 0x37, 0x0a, 0x0b,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xc9, 0x01, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x77,
	0x65, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x57, 0x65,
	0x62, 0x22, 0x32, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x76, 0x69, 0x64, 0x2a, 0xa7, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x2a,
	0x5c, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x41,
	0x4e, 0x4d, 0x41, 0x4b, 0x55, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x91, 0x01,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x46,
	0x41, 0x4e, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x4e, 0x53, 0x5f,
	0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x43,
	0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x10,
	0x04, 0x2a, 0x44, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x32, 0xed, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x70, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12,
	0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x32,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x58, 0x69, 0x61, 0x6f, 0x4d, 0x69, 0x6b, 0x75, 0x30, 0x31,
	0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61,
	0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x70,
	0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bilibili_polymer_app_search_v1_search_proto_rawDescOnce sync.Once
	file_bilibili_polymer_app_search_v1_search_proto_rawDescData = file_bilibili_polymer_app_search_v1_search_proto_rawDesc
)

func file_bilibili_polymer_app_search_v1_search_proto_rawDescGZIP() []byte {
	file_bilibili_polymer_app_search_v1_search_proto_rawDescOnce.Do(func() {
		file_bilibili_polymer_app_search_v1_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_polymer_app_search_v1_search_proto_rawDescData)
	})
	return file_bilibili_polymer_app_search_v1_search_proto_rawDescData
}

var file_bilibili_polymer_app_search_v1_search_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bilibili_polymer_app_search_v1_search_proto_msgTypes = make([]protoimpl.MessageInfo, 126)
var file_bilibili_polymer_app_search_v1_search_proto_goTypes = []interface{}{
	(CategorySort)(0),                     // 0: bilibili.polymer.app.search.v1.CategorySort
	(Sort)(0),                             // 1: bilibili.polymer.app.search.v1.Sort
	(UserSort)(0),                         // 2: bilibili.polymer.app.search.v1.UserSort
	(UserType)(0),                         // 3: bilibili.polymer.app.search.v1.UserType
	(*Args)(nil),                          // 4: bilibili.polymer.app.search.v1.Args
	(*Avatar)(nil),                        // 5: bilibili.polymer.app.search.v1.Avatar
	(*AvItem)(nil),                        // 6: bilibili.polymer.app.search.v1.AvItem
	(*Background)(nil),                    // 7: bilibili.polymer.app.search.v1.Background
	(*Badge)(nil),                         // 8: bilibili.polymer.app.search.v1.Badge
	(*Badge2)(nil),                        // 9: bilibili.polymer.app.search.v1.Badge2
	(*BottomButton)(nil),                  // 10: bilibili.polymer.app.search.v1.BottomButton
	(*BrandADAccount)(nil),                // 11: bilibili.polymer.app.search.v1.BrandADAccount
	(*BrandADArc)(nil),                    // 12: bilibili.polymer.app.search.v1.BrandADArc
	(*Button)(nil),                        // 13: bilibili.polymer.app.search.v1.Button
	(*ButtonMeta)(nil),                    // 14: bilibili.polymer.app.search.v1.ButtonMeta
	(*CardBusinessBadge)(nil),             // 15: bilibili.polymer.app.search.v1.CardBusinessBadge
	(*ChannelLabel)(nil),                  // 16: bilibili.polymer.app.search.v1.ChannelLabel
	(*ChannelMixedItem)(nil),              // 17: bilibili.polymer.app.search.v1.ChannelMixedItem
	(*CheckMore)(nil),                     // 18: bilibili.polymer.app.search.v1.CheckMore
	(*CloudGameParams)(nil),               // 19: bilibili.polymer.app.search.v1.CloudGameParams
	(*DetailsRelationItem)(nil),           // 20: bilibili.polymer.app.search.v1.DetailsRelationItem
	(*DislikeReason)(nil),                 // 21: bilibili.polymer.app.search.v1.DislikeReason
	(*DisplayOption)(nil),                 // 22: bilibili.polymer.app.search.v1.DisplayOption
	(*DyTopic)(nil),                       // 23: bilibili.polymer.app.search.v1.DyTopic
	(*EasterEgg)(nil),                     // 24: bilibili.polymer.app.search.v1.EasterEgg
	(*Episode)(nil),                       // 25: bilibili.polymer.app.search.v1.Episode
	(*EpisodeNew)(nil),                    // 26: bilibili.polymer.app.search.v1.EpisodeNew
	(*ExtraLink)(nil),                     // 27: bilibili.polymer.app.search.v1.ExtraLink
	(*FollowButton)(nil),                  // 28: bilibili.polymer.app.search.v1.FollowButton
	(*FullTextResult)(nil),                // 29: bilibili.polymer.app.search.v1.FullTextResult
	(*GotoIcon)(nil),                      // 30: bilibili.polymer.app.search.v1.GotoIcon
	(*InlineProgressBar)(nil),             // 31: bilibili.polymer.app.search.v1.InlineProgressBar
	(*InlineThreePointPanel)(nil),         // 32: bilibili.polymer.app.search.v1.InlineThreePointPanel
	(*Item)(nil),                          // 33: bilibili.polymer.app.search.v1.Item
	(*LikeResource)(nil),                  // 34: bilibili.polymer.app.search.v1.LikeResource
	(*LiveBadgeResource)(nil),             // 35: bilibili.polymer.app.search.v1.LiveBadgeResource
	(*Mask)(nil),                          // 36: bilibili.polymer.app.search.v1.Mask
	(*MatchInfoObj)(nil),                  // 37: bilibili.polymer.app.search.v1.MatchInfoObj
	(*MatchItem)(nil),                     // 38: bilibili.polymer.app.search.v1.MatchItem
	(*MatchTeam)(nil),                     // 39: bilibili.polymer.app.search.v1.MatchTeam
	(*Nav)(nil),                           // 40: bilibili.polymer.app.search.v1.Nav
	(*Navigation)(nil),                    // 41: bilibili.polymer.app.search.v1.Navigation
	(*NavigationButton)(nil),              // 42: bilibili.polymer.app.search.v1.NavigationButton
	(*NftFaceIcon)(nil),                   // 43: bilibili.polymer.app.search.v1.NftFaceIcon
	(*Notice)(nil),                        // 44: bilibili.polymer.app.search.v1.Notice
	(*OfficialVerify)(nil),                // 45: bilibili.polymer.app.search.v1.OfficialVerify
	(*OgvCardUI)(nil),                     // 46: bilibili.polymer.app.search.v1.OgvCardUI
	(*OgvClipInfo)(nil),                   // 47: bilibili.polymer.app.search.v1.OgvClipInfo
	(*OgvRecommendWord)(nil),              // 48: bilibili.polymer.app.search.v1.OgvRecommendWord
	(*PediaCover)(nil),                    // 49: bilibili.polymer.app.search.v1.PediaCover
	(*PlayerArgs)(nil),                    // 50: bilibili.polymer.app.search.v1.PlayerArgs
	(*PlayerWidget)(nil),                  // 51: bilibili.polymer.app.search.v1.PlayerWidget
	(*RankInfo)(nil),                      // 52: bilibili.polymer.app.search.v1.RankInfo
	(*RcmdReason)(nil),                    // 53: bilibili.polymer.app.search.v1.RcmdReason
	(*ReasonStyle)(nil),                   // 54: bilibili.polymer.app.search.v1.ReasonStyle
	(*RecommendWord)(nil),                 // 55: bilibili.polymer.app.search.v1.RecommendWord
	(*Relation)(nil),                      // 56: bilibili.polymer.app.search.v1.Relation
	(*RightTopLiveBadge)(nil),             // 57: bilibili.polymer.app.search.v1.RightTopLiveBadge
	(*SearchAdCard)(nil),                  // 58: bilibili.polymer.app.search.v1.SearchAdCard
	(*SearchAllRequest)(nil),              // 59: bilibili.polymer.app.search.v1.SearchAllRequest
	(*SearchAllResponse)(nil),             // 60: bilibili.polymer.app.search.v1.SearchAllResponse
	(*SearchArticleCard)(nil),             // 61: bilibili.polymer.app.search.v1.SearchArticleCard
	(*SearchAuthorNewCard)(nil),           // 62: bilibili.polymer.app.search.v1.SearchAuthorNewCard
	(*SearchBangumiCard)(nil),             // 63: bilibili.polymer.app.search.v1.SearchBangumiCard
	(*SearchBannerCard)(nil),              // 64: bilibili.polymer.app.search.v1.SearchBannerCard
	(*SearchByTypeRequest)(nil),           // 65: bilibili.polymer.app.search.v1.SearchByTypeRequest
	(*SearchByTypeResponse)(nil),          // 66: bilibili.polymer.app.search.v1.SearchByTypeResponse
	(*SearchCollectionCard)(nil),          // 67: bilibili.polymer.app.search.v1.SearchCollectionCard
	(*SearchComicCard)(nil),               // 68: bilibili.polymer.app.search.v1.SearchComicCard
	(*SearchComicInfo)(nil),               // 69: bilibili.polymer.app.search.v1.SearchComicInfo
	(*SearchComicRequest)(nil),            // 70: bilibili.polymer.app.search.v1.SearchComicRequest
	(*SearchComicResponse)(nil),           // 71: bilibili.polymer.app.search.v1.SearchComicResponse
	(*SearchDynamicCard)(nil),             // 72: bilibili.polymer.app.search.v1.SearchDynamicCard
	(*SearchGameCard)(nil),                // 73: bilibili.polymer.app.search.v1.SearchGameCard
	(*SearchInlineData)(nil),              // 74: bilibili.polymer.app.search.v1.SearchInlineData
	(*SearchLikeButtonItem)(nil),          // 75: bilibili.polymer.app.search.v1.SearchLikeButtonItem
	(*SearchLiveCard)(nil),                // 76: bilibili.polymer.app.search.v1.SearchLiveCard
	(*SearchLiveInlineCard)(nil),          // 77: bilibili.polymer.app.search.v1.SearchLiveInlineCard
	(*SearchNewChannelCard)(nil),          // 78: bilibili.polymer.app.search.v1.SearchNewChannelCard
	(*SearchNoResultSuggestWordCard)(nil), // 79: bilibili.polymer.app.search.v1.SearchNoResultSuggestWordCard
	(*SearchOgvCard)(nil),                 // 80: bilibili.polymer.app.search.v1.SearchOgvCard
	(*SearchOgvChannelCard)(nil),          // 81: bilibili.polymer.app.search.v1.SearchOgvChannelCard
	(*SearchOgvInlineCard)(nil),           // 82: bilibili.polymer.app.search.v1.SearchOgvInlineCard
	(*SearchOgvRecommendCard)(nil),        // 83: bilibili.polymer.app.search.v1.SearchOgvRecommendCard
	(*SearchOgvRelationCard)(nil),         // 84: bilibili.polymer.app.search.v1.SearchOgvRelationCard
	(*SearchOlympicGameCard)(nil),         // 85: bilibili.polymer.app.search.v1.SearchOlympicGameCard
	(*SearchOlympicWikiCard)(nil),         // 86: bilibili.polymer.app.search.v1.SearchOlympicWikiCard
	(*SearchPediaCard)(nil),               // 87: bilibili.polymer.app.search.v1.SearchPediaCard
	(*SearchPurchaseCard)(nil),            // 88: bilibili.polymer.app.search.v1.SearchPurchaseCard
	(*SearchRecommendTipCard)(nil),        // 89: bilibili.polymer.app.search.v1.SearchRecommendTipCard
	(*SearchRecommendWordCard)(nil),       // 90: bilibili.polymer.app.search.v1.SearchRecommendWordCard
	(*SearchSpecialCard)(nil),             // 91: bilibili.polymer.app.search.v1.SearchSpecialCard
	(*SearchSpecialGuideCard)(nil),        // 92: bilibili.polymer.app.search.v1.SearchSpecialGuideCard
	(*SearchSportCard)(nil),               // 93: bilibili.polymer.app.search.v1.SearchSportCard
	(*SearchSportInlineCard)(nil),         // 94: bilibili.polymer.app.search.v1.SearchSportInlineCard
	(*SearchTipsCard)(nil),                // 95: bilibili.polymer.app.search.v1.SearchTipsCard
	(*SearchTopGameCard)(nil),             // 96: bilibili.polymer.app.search.v1.SearchTopGameCard
	(*SearchUgcInlineCard)(nil),           // 97: bilibili.polymer.app.search.v1.SearchUgcInlineCard
	(*SearchUpperCard)(nil),               // 98: bilibili.polymer.app.search.v1.SearchUpperCard
	(*SearchVideoCard)(nil),               // 99: bilibili.polymer.app.search.v1.SearchVideoCard
	(*Share)(nil),                         // 100: bilibili.polymer.app.search.v1.Share
	(*ShareButtonItem)(nil),               // 101: bilibili.polymer.app.search.v1.ShareButtonItem
	(*SharePlane)(nil),                    // 102: bilibili.polymer.app.search.v1.SharePlane
	(*ShareTo)(nil),                       // 103: bilibili.polymer.app.search.v1.ShareTo
	(*Space)(nil),                         // 104: bilibili.polymer.app.search.v1.Space
	(*SportsMatchItem)(nil),               // 105: bilibili.polymer.app.search.v1.SportsMatchItem
	(*Stat)(nil),                          // 106: bilibili.polymer.app.search.v1.Stat
	(*TabInfo)(nil),                       // 107: bilibili.polymer.app.search.v1.TabInfo
	(*TextButton)(nil),                    // 108: bilibili.polymer.app.search.v1.TextButton
	(*TextLabel)(nil),                     // 109: bilibili.polymer.app.search.v1.TextLabel
	(*Texts)(nil),                         // 110: bilibili.polymer.app.search.v1.Texts
	(*ThreePoint)(nil),                    // 111: bilibili.polymer.app.search.v1.ThreePoint
	(*ThreePoint2)(nil),                   // 112: bilibili.polymer.app.search.v1.ThreePoint2
	(*ThreePointV2)(nil),                  // 113: bilibili.polymer.app.search.v1.ThreePointV2
	(*ThreePointV3)(nil),                  // 114: bilibili.polymer.app.search.v1.ThreePointV3
	(*ThreePointV4)(nil),                  // 115: bilibili.polymer.app.search.v1.ThreePointV4
	(*TopGameUI)(nil),                     // 116: bilibili.polymer.app.search.v1.TopGameUI
	(*TrafficConfig)(nil),                 // 117: bilibili.polymer.app.search.v1.TrafficConfig
	(*TrafficConfigOption)(nil),           // 118: bilibili.polymer.app.search.v1.TrafficConfigOption
	(*UpArgs)(nil),                        // 119: bilibili.polymer.app.search.v1.UpArgs
	(*Upper)(nil),                         // 120: bilibili.polymer.app.search.v1.Upper
	(*Video)(nil),                         // 121: bilibili.polymer.app.search.v1.Video
	(*VipInfo)(nil),                       // 122: bilibili.polymer.app.search.v1.VipInfo
	(*VipLabel)(nil),                      // 123: bilibili.polymer.app.search.v1.VipLabel
	(*WatchButton)(nil),                   // 124: bilibili.polymer.app.search.v1.WatchButton
	(*WatchedShow)(nil),                   // 125: bilibili.polymer.app.search.v1.WatchedShow
	(*WatchLater)(nil),                    // 126: bilibili.polymer.app.search.v1.WatchLater
	nil,                                   // 127: bilibili.polymer.app.search.v1.FollowButton.TextsEntry
	nil,                                   // 128: bilibili.polymer.app.search.v1.SearchAllResponse.AnnotationEntry
	nil,                                   // 129: bilibili.polymer.app.search.v1.SearchByTypeResponse.AnnotationEntry
	(*pagination.Pagination)(nil),         // 130: bilibili.pagination.Pagination
	(*v1.PlayerArgs)(nil),                 // 131: bilibili.app.archive.middleware.v1.PlayerArgs
	(*pagination.PaginationReply)(nil),    // 132: bilibili.pagination.PaginationReply
}
var file_bilibili_polymer_app_search_v1_search_proto_depIdxs = []int32{
	43,  // 0: bilibili.polymer.app.search.v1.Avatar.nft_face_icon:type_name -> bilibili.polymer.app.search.v1.NftFaceIcon
	56,  // 1: bilibili.polymer.app.search.v1.BrandADAccount.relation:type_name -> bilibili.polymer.app.search.v1.Relation
	45,  // 2: bilibili.polymer.app.search.v1.BrandADAccount.official_verify:type_name -> bilibili.polymer.app.search.v1.OfficialVerify
	122, // 3: bilibili.polymer.app.search.v1.BrandADAccount.vip:type_name -> bilibili.polymer.app.search.v1.VipInfo
	56,  // 4: bilibili.polymer.app.search.v1.Button.relation:type_name -> bilibili.polymer.app.search.v1.Relation
	30,  // 5: bilibili.polymer.app.search.v1.CardBusinessBadge.goto_icon:type_name -> bilibili.polymer.app.search.v1.GotoIcon
	54,  // 6: bilibili.polymer.app.search.v1.CardBusinessBadge.badge_style:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	9,   // 7: bilibili.polymer.app.search.v1.ChannelMixedItem.badge:type_name -> bilibili.polymer.app.search.v1.Badge2
	54,  // 8: bilibili.polymer.app.search.v1.DetailsRelationItem.cover_badge_style:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	54,  // 9: bilibili.polymer.app.search.v1.DetailsRelationItem.cover_badge_style_v2:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	54,  // 10: bilibili.polymer.app.search.v1.Episode.badges:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	54,  // 11: bilibili.polymer.app.search.v1.EpisodeNew.badges:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	127, // 12: bilibili.polymer.app.search.v1.FollowButton.texts:type_name -> bilibili.polymer.app.search.v1.FollowButton.TextsEntry
	101, // 13: bilibili.polymer.app.search.v1.InlineThreePointPanel.functional_buttons:type_name -> bilibili.polymer.app.search.v1.ShareButtonItem
	91,  // 14: bilibili.polymer.app.search.v1.Item.special:type_name -> bilibili.polymer.app.search.v1.SearchSpecialCard
	61,  // 15: bilibili.polymer.app.search.v1.Item.article:type_name -> bilibili.polymer.app.search.v1.SearchArticleCard
	64,  // 16: bilibili.polymer.app.search.v1.Item.banner:type_name -> bilibili.polymer.app.search.v1.SearchBannerCard
	76,  // 17: bilibili.polymer.app.search.v1.Item.live:type_name -> bilibili.polymer.app.search.v1.SearchLiveCard
	73,  // 18: bilibili.polymer.app.search.v1.Item.game:type_name -> bilibili.polymer.app.search.v1.SearchGameCard
	88,  // 19: bilibili.polymer.app.search.v1.Item.purchase:type_name -> bilibili.polymer.app.search.v1.SearchPurchaseCard
	90,  // 20: bilibili.polymer.app.search.v1.Item.recommend_word:type_name -> bilibili.polymer.app.search.v1.SearchRecommendWordCard
	72,  // 21: bilibili.polymer.app.search.v1.Item.dynamic:type_name -> bilibili.polymer.app.search.v1.SearchDynamicCard
	79,  // 22: bilibili.polymer.app.search.v1.Item.suggest_keyword:type_name -> bilibili.polymer.app.search.v1.SearchNoResultSuggestWordCard
	92,  // 23: bilibili.polymer.app.search.v1.Item.special_guide:type_name -> bilibili.polymer.app.search.v1.SearchSpecialGuideCard
	68,  // 24: bilibili.polymer.app.search.v1.Item.comic:type_name -> bilibili.polymer.app.search.v1.SearchComicCard
	78,  // 25: bilibili.polymer.app.search.v1.Item.channel_new:type_name -> bilibili.polymer.app.search.v1.SearchNewChannelCard
	80,  // 26: bilibili.polymer.app.search.v1.Item.ogv_card:type_name -> bilibili.polymer.app.search.v1.SearchOgvCard
	84,  // 27: bilibili.polymer.app.search.v1.Item.bangumi_relates:type_name -> bilibili.polymer.app.search.v1.SearchOgvRelationCard
	83,  // 28: bilibili.polymer.app.search.v1.Item.find_more:type_name -> bilibili.polymer.app.search.v1.SearchOgvRecommendCard
	93,  // 29: bilibili.polymer.app.search.v1.Item.esport:type_name -> bilibili.polymer.app.search.v1.SearchSportCard
	62,  // 30: bilibili.polymer.app.search.v1.Item.author_new:type_name -> bilibili.polymer.app.search.v1.SearchAuthorNewCard
	95,  // 31: bilibili.polymer.app.search.v1.Item.tips:type_name -> bilibili.polymer.app.search.v1.SearchTipsCard
	58,  // 32: bilibili.polymer.app.search.v1.Item.cm:type_name -> bilibili.polymer.app.search.v1.SearchAdCard
	87,  // 33: bilibili.polymer.app.search.v1.Item.pedia_card:type_name -> bilibili.polymer.app.search.v1.SearchPediaCard
	97,  // 34: bilibili.polymer.app.search.v1.Item.ugc_inline:type_name -> bilibili.polymer.app.search.v1.SearchUgcInlineCard
	77,  // 35: bilibili.polymer.app.search.v1.Item.live_inline:type_name -> bilibili.polymer.app.search.v1.SearchLiveInlineCard
	96,  // 36: bilibili.polymer.app.search.v1.Item.top_game:type_name -> bilibili.polymer.app.search.v1.SearchTopGameCard
	85,  // 37: bilibili.polymer.app.search.v1.Item.sports:type_name -> bilibili.polymer.app.search.v1.SearchOlympicGameCard
	86,  // 38: bilibili.polymer.app.search.v1.Item.pedia_card_inline:type_name -> bilibili.polymer.app.search.v1.SearchOlympicWikiCard
	89,  // 39: bilibili.polymer.app.search.v1.Item.recommend_tips:type_name -> bilibili.polymer.app.search.v1.SearchRecommendTipCard
	67,  // 40: bilibili.polymer.app.search.v1.Item.collection_card:type_name -> bilibili.polymer.app.search.v1.SearchCollectionCard
	81,  // 41: bilibili.polymer.app.search.v1.Item.ogv_channel:type_name -> bilibili.polymer.app.search.v1.SearchOgvChannelCard
	82,  // 42: bilibili.polymer.app.search.v1.Item.ogv_inline:type_name -> bilibili.polymer.app.search.v1.SearchOgvInlineCard
	98,  // 43: bilibili.polymer.app.search.v1.Item.author:type_name -> bilibili.polymer.app.search.v1.SearchUpperCard
	99,  // 44: bilibili.polymer.app.search.v1.Item.av:type_name -> bilibili.polymer.app.search.v1.SearchVideoCard
	63,  // 45: bilibili.polymer.app.search.v1.Item.bangumi:type_name -> bilibili.polymer.app.search.v1.SearchBangumiCard
	94,  // 46: bilibili.polymer.app.search.v1.Item.esports_inline:type_name -> bilibili.polymer.app.search.v1.SearchSportInlineCard
	5,   // 47: bilibili.polymer.app.search.v1.Mask.avatar:type_name -> bilibili.polymer.app.search.v1.Avatar
	13,  // 48: bilibili.polymer.app.search.v1.Mask.button:type_name -> bilibili.polymer.app.search.v1.Button
	39,  // 49: bilibili.polymer.app.search.v1.MatchInfoObj.team1:type_name -> bilibili.polymer.app.search.v1.MatchTeam
	39,  // 50: bilibili.polymer.app.search.v1.MatchInfoObj.team2:type_name -> bilibili.polymer.app.search.v1.MatchTeam
	38,  // 51: bilibili.polymer.app.search.v1.MatchInfoObj.match_label:type_name -> bilibili.polymer.app.search.v1.MatchItem
	38,  // 52: bilibili.polymer.app.search.v1.MatchInfoObj.match_time:type_name -> bilibili.polymer.app.search.v1.MatchItem
	38,  // 53: bilibili.polymer.app.search.v1.MatchInfoObj.match_button:type_name -> bilibili.polymer.app.search.v1.MatchItem
	110, // 54: bilibili.polymer.app.search.v1.MatchItem.texts:type_name -> bilibili.polymer.app.search.v1.Texts
	41,  // 55: bilibili.polymer.app.search.v1.Navigation.children:type_name -> bilibili.polymer.app.search.v1.Navigation
	41,  // 56: bilibili.polymer.app.search.v1.Navigation.inline_children:type_name -> bilibili.polymer.app.search.v1.Navigation
	42,  // 57: bilibili.polymer.app.search.v1.Navigation.button:type_name -> bilibili.polymer.app.search.v1.NavigationButton
	35,  // 58: bilibili.polymer.app.search.v1.RightTopLiveBadge.in_live:type_name -> bilibili.polymer.app.search.v1.LiveBadgeResource
	130, // 59: bilibili.polymer.app.search.v1.SearchAllRequest.pagination:type_name -> bilibili.pagination.Pagination
	131, // 60: bilibili.polymer.app.search.v1.SearchAllRequest.player_args:type_name -> bilibili.app.archive.middleware.v1.PlayerArgs
	40,  // 61: bilibili.polymer.app.search.v1.SearchAllResponse.nav:type_name -> bilibili.polymer.app.search.v1.Nav
	33,  // 62: bilibili.polymer.app.search.v1.SearchAllResponse.item:type_name -> bilibili.polymer.app.search.v1.Item
	24,  // 63: bilibili.polymer.app.search.v1.SearchAllResponse.easter_egg:type_name -> bilibili.polymer.app.search.v1.EasterEgg
	132, // 64: bilibili.polymer.app.search.v1.SearchAllResponse.pagination:type_name -> bilibili.pagination.PaginationReply
	22,  // 65: bilibili.polymer.app.search.v1.SearchAllResponse.app_display_option:type_name -> bilibili.polymer.app.search.v1.DisplayOption
	128, // 66: bilibili.polymer.app.search.v1.SearchAllResponse.annotation:type_name -> bilibili.polymer.app.search.v1.SearchAllResponse.AnnotationEntry
	56,  // 67: bilibili.polymer.app.search.v1.SearchAuthorNewCard.relation:type_name -> bilibili.polymer.app.search.v1.Relation
	45,  // 68: bilibili.polymer.app.search.v1.SearchAuthorNewCard.official_verify:type_name -> bilibili.polymer.app.search.v1.OfficialVerify
	43,  // 69: bilibili.polymer.app.search.v1.SearchAuthorNewCard.nft_face_icon:type_name -> bilibili.polymer.app.search.v1.NftFaceIcon
	7,   // 70: bilibili.polymer.app.search.v1.SearchAuthorNewCard.background:type_name -> bilibili.polymer.app.search.v1.Background
	104, // 71: bilibili.polymer.app.search.v1.SearchAuthorNewCard.space:type_name -> bilibili.polymer.app.search.v1.Space
	6,   // 72: bilibili.polymer.app.search.v1.SearchAuthorNewCard.av_items:type_name -> bilibili.polymer.app.search.v1.AvItem
	44,  // 73: bilibili.polymer.app.search.v1.SearchAuthorNewCard.notice:type_name -> bilibili.polymer.app.search.v1.Notice
	102, // 74: bilibili.polymer.app.search.v1.SearchAuthorNewCard.share_plane:type_name -> bilibili.polymer.app.search.v1.SharePlane
	74,  // 75: bilibili.polymer.app.search.v1.SearchAuthorNewCard.inline_live:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	111, // 76: bilibili.polymer.app.search.v1.SearchAuthorNewCard.three_point:type_name -> bilibili.polymer.app.search.v1.ThreePoint
	122, // 77: bilibili.polymer.app.search.v1.SearchAuthorNewCard.vip:type_name -> bilibili.polymer.app.search.v1.VipInfo
	25,  // 78: bilibili.polymer.app.search.v1.SearchBangumiCard.episodes:type_name -> bilibili.polymer.app.search.v1.Episode
	54,  // 79: bilibili.polymer.app.search.v1.SearchBangumiCard.badges:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	26,  // 80: bilibili.polymer.app.search.v1.SearchBangumiCard.episodes_new:type_name -> bilibili.polymer.app.search.v1.EpisodeNew
	124, // 81: bilibili.polymer.app.search.v1.SearchBangumiCard.watch_button:type_name -> bilibili.polymer.app.search.v1.WatchButton
	18,  // 82: bilibili.polymer.app.search.v1.SearchBangumiCard.check_more:type_name -> bilibili.polymer.app.search.v1.CheckMore
	28,  // 83: bilibili.polymer.app.search.v1.SearchBangumiCard.follow_button:type_name -> bilibili.polymer.app.search.v1.FollowButton
	54,  // 84: bilibili.polymer.app.search.v1.SearchBangumiCard.style_label:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	54,  // 85: bilibili.polymer.app.search.v1.SearchBangumiCard.badges_v2:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	130, // 86: bilibili.polymer.app.search.v1.SearchByTypeRequest.pagination:type_name -> bilibili.pagination.Pagination
	131, // 87: bilibili.polymer.app.search.v1.SearchByTypeRequest.player_args:type_name -> bilibili.app.archive.middleware.v1.PlayerArgs
	33,  // 88: bilibili.polymer.app.search.v1.SearchByTypeResponse.items:type_name -> bilibili.polymer.app.search.v1.Item
	132, // 89: bilibili.polymer.app.search.v1.SearchByTypeResponse.pagination:type_name -> bilibili.pagination.PaginationReply
	129, // 90: bilibili.polymer.app.search.v1.SearchByTypeResponse.annotation:type_name -> bilibili.polymer.app.search.v1.SearchByTypeResponse.AnnotationEntry
	6,   // 91: bilibili.polymer.app.search.v1.SearchCollectionCard.av_items:type_name -> bilibili.polymer.app.search.v1.AvItem
	10,  // 92: bilibili.polymer.app.search.v1.SearchCollectionCard.bottom_button:type_name -> bilibili.polymer.app.search.v1.BottomButton
	68,  // 93: bilibili.polymer.app.search.v1.SearchComicInfo.comic:type_name -> bilibili.polymer.app.search.v1.SearchComicCard
	69,  // 94: bilibili.polymer.app.search.v1.SearchComicResponse.items:type_name -> bilibili.polymer.app.search.v1.SearchComicInfo
	120, // 95: bilibili.polymer.app.search.v1.SearchDynamicCard.upper:type_name -> bilibili.polymer.app.search.v1.Upper
	106, // 96: bilibili.polymer.app.search.v1.SearchDynamicCard.stat:type_name -> bilibili.polymer.app.search.v1.Stat
	23,  // 97: bilibili.polymer.app.search.v1.SearchDynamicCard.dy_topic:type_name -> bilibili.polymer.app.search.v1.DyTopic
	52,  // 98: bilibili.polymer.app.search.v1.SearchGameCard.rank_info:type_name -> bilibili.polymer.app.search.v1.RankInfo
	19,  // 99: bilibili.polymer.app.search.v1.SearchGameCard.cloud_game_params:type_name -> bilibili.polymer.app.search.v1.CloudGameParams
	50,  // 100: bilibili.polymer.app.search.v1.SearchInlineData.player_args:type_name -> bilibili.polymer.app.search.v1.PlayerArgs
	4,   // 101: bilibili.polymer.app.search.v1.SearchInlineData.args:type_name -> bilibili.polymer.app.search.v1.Args
	119, // 102: bilibili.polymer.app.search.v1.SearchInlineData.up_args:type_name -> bilibili.polymer.app.search.v1.UpArgs
	100, // 103: bilibili.polymer.app.search.v1.SearchInlineData.share:type_name -> bilibili.polymer.app.search.v1.Share
	112, // 104: bilibili.polymer.app.search.v1.SearchInlineData.three_point:type_name -> bilibili.polymer.app.search.v1.ThreePoint2
	113, // 105: bilibili.polymer.app.search.v1.SearchInlineData.three_point_v2:type_name -> bilibili.polymer.app.search.v1.ThreePointV2
	102, // 106: bilibili.polymer.app.search.v1.SearchInlineData.share_plane:type_name -> bilibili.polymer.app.search.v1.SharePlane
	32,  // 107: bilibili.polymer.app.search.v1.SearchInlineData.three_point_meta:type_name -> bilibili.polymer.app.search.v1.InlineThreePointPanel
	5,   // 108: bilibili.polymer.app.search.v1.SearchInlineData.avatar:type_name -> bilibili.polymer.app.search.v1.Avatar
	31,  // 109: bilibili.polymer.app.search.v1.SearchInlineData.inline_progress_bar:type_name -> bilibili.polymer.app.search.v1.InlineProgressBar
	75,  // 110: bilibili.polymer.app.search.v1.SearchInlineData.like_button:type_name -> bilibili.polymer.app.search.v1.SearchLikeButtonItem
	117, // 111: bilibili.polymer.app.search.v1.SearchInlineData.traffic_config:type_name -> bilibili.polymer.app.search.v1.TrafficConfig
	30,  // 112: bilibili.polymer.app.search.v1.SearchInlineData.goto_icon:type_name -> bilibili.polymer.app.search.v1.GotoIcon
	54,  // 113: bilibili.polymer.app.search.v1.SearchInlineData.badge_style:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	51,  // 114: bilibili.polymer.app.search.v1.SearchInlineData.player_widget:type_name -> bilibili.polymer.app.search.v1.PlayerWidget
	54,  // 115: bilibili.polymer.app.search.v1.SearchInlineData.cover_badge_style:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	57,  // 116: bilibili.polymer.app.search.v1.SearchInlineData.right_top_live_badge:type_name -> bilibili.polymer.app.search.v1.RightTopLiveBadge
	34,  // 117: bilibili.polymer.app.search.v1.SearchLikeButtonItem.like_resource:type_name -> bilibili.polymer.app.search.v1.LikeResource
	34,  // 118: bilibili.polymer.app.search.v1.SearchLikeButtonItem.like_night_resource:type_name -> bilibili.polymer.app.search.v1.LikeResource
	34,  // 119: bilibili.polymer.app.search.v1.SearchLikeButtonItem.dislike_resource:type_name -> bilibili.polymer.app.search.v1.LikeResource
	34,  // 120: bilibili.polymer.app.search.v1.SearchLikeButtonItem.dislike_night_resource:type_name -> bilibili.polymer.app.search.v1.LikeResource
	53,  // 121: bilibili.polymer.app.search.v1.SearchLiveCard.rcmd_reason:type_name -> bilibili.polymer.app.search.v1.RcmdReason
	57,  // 122: bilibili.polymer.app.search.v1.SearchLiveCard.right_top_live_badge:type_name -> bilibili.polymer.app.search.v1.RightTopLiveBadge
	54,  // 123: bilibili.polymer.app.search.v1.SearchLiveInlineCard.rcmd_reason_style:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	74,  // 124: bilibili.polymer.app.search.v1.SearchLiveInlineCard.live_room_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	16,  // 125: bilibili.polymer.app.search.v1.SearchNewChannelCard.channel_label1:type_name -> bilibili.polymer.app.search.v1.ChannelLabel
	16,  // 126: bilibili.polymer.app.search.v1.SearchNewChannelCard.channel_label2:type_name -> bilibili.polymer.app.search.v1.ChannelLabel
	16,  // 127: bilibili.polymer.app.search.v1.SearchNewChannelCard.channel_button:type_name -> bilibili.polymer.app.search.v1.ChannelLabel
	17,  // 128: bilibili.polymer.app.search.v1.SearchNewChannelCard.items:type_name -> bilibili.polymer.app.search.v1.ChannelMixedItem
	124, // 129: bilibili.polymer.app.search.v1.SearchOgvChannelCard.watch_button:type_name -> bilibili.polymer.app.search.v1.WatchButton
	54,  // 130: bilibili.polymer.app.search.v1.SearchOgvChannelCard.badges_v2:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	74,  // 131: bilibili.polymer.app.search.v1.SearchOgvInlineCard.ogv_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	47,  // 132: bilibili.polymer.app.search.v1.SearchOgvInlineCard.ogv_clip_info:type_name -> bilibili.polymer.app.search.v1.OgvClipInfo
	124, // 133: bilibili.polymer.app.search.v1.SearchOgvInlineCard.watch_button:type_name -> bilibili.polymer.app.search.v1.WatchButton
	54,  // 134: bilibili.polymer.app.search.v1.SearchOgvInlineCard.badges_v2:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	48,  // 135: bilibili.polymer.app.search.v1.SearchOgvRecommendCard.items:type_name -> bilibili.polymer.app.search.v1.OgvRecommendWord
	20,  // 136: bilibili.polymer.app.search.v1.SearchOgvRelationCard.items:type_name -> bilibili.polymer.app.search.v1.DetailsRelationItem
	46,  // 137: bilibili.polymer.app.search.v1.SearchOgvRelationCard.ogv_card_ui:type_name -> bilibili.polymer.app.search.v1.OgvCardUI
	105, // 138: bilibili.polymer.app.search.v1.SearchOlympicGameCard.sports_match_item:type_name -> bilibili.polymer.app.search.v1.SportsMatchItem
	38,  // 139: bilibili.polymer.app.search.v1.SearchOlympicGameCard.match_top:type_name -> bilibili.polymer.app.search.v1.MatchItem
	27,  // 140: bilibili.polymer.app.search.v1.SearchOlympicGameCard.extra_link:type_name -> bilibili.polymer.app.search.v1.ExtraLink
	74,  // 141: bilibili.polymer.app.search.v1.SearchOlympicGameCard.ugc_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	74,  // 142: bilibili.polymer.app.search.v1.SearchOlympicGameCard.live_room_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	38,  // 143: bilibili.polymer.app.search.v1.SearchOlympicGameCard.match_bottom:type_name -> bilibili.polymer.app.search.v1.MatchItem
	15,  // 144: bilibili.polymer.app.search.v1.SearchOlympicWikiCard.card_business_badge:type_name -> bilibili.polymer.app.search.v1.CardBusinessBadge
	42,  // 145: bilibili.polymer.app.search.v1.SearchOlympicWikiCard.read_more:type_name -> bilibili.polymer.app.search.v1.NavigationButton
	74,  // 146: bilibili.polymer.app.search.v1.SearchOlympicWikiCard.ugc_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	74,  // 147: bilibili.polymer.app.search.v1.SearchOlympicWikiCard.live_room_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	49,  // 148: bilibili.polymer.app.search.v1.SearchOlympicWikiCard.pedia_cover:type_name -> bilibili.polymer.app.search.v1.PediaCover
	41,  // 149: bilibili.polymer.app.search.v1.SearchOlympicWikiCard.navigation:type_name -> bilibili.polymer.app.search.v1.Navigation
	41,  // 150: bilibili.polymer.app.search.v1.SearchPediaCard.navigation:type_name -> bilibili.polymer.app.search.v1.Navigation
	42,  // 151: bilibili.polymer.app.search.v1.SearchPediaCard.read_more:type_name -> bilibili.polymer.app.search.v1.NavigationButton
	49,  // 152: bilibili.polymer.app.search.v1.SearchPediaCard.pedia_cover:type_name -> bilibili.polymer.app.search.v1.PediaCover
	15,  // 153: bilibili.polymer.app.search.v1.SearchPediaCard.card_business_badge:type_name -> bilibili.polymer.app.search.v1.CardBusinessBadge
	55,  // 154: bilibili.polymer.app.search.v1.SearchRecommendWordCard.list:type_name -> bilibili.polymer.app.search.v1.RecommendWord
	54,  // 155: bilibili.polymer.app.search.v1.SearchSpecialCard.new_rec_tags:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	15,  // 156: bilibili.polymer.app.search.v1.SearchSpecialCard.card_business_badge:type_name -> bilibili.polymer.app.search.v1.CardBusinessBadge
	54,  // 157: bilibili.polymer.app.search.v1.SearchSpecialCard.new_rec_tags_v2:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	38,  // 158: bilibili.polymer.app.search.v1.SearchSportCard.match_top:type_name -> bilibili.polymer.app.search.v1.MatchItem
	38,  // 159: bilibili.polymer.app.search.v1.SearchSportCard.match_bottom:type_name -> bilibili.polymer.app.search.v1.MatchItem
	27,  // 160: bilibili.polymer.app.search.v1.SearchSportCard.extra_link:type_name -> bilibili.polymer.app.search.v1.ExtraLink
	37,  // 161: bilibili.polymer.app.search.v1.SearchSportCard.items:type_name -> bilibili.polymer.app.search.v1.MatchInfoObj
	38,  // 162: bilibili.polymer.app.search.v1.SearchSportInlineCard.match_top:type_name -> bilibili.polymer.app.search.v1.MatchItem
	38,  // 163: bilibili.polymer.app.search.v1.SearchSportInlineCard.match_bottom:type_name -> bilibili.polymer.app.search.v1.MatchItem
	27,  // 164: bilibili.polymer.app.search.v1.SearchSportInlineCard.extra_link:type_name -> bilibili.polymer.app.search.v1.ExtraLink
	37,  // 165: bilibili.polymer.app.search.v1.SearchSportInlineCard.items:type_name -> bilibili.polymer.app.search.v1.MatchInfoObj
	74,  // 166: bilibili.polymer.app.search.v1.SearchSportInlineCard.esports_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	116, // 167: bilibili.polymer.app.search.v1.SearchTopGameCard.top_game_ui:type_name -> bilibili.polymer.app.search.v1.TopGameUI
	107, // 168: bilibili.polymer.app.search.v1.SearchTopGameCard.tab_info:type_name -> bilibili.polymer.app.search.v1.TabInfo
	74,  // 169: bilibili.polymer.app.search.v1.SearchTopGameCard.ugc_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	74,  // 170: bilibili.polymer.app.search.v1.SearchTopGameCard.inline_live:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	74,  // 171: bilibili.polymer.app.search.v1.SearchUgcInlineCard.ugc_inline:type_name -> bilibili.polymer.app.search.v1.SearchInlineData
	29,  // 172: bilibili.polymer.app.search.v1.SearchUgcInlineCard.full_text:type_name -> bilibili.polymer.app.search.v1.FullTextResult
	45,  // 173: bilibili.polymer.app.search.v1.SearchUpperCard.official_verify:type_name -> bilibili.polymer.app.search.v1.OfficialVerify
	43,  // 174: bilibili.polymer.app.search.v1.SearchUpperCard.nft_face_icon:type_name -> bilibili.polymer.app.search.v1.NftFaceIcon
	6,   // 175: bilibili.polymer.app.search.v1.SearchUpperCard.av_items:type_name -> bilibili.polymer.app.search.v1.AvItem
	122, // 176: bilibili.polymer.app.search.v1.SearchUpperCard.vip:type_name -> bilibili.polymer.app.search.v1.VipInfo
	56,  // 177: bilibili.polymer.app.search.v1.SearchUpperCard.relation:type_name -> bilibili.polymer.app.search.v1.Relation
	44,  // 178: bilibili.polymer.app.search.v1.SearchUpperCard.notice:type_name -> bilibili.polymer.app.search.v1.Notice
	53,  // 179: bilibili.polymer.app.search.v1.SearchVideoCard.rcmd_reason:type_name -> bilibili.polymer.app.search.v1.RcmdReason
	54,  // 180: bilibili.polymer.app.search.v1.SearchVideoCard.new_rec_tags:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	111, // 181: bilibili.polymer.app.search.v1.SearchVideoCard.three_point:type_name -> bilibili.polymer.app.search.v1.ThreePoint
	100, // 182: bilibili.polymer.app.search.v1.SearchVideoCard.share:type_name -> bilibili.polymer.app.search.v1.Share
	15,  // 183: bilibili.polymer.app.search.v1.SearchVideoCard.card_business_badge:type_name -> bilibili.polymer.app.search.v1.CardBusinessBadge
	54,  // 184: bilibili.polymer.app.search.v1.SearchVideoCard.badges:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	29,  // 185: bilibili.polymer.app.search.v1.SearchVideoCard.full_text:type_name -> bilibili.polymer.app.search.v1.FullTextResult
	54,  // 186: bilibili.polymer.app.search.v1.SearchVideoCard.new_rec_tags_v2:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	54,  // 187: bilibili.polymer.app.search.v1.SearchVideoCard.badges_v2:type_name -> bilibili.polymer.app.search.v1.ReasonStyle
	121, // 188: bilibili.polymer.app.search.v1.Share.video:type_name -> bilibili.polymer.app.search.v1.Video
	14,  // 189: bilibili.polymer.app.search.v1.ShareButtonItem.button_metas:type_name -> bilibili.polymer.app.search.v1.ButtonMeta
	103, // 190: bilibili.polymer.app.search.v1.SharePlane.share_to:type_name -> bilibili.polymer.app.search.v1.ShareTo
	21,  // 191: bilibili.polymer.app.search.v1.ThreePoint2.dislike_reasons:type_name -> bilibili.polymer.app.search.v1.DislikeReason
	21,  // 192: bilibili.polymer.app.search.v1.ThreePoint2.feedbacks:type_name -> bilibili.polymer.app.search.v1.DislikeReason
	21,  // 193: bilibili.polymer.app.search.v1.ThreePointV2.reasons:type_name -> bilibili.polymer.app.search.v1.DislikeReason
	21,  // 194: bilibili.polymer.app.search.v1.ThreePointV3.reasons:type_name -> bilibili.polymer.app.search.v1.DislikeReason
	102, // 195: bilibili.polymer.app.search.v1.ThreePointV4.share_plane:type_name -> bilibili.polymer.app.search.v1.SharePlane
	126, // 196: bilibili.polymer.app.search.v1.ThreePointV4.watch_later:type_name -> bilibili.polymer.app.search.v1.WatchLater
	118, // 197: bilibili.polymer.app.search.v1.TrafficConfig.options:type_name -> bilibili.polymer.app.search.v1.TrafficConfigOption
	123, // 198: bilibili.polymer.app.search.v1.VipInfo.label:type_name -> bilibili.polymer.app.search.v1.VipLabel
	59,  // 199: bilibili.polymer.app.search.v1.Search.SearchAll:input_type -> bilibili.polymer.app.search.v1.SearchAllRequest
	65,  // 200: bilibili.polymer.app.search.v1.Search.SearchByType:input_type -> bilibili.polymer.app.search.v1.SearchByTypeRequest
	70,  // 201: bilibili.polymer.app.search.v1.Search.SearchComic:input_type -> bilibili.polymer.app.search.v1.SearchComicRequest
	60,  // 202: bilibili.polymer.app.search.v1.Search.SearchAll:output_type -> bilibili.polymer.app.search.v1.SearchAllResponse
	66,  // 203: bilibili.polymer.app.search.v1.Search.SearchByType:output_type -> bilibili.polymer.app.search.v1.SearchByTypeResponse
	71,  // 204: bilibili.polymer.app.search.v1.Search.SearchComic:output_type -> bilibili.polymer.app.search.v1.SearchComicResponse
	202, // [202:205] is the sub-list for method output_type
	199, // [199:202] is the sub-list for method input_type
	199, // [199:199] is the sub-list for extension type_name
	199, // [199:199] is the sub-list for extension extendee
	0,   // [0:199] is the sub-list for field type_name
}

func init() { file_bilibili_polymer_app_search_v1_search_proto_init() }
func file_bilibili_polymer_app_search_v1_search_proto_init() {
	if File_bilibili_polymer_app_search_v1_search_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Avatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Background); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Badge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Badge2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BottomButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandADAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandADArc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBusinessBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMixedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudGameParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailsRelationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DislikeReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DyTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterEgg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullTextResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GotoIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineProgressBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineThreePointPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveBadgeResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfoObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nav); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Navigation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftFaceIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OgvCardUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OgvClipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OgvRecommendWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PediaCover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerWidget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RcmdReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasonStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightTopLiveBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAdCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArticleCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAuthorNewCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBangumiCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBannerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchByTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchByTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCollectionCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComicCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDynamicCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchGameCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInlineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLikeButtonItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLiveCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLiveInlineCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNewChannelCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNoResultSuggestWordCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOgvCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOgvChannelCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOgvInlineCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOgvRecommendCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOgvRelationCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOlympicGameCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOlympicWikiCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPediaCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPurchaseCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecommendTipCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecommendWordCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSpecialCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSpecialGuideCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSportCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSportInlineCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTipsCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTopGameCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUgcInlineCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUpperCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVideoCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareButtonItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharePlane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Space); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportsMatchItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Texts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreePoint2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreePointV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreePointV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreePointV4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopGameUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficConfigOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchedShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_polymer_app_search_v1_search_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLater); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bilibili_polymer_app_search_v1_search_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Item_Special)(nil),
		(*Item_Article)(nil),
		(*Item_Banner)(nil),
		(*Item_Live)(nil),
		(*Item_Game)(nil),
		(*Item_Purchase)(nil),
		(*Item_RecommendWord)(nil),
		(*Item_Dynamic)(nil),
		(*Item_SuggestKeyword)(nil),
		(*Item_SpecialGuide)(nil),
		(*Item_Comic)(nil),
		(*Item_ChannelNew)(nil),
		(*Item_OgvCard)(nil),
		(*Item_BangumiRelates)(nil),
		(*Item_FindMore)(nil),
		(*Item_Esport)(nil),
		(*Item_AuthorNew)(nil),
		(*Item_Tips)(nil),
		(*Item_Cm)(nil),
		(*Item_PediaCard)(nil),
		(*Item_UgcInline)(nil),
		(*Item_LiveInline)(nil),
		(*Item_TopGame)(nil),
		(*Item_Sports)(nil),
		(*Item_PediaCardInline)(nil),
		(*Item_RecommendTips)(nil),
		(*Item_CollectionCard)(nil),
		(*Item_OgvChannel)(nil),
		(*Item_OgvInline)(nil),
		(*Item_Author)(nil),
		(*Item_Av)(nil),
		(*Item_Bangumi)(nil),
		(*Item_EsportsInline)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_polymer_app_search_v1_search_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   126,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bilibili_polymer_app_search_v1_search_proto_goTypes,
		DependencyIndexes: file_bilibili_polymer_app_search_v1_search_proto_depIdxs,
		EnumInfos:         file_bilibili_polymer_app_search_v1_search_proto_enumTypes,
		MessageInfos:      file_bilibili_polymer_app_search_v1_search_proto_msgTypes,
	}.Build()
	File_bilibili_polymer_app_search_v1_search_proto = out.File
	file_bilibili_polymer_app_search_v1_search_proto_rawDesc = nil
	file_bilibili_polymer_app_search_v1_search_proto_goTypes = nil
	file_bilibili_polymer_app_search_v1_search_proto_depIdxs = nil
}
