// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/polymer/contract/contract.proto

package contract

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Contract_AddContract_FullMethodName    = "/bilibili.polymer.contract.Contract/AddContract"
	Contract_AddContractV2_FullMethodName  = "/bilibili.polymer.contract.Contract/AddContractV2"
	Contract_ContractConfig_FullMethodName = "/bilibili.polymer.contract.Contract/ContractConfig"
)

// ContractClient is the client API for Contract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractClient interface {
	AddContract(ctx context.Context, in *AddContractReq, opts ...grpc.CallOption) (*empty.Empty, error)
	AddContractV2(ctx context.Context, in *AddContractReq, opts ...grpc.CallOption) (*AddContractReply, error)
	ContractConfig(ctx context.Context, in *ContractConfigReq, opts ...grpc.CallOption) (*ContractConfigReply, error)
}

type contractClient struct {
	cc grpc.ClientConnInterface
}

func NewContractClient(cc grpc.ClientConnInterface) ContractClient {
	return &contractClient{cc}
}

func (c *contractClient) AddContract(ctx context.Context, in *AddContractReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Contract_AddContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) AddContractV2(ctx context.Context, in *AddContractReq, opts ...grpc.CallOption) (*AddContractReply, error) {
	out := new(AddContractReply)
	err := c.cc.Invoke(ctx, Contract_AddContractV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) ContractConfig(ctx context.Context, in *ContractConfigReq, opts ...grpc.CallOption) (*ContractConfigReply, error) {
	out := new(ContractConfigReply)
	err := c.cc.Invoke(ctx, Contract_ContractConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractServer is the server API for Contract service.
// All implementations must embed UnimplementedContractServer
// for forward compatibility
type ContractServer interface {
	AddContract(context.Context, *AddContractReq) (*empty.Empty, error)
	AddContractV2(context.Context, *AddContractReq) (*AddContractReply, error)
	ContractConfig(context.Context, *ContractConfigReq) (*ContractConfigReply, error)
	mustEmbedUnimplementedContractServer()
}

// UnimplementedContractServer must be embedded to have forward compatible implementations.
type UnimplementedContractServer struct {
}

func (UnimplementedContractServer) AddContract(context.Context, *AddContractReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContract not implemented")
}
func (UnimplementedContractServer) AddContractV2(context.Context, *AddContractReq) (*AddContractReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContractV2 not implemented")
}
func (UnimplementedContractServer) ContractConfig(context.Context, *ContractConfigReq) (*ContractConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractConfig not implemented")
}
func (UnimplementedContractServer) mustEmbedUnimplementedContractServer() {}

// UnsafeContractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractServer will
// result in compilation errors.
type UnsafeContractServer interface {
	mustEmbedUnimplementedContractServer()
}

func RegisterContractServer(s grpc.ServiceRegistrar, srv ContractServer) {
	s.RegisterService(&Contract_ServiceDesc, srv)
}

func _Contract_AddContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).AddContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_AddContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).AddContract(ctx, req.(*AddContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_AddContractV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).AddContractV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_AddContractV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).AddContractV2(ctx, req.(*AddContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_ContractConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).ContractConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_ContractConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).ContractConfig(ctx, req.(*ContractConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Contract_ServiceDesc is the grpc.ServiceDesc for Contract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.polymer.contract.Contract",
	HandlerType: (*ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContract",
			Handler:    _Contract_AddContract_Handler,
		},
		{
			MethodName: "AddContractV2",
			Handler:    _Contract_AddContractV2_Handler,
		},
		{
			MethodName: "ContractConfig",
			Handler:    _Contract_ContractConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/polymer/contract/contract.proto",
}
