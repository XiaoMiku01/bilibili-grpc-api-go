// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/polymer/community/govern/v1/govern.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AntiHarassmentService_StoreAntiHarassmentSettings_FullMethodName = "/bilibili.polymer.app.govern.v1.AntiHarassmentService/StoreAntiHarassmentSettings"
	AntiHarassmentService_LoadAntiHarassmentSettings_FullMethodName  = "/bilibili.polymer.app.govern.v1.AntiHarassmentService/LoadAntiHarassmentSettings"
)

// AntiHarassmentServiceClient is the client API for AntiHarassmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiHarassmentServiceClient interface {
	StoreAntiHarassmentSettings(ctx context.Context, in *StoreAntiHarassmentSettingsReq, opts ...grpc.CallOption) (*StoreAntiHarassmentSettingsRsp, error)
	LoadAntiHarassmentSettings(ctx context.Context, in *LoadAntiHarassmentSettingsReq, opts ...grpc.CallOption) (*LoadAntiHarassmentSettingsRsp, error)
}

type antiHarassmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiHarassmentServiceClient(cc grpc.ClientConnInterface) AntiHarassmentServiceClient {
	return &antiHarassmentServiceClient{cc}
}

func (c *antiHarassmentServiceClient) StoreAntiHarassmentSettings(ctx context.Context, in *StoreAntiHarassmentSettingsReq, opts ...grpc.CallOption) (*StoreAntiHarassmentSettingsRsp, error) {
	out := new(StoreAntiHarassmentSettingsRsp)
	err := c.cc.Invoke(ctx, AntiHarassmentService_StoreAntiHarassmentSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiHarassmentServiceClient) LoadAntiHarassmentSettings(ctx context.Context, in *LoadAntiHarassmentSettingsReq, opts ...grpc.CallOption) (*LoadAntiHarassmentSettingsRsp, error) {
	out := new(LoadAntiHarassmentSettingsRsp)
	err := c.cc.Invoke(ctx, AntiHarassmentService_LoadAntiHarassmentSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiHarassmentServiceServer is the server API for AntiHarassmentService service.
// All implementations must embed UnimplementedAntiHarassmentServiceServer
// for forward compatibility
type AntiHarassmentServiceServer interface {
	StoreAntiHarassmentSettings(context.Context, *StoreAntiHarassmentSettingsReq) (*StoreAntiHarassmentSettingsRsp, error)
	LoadAntiHarassmentSettings(context.Context, *LoadAntiHarassmentSettingsReq) (*LoadAntiHarassmentSettingsRsp, error)
	mustEmbedUnimplementedAntiHarassmentServiceServer()
}

// UnimplementedAntiHarassmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiHarassmentServiceServer struct {
}

func (UnimplementedAntiHarassmentServiceServer) StoreAntiHarassmentSettings(context.Context, *StoreAntiHarassmentSettingsReq) (*StoreAntiHarassmentSettingsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAntiHarassmentSettings not implemented")
}
func (UnimplementedAntiHarassmentServiceServer) LoadAntiHarassmentSettings(context.Context, *LoadAntiHarassmentSettingsReq) (*LoadAntiHarassmentSettingsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadAntiHarassmentSettings not implemented")
}
func (UnimplementedAntiHarassmentServiceServer) mustEmbedUnimplementedAntiHarassmentServiceServer() {}

// UnsafeAntiHarassmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiHarassmentServiceServer will
// result in compilation errors.
type UnsafeAntiHarassmentServiceServer interface {
	mustEmbedUnimplementedAntiHarassmentServiceServer()
}

func RegisterAntiHarassmentServiceServer(s grpc.ServiceRegistrar, srv AntiHarassmentServiceServer) {
	s.RegisterService(&AntiHarassmentService_ServiceDesc, srv)
}

func _AntiHarassmentService_StoreAntiHarassmentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAntiHarassmentSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiHarassmentServiceServer).StoreAntiHarassmentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiHarassmentService_StoreAntiHarassmentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiHarassmentServiceServer).StoreAntiHarassmentSettings(ctx, req.(*StoreAntiHarassmentSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiHarassmentService_LoadAntiHarassmentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadAntiHarassmentSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiHarassmentServiceServer).LoadAntiHarassmentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiHarassmentService_LoadAntiHarassmentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiHarassmentServiceServer).LoadAntiHarassmentSettings(ctx, req.(*LoadAntiHarassmentSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiHarassmentService_ServiceDesc is the grpc.ServiceDesc for AntiHarassmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiHarassmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.polymer.app.govern.v1.AntiHarassmentService",
	HandlerType: (*AntiHarassmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreAntiHarassmentSettings",
			Handler:    _AntiHarassmentService_StoreAntiHarassmentSettings_Handler,
		},
		{
			MethodName: "LoadAntiHarassmentSettings",
			Handler:    _AntiHarassmentService_LoadAntiHarassmentSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/polymer/community/govern/v1/govern.proto",
}
