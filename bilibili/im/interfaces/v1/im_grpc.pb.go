// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/im/interfaces/v1/im.proto

package v1

import (
	context "context"
	_type "github.com/XiaoMiku01/bilibili-grpc-api-go/bilibili/im/type"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImInterface_SendMsg_FullMethodName              = "/bilibili.im.interface.v1.ImInterface/SendMsg"
	ImInterface_SyncRelation_FullMethodName         = "/bilibili.im.interface.v1.ImInterface/SyncRelation"
	ImInterface_SyncAck_FullMethodName              = "/bilibili.im.interface.v1.ImInterface/SyncAck"
	ImInterface_SyncFetchSessionMsgs_FullMethodName = "/bilibili.im.interface.v1.ImInterface/SyncFetchSessionMsgs"
	ImInterface_GetSessions_FullMethodName          = "/bilibili.im.interface.v1.ImInterface/GetSessions"
	ImInterface_NewSessions_FullMethodName          = "/bilibili.im.interface.v1.ImInterface/NewSessions"
	ImInterface_AckSessions_FullMethodName          = "/bilibili.im.interface.v1.ImInterface/AckSessions"
	ImInterface_UpdateAck_FullMethodName            = "/bilibili.im.interface.v1.ImInterface/UpdateAck"
	ImInterface_SetTop_FullMethodName               = "/bilibili.im.interface.v1.ImInterface/SetTop"
	ImInterface_RemoveSession_FullMethodName        = "/bilibili.im.interface.v1.ImInterface/RemoveSession"
	ImInterface_SingleUnread_FullMethodName         = "/bilibili.im.interface.v1.ImInterface/SingleUnread"
	ImInterface_MyGroupUnread_FullMethodName        = "/bilibili.im.interface.v1.ImInterface/MyGroupUnread"
	ImInterface_UpdateUnflwRead_FullMethodName      = "/bilibili.im.interface.v1.ImInterface/UpdateUnflwRead"
	ImInterface_GroupAssisMsg_FullMethodName        = "/bilibili.im.interface.v1.ImInterface/GroupAssisMsg"
	ImInterface_AckAssisMsg_FullMethodName          = "/bilibili.im.interface.v1.ImInterface/AckAssisMsg"
	ImInterface_SessionDetail_FullMethodName        = "/bilibili.im.interface.v1.ImInterface/SessionDetail"
	ImInterface_BatchSessDetail_FullMethodName      = "/bilibili.im.interface.v1.ImInterface/BatchSessDetail"
	ImInterface_BatchRmSessions_FullMethodName      = "/bilibili.im.interface.v1.ImInterface/BatchRmSessions"
	ImInterface_ShareList_FullMethodName            = "/bilibili.im.interface.v1.ImInterface/ShareList"
	ImInterface_SpecificSingleUnread_FullMethodName = "/bilibili.im.interface.v1.ImInterface/SpecificSingleUnread"
	ImInterface_GetSpecificSessions_FullMethodName  = "/bilibili.im.interface.v1.ImInterface/GetSpecificSessions"
	ImInterface_GetLiveInfo_FullMethodName          = "/bilibili.im.interface.v1.ImInterface/GetLiveInfo"
	ImInterface_GetTotalUnread_FullMethodName       = "/bilibili.im.interface.v1.ImInterface/GetTotalUnread"
	ImInterface_ShowClearUnreadUI_FullMethodName    = "/bilibili.im.interface.v1.ImInterface/ShowClearUnreadUI"
	ImInterface_CloseClearUnreadUI_FullMethodName   = "/bilibili.im.interface.v1.ImInterface/CloseClearUnreadUI"
	ImInterface_UpdateTotalUnread_FullMethodName    = "/bilibili.im.interface.v1.ImInterface/UpdateTotalUnread"
)

// ImInterfaceClient is the client API for ImInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImInterfaceClient interface {
	// 发送消息
	SendMsg(ctx context.Context, in *ReqSendMsg, opts ...grpc.CallOption) (*RspSendMsg, error)
	// 同步关系
	SyncRelation(ctx context.Context, in *ReqRelationSync, opts ...grpc.CallOption) (*RspRelationSync, error)
	// 确认同步进度
	SyncAck(ctx context.Context, in *ReqSyncAck, opts ...grpc.CallOption) (*RspSyncAck, error)
	// 同步版本拉取消息
	SyncFetchSessionMsgs(ctx context.Context, in *ReqSessionMsg, opts ...grpc.CallOption) (*RspSessionMsg, error)
	// 拉取会话记录列表
	GetSessions(ctx context.Context, in *ReqGetSessions, opts ...grpc.CallOption) (*RspSessions, error)
	// 拉取新消息
	NewSessions(ctx context.Context, in *ReqNewSessions, opts ...grpc.CallOption) (*RspSessions, error)
	// 拉取已读消息
	AckSessions(ctx context.Context, in *ReqAckSessions, opts ...grpc.CallOption) (*RspSessions, error)
	// 更新已读进度
	UpdateAck(ctx context.Context, in *ReqUpdateAck, opts ...grpc.CallOption) (*DummyRsp, error)
	// 置顶聊天
	SetTop(ctx context.Context, in *ReqSetTop, opts ...grpc.CallOption) (*DummyRsp, error)
	// 删除会话记录
	RemoveSession(ctx context.Context, in *ReqRemoveSession, opts ...grpc.CallOption) (*DummyRsp, error)
	// 未读私信数
	SingleUnread(ctx context.Context, in *ReqSingleUnread, opts ...grpc.CallOption) (*RspSingleUnread, error)
	// 我创建的应援团未读数
	MyGroupUnread(ctx context.Context, in *DummyReq, opts ...grpc.CallOption) (*RspMyGroupUnread, error)
	// 未关注的人批量设置为已读
	UpdateUnflwRead(ctx context.Context, in *DummyReq, opts ...grpc.CallOption) (*DummyRsp, error)
	// 应援团消息助手
	GroupAssisMsg(ctx context.Context, in *ReqGroupAssisMsg, opts ...grpc.CallOption) (*RspSessionMsg, error)
	// 更新应援团小助手消息已拉取进度
	AckAssisMsg(ctx context.Context, in *ReqAckAssisMsg, opts ...grpc.CallOption) (*DummyRsp, error)
	// 拉取会话详情
	SessionDetail(ctx context.Context, in *ReqSessionDetail, opts ...grpc.CallOption) (*_type.SessionInfo, error)
	// 批量拉取会话详情
	BatchSessDetail(ctx context.Context, in *ReqSessionDetails, opts ...grpc.CallOption) (*RspSessionDetails, error)
	// 批量删除会话
	BatchRmSessions(ctx context.Context, in *ReqBatRmSess, opts ...grpc.CallOption) (*DummyRsp, error)
	// 拉取最近私信分享列表
	ShareList(ctx context.Context, in *ReqShareList, opts ...grpc.CallOption) (*RspShareList, error)
	SpecificSingleUnread(ctx context.Context, in *ReqSpecificSingleUnread, opts ...grpc.CallOption) (*RspSpecificSingleUnread, error)
	GetSpecificSessions(ctx context.Context, in *ReqGetSpecificSessions, opts ...grpc.CallOption) (*RspSessions, error)
	GetLiveInfo(ctx context.Context, in *ReqLiveInfo, opts ...grpc.CallOption) (*RspLiveInfo, error)
	GetTotalUnread(ctx context.Context, in *ReqTotalUnread, opts ...grpc.CallOption) (*RspTotalUnread, error)
	ShowClearUnreadUI(ctx context.Context, in *ReqShowClearUnreadUI, opts ...grpc.CallOption) (*RspShowClearUnreadUI, error)
	CloseClearUnreadUI(ctx context.Context, in *ReqCloseClearUnreadUI, opts ...grpc.CallOption) (*RspCloseClearUnreadUI, error)
	UpdateTotalUnread(ctx context.Context, in *ReqUpdateTotalUnread, opts ...grpc.CallOption) (*RspUpdateTotalUnread, error)
}

type imInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewImInterfaceClient(cc grpc.ClientConnInterface) ImInterfaceClient {
	return &imInterfaceClient{cc}
}

func (c *imInterfaceClient) SendMsg(ctx context.Context, in *ReqSendMsg, opts ...grpc.CallOption) (*RspSendMsg, error) {
	out := new(RspSendMsg)
	err := c.cc.Invoke(ctx, ImInterface_SendMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) SyncRelation(ctx context.Context, in *ReqRelationSync, opts ...grpc.CallOption) (*RspRelationSync, error) {
	out := new(RspRelationSync)
	err := c.cc.Invoke(ctx, ImInterface_SyncRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) SyncAck(ctx context.Context, in *ReqSyncAck, opts ...grpc.CallOption) (*RspSyncAck, error) {
	out := new(RspSyncAck)
	err := c.cc.Invoke(ctx, ImInterface_SyncAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) SyncFetchSessionMsgs(ctx context.Context, in *ReqSessionMsg, opts ...grpc.CallOption) (*RspSessionMsg, error) {
	out := new(RspSessionMsg)
	err := c.cc.Invoke(ctx, ImInterface_SyncFetchSessionMsgs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) GetSessions(ctx context.Context, in *ReqGetSessions, opts ...grpc.CallOption) (*RspSessions, error) {
	out := new(RspSessions)
	err := c.cc.Invoke(ctx, ImInterface_GetSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) NewSessions(ctx context.Context, in *ReqNewSessions, opts ...grpc.CallOption) (*RspSessions, error) {
	out := new(RspSessions)
	err := c.cc.Invoke(ctx, ImInterface_NewSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) AckSessions(ctx context.Context, in *ReqAckSessions, opts ...grpc.CallOption) (*RspSessions, error) {
	out := new(RspSessions)
	err := c.cc.Invoke(ctx, ImInterface_AckSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) UpdateAck(ctx context.Context, in *ReqUpdateAck, opts ...grpc.CallOption) (*DummyRsp, error) {
	out := new(DummyRsp)
	err := c.cc.Invoke(ctx, ImInterface_UpdateAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) SetTop(ctx context.Context, in *ReqSetTop, opts ...grpc.CallOption) (*DummyRsp, error) {
	out := new(DummyRsp)
	err := c.cc.Invoke(ctx, ImInterface_SetTop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) RemoveSession(ctx context.Context, in *ReqRemoveSession, opts ...grpc.CallOption) (*DummyRsp, error) {
	out := new(DummyRsp)
	err := c.cc.Invoke(ctx, ImInterface_RemoveSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) SingleUnread(ctx context.Context, in *ReqSingleUnread, opts ...grpc.CallOption) (*RspSingleUnread, error) {
	out := new(RspSingleUnread)
	err := c.cc.Invoke(ctx, ImInterface_SingleUnread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) MyGroupUnread(ctx context.Context, in *DummyReq, opts ...grpc.CallOption) (*RspMyGroupUnread, error) {
	out := new(RspMyGroupUnread)
	err := c.cc.Invoke(ctx, ImInterface_MyGroupUnread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) UpdateUnflwRead(ctx context.Context, in *DummyReq, opts ...grpc.CallOption) (*DummyRsp, error) {
	out := new(DummyRsp)
	err := c.cc.Invoke(ctx, ImInterface_UpdateUnflwRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) GroupAssisMsg(ctx context.Context, in *ReqGroupAssisMsg, opts ...grpc.CallOption) (*RspSessionMsg, error) {
	out := new(RspSessionMsg)
	err := c.cc.Invoke(ctx, ImInterface_GroupAssisMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) AckAssisMsg(ctx context.Context, in *ReqAckAssisMsg, opts ...grpc.CallOption) (*DummyRsp, error) {
	out := new(DummyRsp)
	err := c.cc.Invoke(ctx, ImInterface_AckAssisMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) SessionDetail(ctx context.Context, in *ReqSessionDetail, opts ...grpc.CallOption) (*_type.SessionInfo, error) {
	out := new(_type.SessionInfo)
	err := c.cc.Invoke(ctx, ImInterface_SessionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) BatchSessDetail(ctx context.Context, in *ReqSessionDetails, opts ...grpc.CallOption) (*RspSessionDetails, error) {
	out := new(RspSessionDetails)
	err := c.cc.Invoke(ctx, ImInterface_BatchSessDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) BatchRmSessions(ctx context.Context, in *ReqBatRmSess, opts ...grpc.CallOption) (*DummyRsp, error) {
	out := new(DummyRsp)
	err := c.cc.Invoke(ctx, ImInterface_BatchRmSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) ShareList(ctx context.Context, in *ReqShareList, opts ...grpc.CallOption) (*RspShareList, error) {
	out := new(RspShareList)
	err := c.cc.Invoke(ctx, ImInterface_ShareList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) SpecificSingleUnread(ctx context.Context, in *ReqSpecificSingleUnread, opts ...grpc.CallOption) (*RspSpecificSingleUnread, error) {
	out := new(RspSpecificSingleUnread)
	err := c.cc.Invoke(ctx, ImInterface_SpecificSingleUnread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) GetSpecificSessions(ctx context.Context, in *ReqGetSpecificSessions, opts ...grpc.CallOption) (*RspSessions, error) {
	out := new(RspSessions)
	err := c.cc.Invoke(ctx, ImInterface_GetSpecificSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) GetLiveInfo(ctx context.Context, in *ReqLiveInfo, opts ...grpc.CallOption) (*RspLiveInfo, error) {
	out := new(RspLiveInfo)
	err := c.cc.Invoke(ctx, ImInterface_GetLiveInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) GetTotalUnread(ctx context.Context, in *ReqTotalUnread, opts ...grpc.CallOption) (*RspTotalUnread, error) {
	out := new(RspTotalUnread)
	err := c.cc.Invoke(ctx, ImInterface_GetTotalUnread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) ShowClearUnreadUI(ctx context.Context, in *ReqShowClearUnreadUI, opts ...grpc.CallOption) (*RspShowClearUnreadUI, error) {
	out := new(RspShowClearUnreadUI)
	err := c.cc.Invoke(ctx, ImInterface_ShowClearUnreadUI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) CloseClearUnreadUI(ctx context.Context, in *ReqCloseClearUnreadUI, opts ...grpc.CallOption) (*RspCloseClearUnreadUI, error) {
	out := new(RspCloseClearUnreadUI)
	err := c.cc.Invoke(ctx, ImInterface_CloseClearUnreadUI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) UpdateTotalUnread(ctx context.Context, in *ReqUpdateTotalUnread, opts ...grpc.CallOption) (*RspUpdateTotalUnread, error) {
	out := new(RspUpdateTotalUnread)
	err := c.cc.Invoke(ctx, ImInterface_UpdateTotalUnread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImInterfaceServer is the server API for ImInterface service.
// All implementations must embed UnimplementedImInterfaceServer
// for forward compatibility
type ImInterfaceServer interface {
	// 发送消息
	SendMsg(context.Context, *ReqSendMsg) (*RspSendMsg, error)
	// 同步关系
	SyncRelation(context.Context, *ReqRelationSync) (*RspRelationSync, error)
	// 确认同步进度
	SyncAck(context.Context, *ReqSyncAck) (*RspSyncAck, error)
	// 同步版本拉取消息
	SyncFetchSessionMsgs(context.Context, *ReqSessionMsg) (*RspSessionMsg, error)
	// 拉取会话记录列表
	GetSessions(context.Context, *ReqGetSessions) (*RspSessions, error)
	// 拉取新消息
	NewSessions(context.Context, *ReqNewSessions) (*RspSessions, error)
	// 拉取已读消息
	AckSessions(context.Context, *ReqAckSessions) (*RspSessions, error)
	// 更新已读进度
	UpdateAck(context.Context, *ReqUpdateAck) (*DummyRsp, error)
	// 置顶聊天
	SetTop(context.Context, *ReqSetTop) (*DummyRsp, error)
	// 删除会话记录
	RemoveSession(context.Context, *ReqRemoveSession) (*DummyRsp, error)
	// 未读私信数
	SingleUnread(context.Context, *ReqSingleUnread) (*RspSingleUnread, error)
	// 我创建的应援团未读数
	MyGroupUnread(context.Context, *DummyReq) (*RspMyGroupUnread, error)
	// 未关注的人批量设置为已读
	UpdateUnflwRead(context.Context, *DummyReq) (*DummyRsp, error)
	// 应援团消息助手
	GroupAssisMsg(context.Context, *ReqGroupAssisMsg) (*RspSessionMsg, error)
	// 更新应援团小助手消息已拉取进度
	AckAssisMsg(context.Context, *ReqAckAssisMsg) (*DummyRsp, error)
	// 拉取会话详情
	SessionDetail(context.Context, *ReqSessionDetail) (*_type.SessionInfo, error)
	// 批量拉取会话详情
	BatchSessDetail(context.Context, *ReqSessionDetails) (*RspSessionDetails, error)
	// 批量删除会话
	BatchRmSessions(context.Context, *ReqBatRmSess) (*DummyRsp, error)
	// 拉取最近私信分享列表
	ShareList(context.Context, *ReqShareList) (*RspShareList, error)
	SpecificSingleUnread(context.Context, *ReqSpecificSingleUnread) (*RspSpecificSingleUnread, error)
	GetSpecificSessions(context.Context, *ReqGetSpecificSessions) (*RspSessions, error)
	GetLiveInfo(context.Context, *ReqLiveInfo) (*RspLiveInfo, error)
	GetTotalUnread(context.Context, *ReqTotalUnread) (*RspTotalUnread, error)
	ShowClearUnreadUI(context.Context, *ReqShowClearUnreadUI) (*RspShowClearUnreadUI, error)
	CloseClearUnreadUI(context.Context, *ReqCloseClearUnreadUI) (*RspCloseClearUnreadUI, error)
	UpdateTotalUnread(context.Context, *ReqUpdateTotalUnread) (*RspUpdateTotalUnread, error)
	mustEmbedUnimplementedImInterfaceServer()
}

// UnimplementedImInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedImInterfaceServer struct {
}

func (UnimplementedImInterfaceServer) SendMsg(context.Context, *ReqSendMsg) (*RspSendMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedImInterfaceServer) SyncRelation(context.Context, *ReqRelationSync) (*RspRelationSync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRelation not implemented")
}
func (UnimplementedImInterfaceServer) SyncAck(context.Context, *ReqSyncAck) (*RspSyncAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAck not implemented")
}
func (UnimplementedImInterfaceServer) SyncFetchSessionMsgs(context.Context, *ReqSessionMsg) (*RspSessionMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFetchSessionMsgs not implemented")
}
func (UnimplementedImInterfaceServer) GetSessions(context.Context, *ReqGetSessions) (*RspSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedImInterfaceServer) NewSessions(context.Context, *ReqNewSessions) (*RspSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSessions not implemented")
}
func (UnimplementedImInterfaceServer) AckSessions(context.Context, *ReqAckSessions) (*RspSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckSessions not implemented")
}
func (UnimplementedImInterfaceServer) UpdateAck(context.Context, *ReqUpdateAck) (*DummyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAck not implemented")
}
func (UnimplementedImInterfaceServer) SetTop(context.Context, *ReqSetTop) (*DummyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTop not implemented")
}
func (UnimplementedImInterfaceServer) RemoveSession(context.Context, *ReqRemoveSession) (*DummyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (UnimplementedImInterfaceServer) SingleUnread(context.Context, *ReqSingleUnread) (*RspSingleUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleUnread not implemented")
}
func (UnimplementedImInterfaceServer) MyGroupUnread(context.Context, *DummyReq) (*RspMyGroupUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyGroupUnread not implemented")
}
func (UnimplementedImInterfaceServer) UpdateUnflwRead(context.Context, *DummyReq) (*DummyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnflwRead not implemented")
}
func (UnimplementedImInterfaceServer) GroupAssisMsg(context.Context, *ReqGroupAssisMsg) (*RspSessionMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAssisMsg not implemented")
}
func (UnimplementedImInterfaceServer) AckAssisMsg(context.Context, *ReqAckAssisMsg) (*DummyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckAssisMsg not implemented")
}
func (UnimplementedImInterfaceServer) SessionDetail(context.Context, *ReqSessionDetail) (*_type.SessionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDetail not implemented")
}
func (UnimplementedImInterfaceServer) BatchSessDetail(context.Context, *ReqSessionDetails) (*RspSessionDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSessDetail not implemented")
}
func (UnimplementedImInterfaceServer) BatchRmSessions(context.Context, *ReqBatRmSess) (*DummyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRmSessions not implemented")
}
func (UnimplementedImInterfaceServer) ShareList(context.Context, *ReqShareList) (*RspShareList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareList not implemented")
}
func (UnimplementedImInterfaceServer) SpecificSingleUnread(context.Context, *ReqSpecificSingleUnread) (*RspSpecificSingleUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecificSingleUnread not implemented")
}
func (UnimplementedImInterfaceServer) GetSpecificSessions(context.Context, *ReqGetSpecificSessions) (*RspSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificSessions not implemented")
}
func (UnimplementedImInterfaceServer) GetLiveInfo(context.Context, *ReqLiveInfo) (*RspLiveInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveInfo not implemented")
}
func (UnimplementedImInterfaceServer) GetTotalUnread(context.Context, *ReqTotalUnread) (*RspTotalUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalUnread not implemented")
}
func (UnimplementedImInterfaceServer) ShowClearUnreadUI(context.Context, *ReqShowClearUnreadUI) (*RspShowClearUnreadUI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowClearUnreadUI not implemented")
}
func (UnimplementedImInterfaceServer) CloseClearUnreadUI(context.Context, *ReqCloseClearUnreadUI) (*RspCloseClearUnreadUI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseClearUnreadUI not implemented")
}
func (UnimplementedImInterfaceServer) UpdateTotalUnread(context.Context, *ReqUpdateTotalUnread) (*RspUpdateTotalUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTotalUnread not implemented")
}
func (UnimplementedImInterfaceServer) mustEmbedUnimplementedImInterfaceServer() {}

// UnsafeImInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImInterfaceServer will
// result in compilation errors.
type UnsafeImInterfaceServer interface {
	mustEmbedUnimplementedImInterfaceServer()
}

func RegisterImInterfaceServer(s grpc.ServiceRegistrar, srv ImInterfaceServer) {
	s.RegisterService(&ImInterface_ServiceDesc, srv)
}

func _ImInterface_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SendMsg(ctx, req.(*ReqSendMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_SyncRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRelationSync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SyncRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_SyncRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SyncRelation(ctx, req.(*ReqRelationSync))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_SyncAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSyncAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SyncAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_SyncAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SyncAck(ctx, req.(*ReqSyncAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_SyncFetchSessionMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SyncFetchSessionMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_SyncFetchSessionMsgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SyncFetchSessionMsgs(ctx, req.(*ReqSessionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).GetSessions(ctx, req.(*ReqGetSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_NewSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).NewSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_NewSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).NewSessions(ctx, req.(*ReqNewSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_AckSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAckSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).AckSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_AckSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).AckSessions(ctx, req.(*ReqAckSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_UpdateAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).UpdateAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_UpdateAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).UpdateAck(ctx, req.(*ReqUpdateAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_SetTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetTop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SetTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_SetTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SetTop(ctx, req.(*ReqSetTop))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRemoveSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_RemoveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).RemoveSession(ctx, req.(*ReqRemoveSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_SingleUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSingleUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SingleUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_SingleUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SingleUnread(ctx, req.(*ReqSingleUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_MyGroupUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).MyGroupUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_MyGroupUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).MyGroupUnread(ctx, req.(*DummyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_UpdateUnflwRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).UpdateUnflwRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_UpdateUnflwRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).UpdateUnflwRead(ctx, req.(*DummyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_GroupAssisMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGroupAssisMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).GroupAssisMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_GroupAssisMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).GroupAssisMsg(ctx, req.(*ReqGroupAssisMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_AckAssisMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAckAssisMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).AckAssisMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_AckAssisMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).AckAssisMsg(ctx, req.(*ReqAckAssisMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_SessionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SessionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_SessionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SessionDetail(ctx, req.(*ReqSessionDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_BatchSessDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).BatchSessDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_BatchSessDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).BatchSessDetail(ctx, req.(*ReqSessionDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_BatchRmSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatRmSess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).BatchRmSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_BatchRmSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).BatchRmSessions(ctx, req.(*ReqBatRmSess))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_ShareList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqShareList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).ShareList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_ShareList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).ShareList(ctx, req.(*ReqShareList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_SpecificSingleUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSpecificSingleUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SpecificSingleUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_SpecificSingleUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SpecificSingleUnread(ctx, req.(*ReqSpecificSingleUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_GetSpecificSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSpecificSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).GetSpecificSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_GetSpecificSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).GetSpecificSessions(ctx, req.(*ReqGetSpecificSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_GetLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLiveInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).GetLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_GetLiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).GetLiveInfo(ctx, req.(*ReqLiveInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_GetTotalUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTotalUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).GetTotalUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_GetTotalUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).GetTotalUnread(ctx, req.(*ReqTotalUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_ShowClearUnreadUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqShowClearUnreadUI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).ShowClearUnreadUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_ShowClearUnreadUI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).ShowClearUnreadUI(ctx, req.(*ReqShowClearUnreadUI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_CloseClearUnreadUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCloseClearUnreadUI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).CloseClearUnreadUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_CloseClearUnreadUI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).CloseClearUnreadUI(ctx, req.(*ReqCloseClearUnreadUI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_UpdateTotalUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateTotalUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).UpdateTotalUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImInterface_UpdateTotalUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).UpdateTotalUnread(ctx, req.(*ReqUpdateTotalUnread))
	}
	return interceptor(ctx, in, info, handler)
}

// ImInterface_ServiceDesc is the grpc.ServiceDesc for ImInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.im.interface.v1.ImInterface",
	HandlerType: (*ImInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _ImInterface_SendMsg_Handler,
		},
		{
			MethodName: "SyncRelation",
			Handler:    _ImInterface_SyncRelation_Handler,
		},
		{
			MethodName: "SyncAck",
			Handler:    _ImInterface_SyncAck_Handler,
		},
		{
			MethodName: "SyncFetchSessionMsgs",
			Handler:    _ImInterface_SyncFetchSessionMsgs_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _ImInterface_GetSessions_Handler,
		},
		{
			MethodName: "NewSessions",
			Handler:    _ImInterface_NewSessions_Handler,
		},
		{
			MethodName: "AckSessions",
			Handler:    _ImInterface_AckSessions_Handler,
		},
		{
			MethodName: "UpdateAck",
			Handler:    _ImInterface_UpdateAck_Handler,
		},
		{
			MethodName: "SetTop",
			Handler:    _ImInterface_SetTop_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _ImInterface_RemoveSession_Handler,
		},
		{
			MethodName: "SingleUnread",
			Handler:    _ImInterface_SingleUnread_Handler,
		},
		{
			MethodName: "MyGroupUnread",
			Handler:    _ImInterface_MyGroupUnread_Handler,
		},
		{
			MethodName: "UpdateUnflwRead",
			Handler:    _ImInterface_UpdateUnflwRead_Handler,
		},
		{
			MethodName: "GroupAssisMsg",
			Handler:    _ImInterface_GroupAssisMsg_Handler,
		},
		{
			MethodName: "AckAssisMsg",
			Handler:    _ImInterface_AckAssisMsg_Handler,
		},
		{
			MethodName: "SessionDetail",
			Handler:    _ImInterface_SessionDetail_Handler,
		},
		{
			MethodName: "BatchSessDetail",
			Handler:    _ImInterface_BatchSessDetail_Handler,
		},
		{
			MethodName: "BatchRmSessions",
			Handler:    _ImInterface_BatchRmSessions_Handler,
		},
		{
			MethodName: "ShareList",
			Handler:    _ImInterface_ShareList_Handler,
		},
		{
			MethodName: "SpecificSingleUnread",
			Handler:    _ImInterface_SpecificSingleUnread_Handler,
		},
		{
			MethodName: "GetSpecificSessions",
			Handler:    _ImInterface_GetSpecificSessions_Handler,
		},
		{
			MethodName: "GetLiveInfo",
			Handler:    _ImInterface_GetLiveInfo_Handler,
		},
		{
			MethodName: "GetTotalUnread",
			Handler:    _ImInterface_GetTotalUnread_Handler,
		},
		{
			MethodName: "ShowClearUnreadUI",
			Handler:    _ImInterface_ShowClearUnreadUI_Handler,
		},
		{
			MethodName: "CloseClearUnreadUI",
			Handler:    _ImInterface_CloseClearUnreadUI_Handler,
		},
		{
			MethodName: "UpdateTotalUnread",
			Handler:    _ImInterface_UpdateTotalUnread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/im/interfaces/v1/im.proto",
}
