// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: bilibili/im/type/im.proto

package _type

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CmdId int32

const (
	CmdId_EN_CMD_ID_INVALID CmdId = 0 //非法cmd
	// msg_svr
	CmdId_EN_CMD_ID_SEND_MSG CmdId = 200001 // 发消息
	// sync_msg_svr
	CmdId_EN_CMD_ID_SYNC_MSG                CmdId = 500001 // 同步消息
	CmdId_EN_CMD_ID_SYNC_RELATION           CmdId = 500002 // 同步相关链
	CmdId_EN_CMD_ID_SYNC_ACK                CmdId = 500003 // 客户端同步消息完成后，向服务器确认同步进度
	CmdId_EN_CMD_ID_SYNC_FETCH_SESSION_MSGS CmdId = 500006 // 多端同步版本拉取消息
	// session_svr
	CmdId_EN_CMD_ID_SESSION_SVR_GET_SESSIONS      CmdId = 1000001 // 拉会话列表
	CmdId_EN_CMD_ID_SESSION_SVR_NEW_SESSIONS      CmdId = 1000002 // 新消息到达时获取会话列表
	CmdId_EN_CMD_ID_SESSION_SVR_ACK_SESSIONS      CmdId = 1000003 // 获取已读位置有更新的会话列表
	CmdId_EN_CMD_ID_SESSION_SVR_UPDATE_ACK        CmdId = 1000004 // 更新已读进度
	CmdId_EN_CMD_ID_SESSION_SVR_SET_TOP           CmdId = 1000005 // 置顶/取消置顶
	CmdId_EN_CMD_ID_SESSION_SVR_REMOVE_SESSION    CmdId = 1000007 // 删除会话
	CmdId_EN_CMD_ID_SESSION_SVR_SINGLE_UNREAD     CmdId = 1000008 // 单聊未读信息数
	CmdId_EN_CMD_ID_SESSION_SVR_MY_GROUP_UNREAD   CmdId = 1000009 // 我创建的应援团未读数
	CmdId_EN_CMD_ID_SESSION_SVR_UPDATE_UNFLW_READ CmdId = 1000010 // 未关注的人批量设置为已读
	CmdId_EN_CMD_ID_SESSION_SVR_GROUP_ASSIS_MSG   CmdId = 1000011 // 应援团消息助手
	CmdId_EN_CMD_ID_SESSION_SVR_ACK_ASSIS_MSG     CmdId = 1000012 // 更新应援团小助手消息已拉取进度
	CmdId_EN_CMD_ID_SESSION_SVR_SESSION_DETAIL    CmdId = 1000015 // 拉会话详情
	CmdId_EN_CMD_ID_SESSION_SVR_BATCH_SESS_DETAIL CmdId = 1000016 // 批量拉会话详情
	CmdId_EN_CMD_ID_SESSION_SVR_BATCH_RM_SESSIONS CmdId = 1000017 // 批量删除会话
)

// Enum value maps for CmdId.
var (
	CmdId_name = map[int32]string{
		0:       "EN_CMD_ID_INVALID",
		200001:  "EN_CMD_ID_SEND_MSG",
		500001:  "EN_CMD_ID_SYNC_MSG",
		500002:  "EN_CMD_ID_SYNC_RELATION",
		500003:  "EN_CMD_ID_SYNC_ACK",
		500006:  "EN_CMD_ID_SYNC_FETCH_SESSION_MSGS",
		1000001: "EN_CMD_ID_SESSION_SVR_GET_SESSIONS",
		1000002: "EN_CMD_ID_SESSION_SVR_NEW_SESSIONS",
		1000003: "EN_CMD_ID_SESSION_SVR_ACK_SESSIONS",
		1000004: "EN_CMD_ID_SESSION_SVR_UPDATE_ACK",
		1000005: "EN_CMD_ID_SESSION_SVR_SET_TOP",
		1000007: "EN_CMD_ID_SESSION_SVR_REMOVE_SESSION",
		1000008: "EN_CMD_ID_SESSION_SVR_SINGLE_UNREAD",
		1000009: "EN_CMD_ID_SESSION_SVR_MY_GROUP_UNREAD",
		1000010: "EN_CMD_ID_SESSION_SVR_UPDATE_UNFLW_READ",
		1000011: "EN_CMD_ID_SESSION_SVR_GROUP_ASSIS_MSG",
		1000012: "EN_CMD_ID_SESSION_SVR_ACK_ASSIS_MSG",
		1000015: "EN_CMD_ID_SESSION_SVR_SESSION_DETAIL",
		1000016: "EN_CMD_ID_SESSION_SVR_BATCH_SESS_DETAIL",
		1000017: "EN_CMD_ID_SESSION_SVR_BATCH_RM_SESSIONS",
	}
	CmdId_value = map[string]int32{
		"EN_CMD_ID_INVALID":                       0,
		"EN_CMD_ID_SEND_MSG":                      200001,
		"EN_CMD_ID_SYNC_MSG":                      500001,
		"EN_CMD_ID_SYNC_RELATION":                 500002,
		"EN_CMD_ID_SYNC_ACK":                      500003,
		"EN_CMD_ID_SYNC_FETCH_SESSION_MSGS":       500006,
		"EN_CMD_ID_SESSION_SVR_GET_SESSIONS":      1000001,
		"EN_CMD_ID_SESSION_SVR_NEW_SESSIONS":      1000002,
		"EN_CMD_ID_SESSION_SVR_ACK_SESSIONS":      1000003,
		"EN_CMD_ID_SESSION_SVR_UPDATE_ACK":        1000004,
		"EN_CMD_ID_SESSION_SVR_SET_TOP":           1000005,
		"EN_CMD_ID_SESSION_SVR_REMOVE_SESSION":    1000007,
		"EN_CMD_ID_SESSION_SVR_SINGLE_UNREAD":     1000008,
		"EN_CMD_ID_SESSION_SVR_MY_GROUP_UNREAD":   1000009,
		"EN_CMD_ID_SESSION_SVR_UPDATE_UNFLW_READ": 1000010,
		"EN_CMD_ID_SESSION_SVR_GROUP_ASSIS_MSG":   1000011,
		"EN_CMD_ID_SESSION_SVR_ACK_ASSIS_MSG":     1000012,
		"EN_CMD_ID_SESSION_SVR_SESSION_DETAIL":    1000015,
		"EN_CMD_ID_SESSION_SVR_BATCH_SESS_DETAIL": 1000016,
		"EN_CMD_ID_SESSION_SVR_BATCH_RM_SESSIONS": 1000017,
	}
)

func (x CmdId) Enum() *CmdId {
	p := new(CmdId)
	*p = x
	return p
}

func (x CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_im_type_im_proto_enumTypes[0].Descriptor()
}

func (CmdId) Type() protoreflect.EnumType {
	return &file_bilibili_im_type_im_proto_enumTypes[0]
}

func (x CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdId.Descriptor instead.
func (CmdId) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{0}
}

type ENUM_BIZ_MSG_TYPE int32

const (
	ENUM_BIZ_MSG_TYPE_BIZ_MSG_TYPE_NORMAL     ENUM_BIZ_MSG_TYPE = 0 //
	ENUM_BIZ_MSG_TYPE_BIZ_MSG_TYPE_CARD_VIDEO ENUM_BIZ_MSG_TYPE = 1 //
)

// Enum value maps for ENUM_BIZ_MSG_TYPE.
var (
	ENUM_BIZ_MSG_TYPE_name = map[int32]string{
		0: "BIZ_MSG_TYPE_NORMAL",
		1: "BIZ_MSG_TYPE_CARD_VIDEO",
	}
	ENUM_BIZ_MSG_TYPE_value = map[string]int32{
		"BIZ_MSG_TYPE_NORMAL":     0,
		"BIZ_MSG_TYPE_CARD_VIDEO": 1,
	}
)

func (x ENUM_BIZ_MSG_TYPE) Enum() *ENUM_BIZ_MSG_TYPE {
	p := new(ENUM_BIZ_MSG_TYPE)
	*p = x
	return p
}

func (x ENUM_BIZ_MSG_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENUM_BIZ_MSG_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_im_type_im_proto_enumTypes[1].Descriptor()
}

func (ENUM_BIZ_MSG_TYPE) Type() protoreflect.EnumType {
	return &file_bilibili_im_type_im_proto_enumTypes[1]
}

func (x ENUM_BIZ_MSG_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENUM_BIZ_MSG_TYPE.Descriptor instead.
func (ENUM_BIZ_MSG_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{1}
}

// 消息来源
type MsgSource int32

const (
	MsgSource_EN_MSG_SOURCE_UNKONW                   MsgSource = 0  //
	MsgSource_EN_MSG_SOURCE_IOS                      MsgSource = 1  //
	MsgSource_EN_MSG_SOURCE_ANDRIOD                  MsgSource = 2  //
	MsgSource_EN_MSG_SOURCE_H5                       MsgSource = 3  //
	MsgSource_EN_MSG_SOURCE_PC                       MsgSource = 4  //
	MsgSource_EN_MSG_SOURCE_BACKSTAGE                MsgSource = 5  //
	MsgSource_EN_MSG_SOURCE_BIZ                      MsgSource = 6  //
	MsgSource_EN_MSG_SOURCE_WEB                      MsgSource = 7  //
	MsgSource_EN_MSG_SOURCE_AUTOREPLY_BY_FOLLOWED    MsgSource = 8  //
	MsgSource_EN_MSG_SOURCE_AUTOREPLY_BY_RECEIVE_MSG MsgSource = 9  //
	MsgSource_EN_MSG_SOURCE_AUTOREPLY_BY_KEYWORDS    MsgSource = 10 //
	MsgSource_EN_MSG_SOURCE_AUTOREPLY_BY_VOYAGE      MsgSource = 11 //
	MsgSource_EN_MSG_SOURCE_VC_ATTACH_MSG            MsgSource = 12 //
)

// Enum value maps for MsgSource.
var (
	MsgSource_name = map[int32]string{
		0:  "EN_MSG_SOURCE_UNKONW",
		1:  "EN_MSG_SOURCE_IOS",
		2:  "EN_MSG_SOURCE_ANDRIOD",
		3:  "EN_MSG_SOURCE_H5",
		4:  "EN_MSG_SOURCE_PC",
		5:  "EN_MSG_SOURCE_BACKSTAGE",
		6:  "EN_MSG_SOURCE_BIZ",
		7:  "EN_MSG_SOURCE_WEB",
		8:  "EN_MSG_SOURCE_AUTOREPLY_BY_FOLLOWED",
		9:  "EN_MSG_SOURCE_AUTOREPLY_BY_RECEIVE_MSG",
		10: "EN_MSG_SOURCE_AUTOREPLY_BY_KEYWORDS",
		11: "EN_MSG_SOURCE_AUTOREPLY_BY_VOYAGE",
		12: "EN_MSG_SOURCE_VC_ATTACH_MSG",
	}
	MsgSource_value = map[string]int32{
		"EN_MSG_SOURCE_UNKONW":                   0,
		"EN_MSG_SOURCE_IOS":                      1,
		"EN_MSG_SOURCE_ANDRIOD":                  2,
		"EN_MSG_SOURCE_H5":                       3,
		"EN_MSG_SOURCE_PC":                       4,
		"EN_MSG_SOURCE_BACKSTAGE":                5,
		"EN_MSG_SOURCE_BIZ":                      6,
		"EN_MSG_SOURCE_WEB":                      7,
		"EN_MSG_SOURCE_AUTOREPLY_BY_FOLLOWED":    8,
		"EN_MSG_SOURCE_AUTOREPLY_BY_RECEIVE_MSG": 9,
		"EN_MSG_SOURCE_AUTOREPLY_BY_KEYWORDS":    10,
		"EN_MSG_SOURCE_AUTOREPLY_BY_VOYAGE":      11,
		"EN_MSG_SOURCE_VC_ATTACH_MSG":            12,
	}
)

func (x MsgSource) Enum() *MsgSource {
	p := new(MsgSource)
	*p = x
	return p
}

func (x MsgSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgSource) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_im_type_im_proto_enumTypes[2].Descriptor()
}

func (MsgSource) Type() protoreflect.EnumType {
	return &file_bilibili_im_type_im_proto_enumTypes[2]
}

func (x MsgSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgSource.Descriptor instead.
func (MsgSource) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{2}
}

// 消息类型
type MsgType int32

const (
	// 基础消息类型
	MsgType_EN_INVALID_MSG_TYPE      MsgType = 0 // 空空的~
	MsgType_EN_MSG_TYPE_TEXT         MsgType = 1 // 文本消息
	MsgType_EN_MSG_TYPE_PIC          MsgType = 2 // 图片消息
	MsgType_EN_MSG_TYPE_AUDIO        MsgType = 3 // 语音消息
	MsgType_EN_MSG_TYPE_SHARE        MsgType = 4 // 分享消息
	MsgType_EN_MSG_TYPE_DRAW_BACK    MsgType = 5 // 撤回消息
	MsgType_EN_MSG_TYPE_CUSTOM_FACE  MsgType = 6 // 自定义表情
	MsgType_EN_MSG_TYPE_SHARE_V2     MsgType = 7 // 分享v2消息
	MsgType_EN_MSG_TYPE_SYS_CANCEL   MsgType = 8 // 系统撤销
	MsgType_EN_MSG_TYPE_MINI_PROGRAM MsgType = 9 // 小程序
	// 扩展消息类型
	MsgType_EN_MSG_TYPE_NOTIFY_MSG        MsgType = 10 // 业务通知
	MsgType_EN_MSG_TYPE_VIDEO_CARD        MsgType = 11 // 视频卡片
	MsgType_EN_MSG_TYPE_ARTICLE_CARD      MsgType = 12 // 专栏卡片
	MsgType_EN_MSG_TYPE_PICTURE_CARD      MsgType = 13 // 图片卡
	MsgType_EN_MSG_TYPE_COMMON_SHARE_CARD MsgType = 14 // 异形卡
	MsgType_EN_MSG_TYPE_BIZ_MSG_TYPE      MsgType = 50 //
	MsgType_EN_MSG_TYPE_MODIFY_MSG_TYPE   MsgType = 51 //
	// 功能类系统消息类型
	MsgType_EN_MSG_TYPE_GROUP_MEMBER_CHANGED            MsgType = 101 // 群成员变更
	MsgType_EN_MSG_TYPE_GROUP_STATUS_CHANGED            MsgType = 102 // 群状态变更
	MsgType_EN_MSG_TYPE_GROUP_DYNAMIC_CHANGED           MsgType = 103 // 群动态变更
	MsgType_EN_MSG_TYPE_GROUP_LIST_CHANGED              MsgType = 104 // 群列表变更
	MsgType_EM_MSG_TYPE_FRIEND_LIST_CHANGED             MsgType = 105 // 好友列表变更
	MsgType_EN_MSG_TYPE_GROUP_DETAIL_CHANGED            MsgType = 106 // 群详情发生变化
	MsgType_EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED       MsgType = 107 // 群成员角色发生变化
	MsgType_EN_MSG_TYPE_NOTICE_WATCH_LIST               MsgType = 108 //
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED       MsgType = 109 // 消息系统，收到新的reply
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED          MsgType = 110 //
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED      MsgType = 111 //
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_UP_RECIEVED          MsgType = 112 //
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED_V2    MsgType = 113 //
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED_V2       MsgType = 114 //
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED_V2   MsgType = 115 //
	MsgType_EN_MSG_TYPE_GROUP_DETAIL_CHANGED_MULTI      MsgType = 116 // 群详情发生变化,多端同步版本需要即时消息，无需落地
	MsgType_EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED_MULTI MsgType = 117 // 群成员角色发生变化,多端同步版本需要即时消息，无需落地
	MsgType_EN_MSG_TYPE_NOTIFY_ANTI_DISTURB             MsgType = 118 //
	// 系统通知栏消息类型
	MsgType_EN_MSG_TYPE_SYS_GROUP_DISSOLVED                 MsgType = 201 // 群解散
	MsgType_EN_MSG_TYPE_SYS_GROUP_JOINED                    MsgType = 202 // 入群
	MsgType_EN_MSG_TYPE_SYS_GROUP_MEMBER_EXITED             MsgType = 203 // 成员主动退群
	MsgType_EN_MSG_TYPE_SYS_GROUP_ADMIN_FIRED               MsgType = 204 // 房管被撤
	MsgType_EN_MSG_TYPE_SYS_GROUP_MEMBER_KICKED             MsgType = 205 // 成员被T
	MsgType_EN_MSG_TYPE_SYS_GROUP_ADMIN_KICK_OFF            MsgType = 206 // 管理T人
	MsgType_EN_MSG_TYPE_SYS_GROUP_ADMIN_DUTY                MsgType = 207 // 管理上任
	MsgType_EN_MSG_TYPE_SYS_GROUP_AUTO_CREATED              MsgType = 208 // 自动创建
	MsgType_EN_MSG_TYPE_SYS_FRIEND_APPLY                    MsgType = 210 // 好友申请
	MsgType_EN_MSG_TYPE_SYS_FRIEND_APPLY_ACK                MsgType = 211 // 好友申请通过
	MsgType_EN_MSG_TYPE_SYS_GROUP_APPLY_FOR_JOINING         MsgType = 212 // 用户加群申请
	MsgType_EN_MSG_TYPE_SYS_GROUP_ADMIN_ACCEPTED_USER_APPLY MsgType = 213 // 通知管理员,有其他管理员已经同意用户加群
	// 聊天窗口通知消息类型
	MsgType_EN_MSG_TYPE_CHAT_MEMBER_JOINED   MsgType = 301 // 入群
	MsgType_EN_MSG_TYPE_CHAT_MEMBER_EXITED   MsgType = 302 // 退群
	MsgType_EN_MSG_TYPE_CHAT_GROUP_FREEZED   MsgType = 303 // 冻结
	MsgType_EN_MSG_TYPE_CHAT_GROUP_DISSOLVED MsgType = 304 // 解散
	MsgType_EN_MSG_TYPE_CHAT_GROUP_CREATED   MsgType = 305 // 开通应援团
	MsgType_EN_MSG_TYPE_CHAT_POPUP_SESSION   MsgType = 306 // 弹出会话
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:   "EN_INVALID_MSG_TYPE",
		1:   "EN_MSG_TYPE_TEXT",
		2:   "EN_MSG_TYPE_PIC",
		3:   "EN_MSG_TYPE_AUDIO",
		4:   "EN_MSG_TYPE_SHARE",
		5:   "EN_MSG_TYPE_DRAW_BACK",
		6:   "EN_MSG_TYPE_CUSTOM_FACE",
		7:   "EN_MSG_TYPE_SHARE_V2",
		8:   "EN_MSG_TYPE_SYS_CANCEL",
		9:   "EN_MSG_TYPE_MINI_PROGRAM",
		10:  "EN_MSG_TYPE_NOTIFY_MSG",
		11:  "EN_MSG_TYPE_VIDEO_CARD",
		12:  "EN_MSG_TYPE_ARTICLE_CARD",
		13:  "EN_MSG_TYPE_PICTURE_CARD",
		14:  "EN_MSG_TYPE_COMMON_SHARE_CARD",
		50:  "EN_MSG_TYPE_BIZ_MSG_TYPE",
		51:  "EN_MSG_TYPE_MODIFY_MSG_TYPE",
		101: "EN_MSG_TYPE_GROUP_MEMBER_CHANGED",
		102: "EN_MSG_TYPE_GROUP_STATUS_CHANGED",
		103: "EN_MSG_TYPE_GROUP_DYNAMIC_CHANGED",
		104: "EN_MSG_TYPE_GROUP_LIST_CHANGED",
		105: "EM_MSG_TYPE_FRIEND_LIST_CHANGED",
		106: "EN_MSG_TYPE_GROUP_DETAIL_CHANGED",
		107: "EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED",
		108: "EN_MSG_TYPE_NOTICE_WATCH_LIST",
		109: "EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED",
		110: "EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED",
		111: "EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED",
		112: "EN_MSG_TYPE_NOTIFY_NEW_UP_RECIEVED",
		113: "EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED_V2",
		114: "EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED_V2",
		115: "EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED_V2",
		116: "EN_MSG_TYPE_GROUP_DETAIL_CHANGED_MULTI",
		117: "EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED_MULTI",
		118: "EN_MSG_TYPE_NOTIFY_ANTI_DISTURB",
		201: "EN_MSG_TYPE_SYS_GROUP_DISSOLVED",
		202: "EN_MSG_TYPE_SYS_GROUP_JOINED",
		203: "EN_MSG_TYPE_SYS_GROUP_MEMBER_EXITED",
		204: "EN_MSG_TYPE_SYS_GROUP_ADMIN_FIRED",
		205: "EN_MSG_TYPE_SYS_GROUP_MEMBER_KICKED",
		206: "EN_MSG_TYPE_SYS_GROUP_ADMIN_KICK_OFF",
		207: "EN_MSG_TYPE_SYS_GROUP_ADMIN_DUTY",
		208: "EN_MSG_TYPE_SYS_GROUP_AUTO_CREATED",
		210: "EN_MSG_TYPE_SYS_FRIEND_APPLY",
		211: "EN_MSG_TYPE_SYS_FRIEND_APPLY_ACK",
		212: "EN_MSG_TYPE_SYS_GROUP_APPLY_FOR_JOINING",
		213: "EN_MSG_TYPE_SYS_GROUP_ADMIN_ACCEPTED_USER_APPLY",
		301: "EN_MSG_TYPE_CHAT_MEMBER_JOINED",
		302: "EN_MSG_TYPE_CHAT_MEMBER_EXITED",
		303: "EN_MSG_TYPE_CHAT_GROUP_FREEZED",
		304: "EN_MSG_TYPE_CHAT_GROUP_DISSOLVED",
		305: "EN_MSG_TYPE_CHAT_GROUP_CREATED",
		306: "EN_MSG_TYPE_CHAT_POPUP_SESSION",
	}
	MsgType_value = map[string]int32{
		"EN_INVALID_MSG_TYPE":                             0,
		"EN_MSG_TYPE_TEXT":                                1,
		"EN_MSG_TYPE_PIC":                                 2,
		"EN_MSG_TYPE_AUDIO":                               3,
		"EN_MSG_TYPE_SHARE":                               4,
		"EN_MSG_TYPE_DRAW_BACK":                           5,
		"EN_MSG_TYPE_CUSTOM_FACE":                         6,
		"EN_MSG_TYPE_SHARE_V2":                            7,
		"EN_MSG_TYPE_SYS_CANCEL":                          8,
		"EN_MSG_TYPE_MINI_PROGRAM":                        9,
		"EN_MSG_TYPE_NOTIFY_MSG":                          10,
		"EN_MSG_TYPE_VIDEO_CARD":                          11,
		"EN_MSG_TYPE_ARTICLE_CARD":                        12,
		"EN_MSG_TYPE_PICTURE_CARD":                        13,
		"EN_MSG_TYPE_COMMON_SHARE_CARD":                   14,
		"EN_MSG_TYPE_BIZ_MSG_TYPE":                        50,
		"EN_MSG_TYPE_MODIFY_MSG_TYPE":                     51,
		"EN_MSG_TYPE_GROUP_MEMBER_CHANGED":                101,
		"EN_MSG_TYPE_GROUP_STATUS_CHANGED":                102,
		"EN_MSG_TYPE_GROUP_DYNAMIC_CHANGED":               103,
		"EN_MSG_TYPE_GROUP_LIST_CHANGED":                  104,
		"EM_MSG_TYPE_FRIEND_LIST_CHANGED":                 105,
		"EN_MSG_TYPE_GROUP_DETAIL_CHANGED":                106,
		"EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED":           107,
		"EN_MSG_TYPE_NOTICE_WATCH_LIST":                   108,
		"EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED":           109,
		"EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED":              110,
		"EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED":          111,
		"EN_MSG_TYPE_NOTIFY_NEW_UP_RECIEVED":              112,
		"EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED_V2":        113,
		"EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED_V2":           114,
		"EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED_V2":       115,
		"EN_MSG_TYPE_GROUP_DETAIL_CHANGED_MULTI":          116,
		"EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED_MULTI":     117,
		"EN_MSG_TYPE_NOTIFY_ANTI_DISTURB":                 118,
		"EN_MSG_TYPE_SYS_GROUP_DISSOLVED":                 201,
		"EN_MSG_TYPE_SYS_GROUP_JOINED":                    202,
		"EN_MSG_TYPE_SYS_GROUP_MEMBER_EXITED":             203,
		"EN_MSG_TYPE_SYS_GROUP_ADMIN_FIRED":               204,
		"EN_MSG_TYPE_SYS_GROUP_MEMBER_KICKED":             205,
		"EN_MSG_TYPE_SYS_GROUP_ADMIN_KICK_OFF":            206,
		"EN_MSG_TYPE_SYS_GROUP_ADMIN_DUTY":                207,
		"EN_MSG_TYPE_SYS_GROUP_AUTO_CREATED":              208,
		"EN_MSG_TYPE_SYS_FRIEND_APPLY":                    210,
		"EN_MSG_TYPE_SYS_FRIEND_APPLY_ACK":                211,
		"EN_MSG_TYPE_SYS_GROUP_APPLY_FOR_JOINING":         212,
		"EN_MSG_TYPE_SYS_GROUP_ADMIN_ACCEPTED_USER_APPLY": 213,
		"EN_MSG_TYPE_CHAT_MEMBER_JOINED":                  301,
		"EN_MSG_TYPE_CHAT_MEMBER_EXITED":                  302,
		"EN_MSG_TYPE_CHAT_GROUP_FREEZED":                  303,
		"EN_MSG_TYPE_CHAT_GROUP_DISSOLVED":                304,
		"EN_MSG_TYPE_CHAT_GROUP_CREATED":                  305,
		"EN_MSG_TYPE_CHAT_POPUP_SESSION":                  306,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_im_type_im_proto_enumTypes[3].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_bilibili_im_type_im_proto_enumTypes[3]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{3}
}

// 接收方类型
type RecverType int32

const (
	RecverType_EN_NO_MEANING        RecverType = 0 //
	RecverType_EN_RECVER_TYPE_PEER  RecverType = 1 // 单人
	RecverType_EN_RECVER_TYPE_GROUP RecverType = 2 // 群
	RecverType_EN_RECVER_TYPE_PEERS RecverType = 3 // 多人
)

// Enum value maps for RecverType.
var (
	RecverType_name = map[int32]string{
		0: "EN_NO_MEANING",
		1: "EN_RECVER_TYPE_PEER",
		2: "EN_RECVER_TYPE_GROUP",
		3: "EN_RECVER_TYPE_PEERS",
	}
	RecverType_value = map[string]int32{
		"EN_NO_MEANING":        0,
		"EN_RECVER_TYPE_PEER":  1,
		"EN_RECVER_TYPE_GROUP": 2,
		"EN_RECVER_TYPE_PEERS": 3,
	}
)

func (x RecverType) Enum() *RecverType {
	p := new(RecverType)
	*p = x
	return p
}

func (x RecverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecverType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_im_type_im_proto_enumTypes[4].Descriptor()
}

func (RecverType) Type() protoreflect.EnumType {
	return &file_bilibili_im_type_im_proto_enumTypes[4]
}

func (x RecverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecverType.Descriptor instead.
func (RecverType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{4}
}

type RelationLogType int32

const (
	RelationLogType_EN_INVALID_LOG_TYPE RelationLogType = 0 //
	RelationLogType_EN_ADD_FRIEND       RelationLogType = 1 // 添加好友
	RelationLogType_EN_REMOVE_FRIEND    RelationLogType = 2 // 删除好友
	RelationLogType_EN_JOIN_GROUP       RelationLogType = 3 // 加入群
	RelationLogType_EN_EXIT_GROUP       RelationLogType = 4 // 退出群
)

// Enum value maps for RelationLogType.
var (
	RelationLogType_name = map[int32]string{
		0: "EN_INVALID_LOG_TYPE",
		1: "EN_ADD_FRIEND",
		2: "EN_REMOVE_FRIEND",
		3: "EN_JOIN_GROUP",
		4: "EN_EXIT_GROUP",
	}
	RelationLogType_value = map[string]int32{
		"EN_INVALID_LOG_TYPE": 0,
		"EN_ADD_FRIEND":       1,
		"EN_REMOVE_FRIEND":    2,
		"EN_JOIN_GROUP":       3,
		"EN_EXIT_GROUP":       4,
	}
)

func (x RelationLogType) Enum() *RelationLogType {
	p := new(RelationLogType)
	*p = x
	return p
}

func (x RelationLogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationLogType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_im_type_im_proto_enumTypes[5].Descriptor()
}

func (RelationLogType) Type() protoreflect.EnumType {
	return &file_bilibili_im_type_im_proto_enumTypes[5]
}

func (x RelationLogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationLogType.Descriptor instead.
func (RelationLogType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{5}
}

type SESSION_TYPE int32

const (
	SESSION_TYPE_INVALID_SESSION_TYPE     SESSION_TYPE = 0 //
	SESSION_TYPE_UN_FOLD_SESSION          SESSION_TYPE = 1 //
	SESSION_TYPE_UN_FOLLOW_SINGLE_SESSION SESSION_TYPE = 2 //
	SESSION_TYPE_MY_GROUP_SESSION         SESSION_TYPE = 3 //
	SESSION_TYPE_ALL_SESSION              SESSION_TYPE = 4 //
)

// Enum value maps for SESSION_TYPE.
var (
	SESSION_TYPE_name = map[int32]string{
		0: "INVALID_SESSION_TYPE",
		1: "UN_FOLD_SESSION",
		2: "UN_FOLLOW_SINGLE_SESSION",
		3: "MY_GROUP_SESSION",
		4: "ALL_SESSION",
	}
	SESSION_TYPE_value = map[string]int32{
		"INVALID_SESSION_TYPE":     0,
		"UN_FOLD_SESSION":          1,
		"UN_FOLLOW_SINGLE_SESSION": 2,
		"MY_GROUP_SESSION":         3,
		"ALL_SESSION":              4,
	}
)

func (x SESSION_TYPE) Enum() *SESSION_TYPE {
	p := new(SESSION_TYPE)
	*p = x
	return p
}

func (x SESSION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SESSION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_im_type_im_proto_enumTypes[6].Descriptor()
}

func (SESSION_TYPE) Type() protoreflect.EnumType {
	return &file_bilibili_im_type_im_proto_enumTypes[6]
}

func (x SESSION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SESSION_TYPE.Descriptor instead.
func (SESSION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{6}
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PicUrl string `protobuf:"bytes,2,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{0}
}

func (x *AccountInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountInfo) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

type FriendRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户mid
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 用户昵称
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// 头像url
	Face string `protobuf:"bytes,3,opt,name=face,proto3" json:"face,omitempty"`
	// vip类型
	// 0:无 1:月度大会员 2:年度大会员
	VipLevel uint32 `protobuf:"varint,4,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
}

func (x *FriendRelation) Reset() {
	*x = FriendRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRelation) ProtoMessage() {}

func (x *FriendRelation) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRelation.ProtoReflect.Descriptor instead.
func (*FriendRelation) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{1}
}

func (x *FriendRelation) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FriendRelation) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *FriendRelation) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *FriendRelation) GetVipLevel() uint32 {
	if x != nil {
		return x.VipLevel
	}
	return 0
}

type GroupRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OwnerUid uint64 `protobuf:"varint,2,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	GroupType uint32 `protobuf:"varint,3,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`
	GroupLevel uint32 `protobuf:"varint,4,opt,name=group_level,json=groupLevel,proto3" json:"group_level,omitempty"`
	GroupCover string `protobuf:"bytes,5,opt,name=group_cover,json=groupCover,proto3" json:"group_cover,omitempty"`
	GroupName string `protobuf:"bytes,6,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupNotice string `protobuf:"bytes,7,opt,name=group_notice,json=groupNotice,proto3" json:"group_notice,omitempty"`
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	MemberRole int32 `protobuf:"varint,9,opt,name=member_role,json=memberRole,proto3" json:"member_role,omitempty"`
	FansMedalName string `protobuf:"bytes,10,opt,name=fans_medal_name,json=fansMedalName,proto3" json:"fans_medal_name,omitempty"`
	RoomId uint64 `protobuf:"varint,11,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *GroupRelation) Reset() {
	*x = GroupRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRelation) ProtoMessage() {}

func (x *GroupRelation) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRelation.ProtoReflect.Descriptor instead.
func (*GroupRelation) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{2}
}

func (x *GroupRelation) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupRelation) GetOwnerUid() uint64 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *GroupRelation) GetGroupType() uint32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *GroupRelation) GetGroupLevel() uint32 {
	if x != nil {
		return x.GroupLevel
	}
	return 0
}

func (x *GroupRelation) GetGroupCover() string {
	if x != nil {
		return x.GroupCover
	}
	return ""
}

func (x *GroupRelation) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupRelation) GetGroupNotice() string {
	if x != nil {
		return x.GroupNotice
	}
	return ""
}

func (x *GroupRelation) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GroupRelation) GetMemberRole() int32 {
	if x != nil {
		return x.MemberRole
	}
	return 0
}

func (x *GroupRelation) GetFansMedalName() string {
	if x != nil {
		return x.FansMedalName
	}
	return ""
}

func (x *GroupRelation) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// 关键词高亮文本
type HighText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// 表示高亮文本应该高亮第几个匹配的文本，ps：比如，“有疑问请联系客服，联系客服时，请说明具体的情况”，一共有2个匹配的文本，要高亮第一个匹配的，则index=1
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *HighText) Reset() {
	*x = HighText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighText) ProtoMessage() {}

func (x *HighText) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighText.ProtoReflect.Descriptor instead.
func (*HighText) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{3}
}

func (x *HighText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HighText) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HighText) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ImgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	ImageType string `protobuf:"bytes,4,opt,name=imageType,proto3" json:"imageType,omitempty"`
}

func (x *ImgInfo) Reset() {
	*x = ImgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgInfo) ProtoMessage() {}

func (x *ImgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgInfo.ProtoReflect.Descriptor instead.
func (*ImgInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{4}
}

func (x *ImgInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImgInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImgInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImgInfo) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

// 关键词命中信息
type KeyHitInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Toast string `protobuf:"bytes,1,opt,name=toast,proto3" json:"toast,omitempty"`
	RuleId uint32 `protobuf:"varint,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	HighText []*HighText `protobuf:"bytes,3,rep,name=high_text,json=highText,proto3" json:"high_text,omitempty"` //
}

func (x *KeyHitInfos) Reset() {
	*x = KeyHitInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyHitInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyHitInfos) ProtoMessage() {}

func (x *KeyHitInfos) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyHitInfos.ProtoReflect.Descriptor instead.
func (*KeyHitInfos) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{5}
}

func (x *KeyHitInfos) GetToast() string {
	if x != nil {
		return x.Toast
	}
	return ""
}

func (x *KeyHitInfos) GetRuleId() uint32 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *KeyHitInfos) GetHighText() []*HighText {
	if x != nil {
		return x.HighText
	}
	return nil
}

type Medal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	MedalId int32 `protobuf:"varint,2,opt,name=medal_id,json=medalId,proto3" json:"medal_id,omitempty"`
	Level int32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	MedalName string `protobuf:"bytes,4,opt,name=medal_name,json=medalName,proto3" json:"medal_name,omitempty"`
	Score int32 `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Intimacy int32 `protobuf:"varint,6,opt,name=intimacy,proto3" json:"intimacy,omitempty"`
	MasterStatus int32 `protobuf:"varint,7,opt,name=master_status,json=masterStatus,proto3" json:"master_status,omitempty"`
	IsReceive int32 `protobuf:"varint,8,opt,name=is_receive,json=isReceive,proto3" json:"is_receive,omitempty"`
	MedalColorStart int64 `protobuf:"varint,9,opt,name=medal_color_start,json=medalColorStart,proto3" json:"medal_color_start,omitempty"`
	MedalColorEnd int64 `protobuf:"varint,10,opt,name=medal_color_end,json=medalColorEnd,proto3" json:"medal_color_end,omitempty"`
	MedalColorBorder int64 `protobuf:"varint,11,opt,name=medal_color_border,json=medalColorBorder,proto3" json:"medal_color_border,omitempty"`
	MedalColorName int64 `protobuf:"varint,12,opt,name=medal_color_name,json=medalColorName,proto3" json:"medal_color_name,omitempty"`
	MedalColorLevel int64 `protobuf:"varint,13,opt,name=medal_color_level,json=medalColorLevel,proto3" json:"medal_color_level,omitempty"`
	GuardLevel int64 `protobuf:"varint,14,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`
}

func (x *Medal) Reset() {
	*x = Medal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Medal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Medal) ProtoMessage() {}

func (x *Medal) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Medal.ProtoReflect.Descriptor instead.
func (*Medal) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{6}
}

func (x *Medal) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Medal) GetMedalId() int32 {
	if x != nil {
		return x.MedalId
	}
	return 0
}

func (x *Medal) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Medal) GetMedalName() string {
	if x != nil {
		return x.MedalName
	}
	return ""
}

func (x *Medal) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Medal) GetIntimacy() int32 {
	if x != nil {
		return x.Intimacy
	}
	return 0
}

func (x *Medal) GetMasterStatus() int32 {
	if x != nil {
		return x.MasterStatus
	}
	return 0
}

func (x *Medal) GetIsReceive() int32 {
	if x != nil {
		return x.IsReceive
	}
	return 0
}

func (x *Medal) GetMedalColorStart() int64 {
	if x != nil {
		return x.MedalColorStart
	}
	return 0
}

func (x *Medal) GetMedalColorEnd() int64 {
	if x != nil {
		return x.MedalColorEnd
	}
	return 0
}

func (x *Medal) GetMedalColorBorder() int64 {
	if x != nil {
		return x.MedalColorBorder
	}
	return 0
}

func (x *Medal) GetMedalColorName() int64 {
	if x != nil {
		return x.MedalColorName
	}
	return 0
}

func (x *Medal) GetMedalColorLevel() int64 {
	if x != nil {
		return x.MedalColorLevel
	}
	return 0
}

func (x *Medal) GetGuardLevel() int64 {
	if x != nil {
		return x.GuardLevel
	}
	return 0
}

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发送方mid
	SenderUid uint64 `protobuf:"varint,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	// 接收方类型
	ReceiverType RecverType `protobuf:"varint,2,opt,name=receiver_type,json=receiverType,proto3,enum=bilibili.im.type.RecverType" json:"receiver_type,omitempty"`
	// 接收方mid
	ReceiverId uint64 `protobuf:"varint,3,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// 客户端的序列id,用于服务端去重
	CliMsgId uint64 `protobuf:"varint,4,opt,name=cli_msg_id,json=cliMsgId,proto3" json:"cli_msg_id,omitempty"`
	// 消息类型
	MsgType MsgType `protobuf:"varint,5,opt,name=msg_type,json=msgType,proto3,enum=bilibili.im.type.MsgType" json:"msg_type,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	// 服务端的序列号x
	MsgSeqno uint64 `protobuf:"varint,7,opt,name=msg_seqno,json=msgSeqno,proto3" json:"msg_seqno,omitempty"`
	// 消息发送时间（服务端时间）
	Timestamp uint64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// @用户列表
	AtUids []uint64 `protobuf:"varint,9,rep,packed,name=at_uids,json=atUids,proto3" json:"at_uids,omitempty"`
	// 多人消息
	RecverIds []uint64 `protobuf:"varint,10,rep,packed,name=recver_ids,json=recverIds,proto3" json:"recver_ids,omitempty"`
	// 消息唯一标示
	MsgKey uint64 `protobuf:"varint,11,opt,name=msg_key,json=msgKey,proto3" json:"msg_key,omitempty"`
	// 消息状态
	MsgStatus uint32 `protobuf:"varint,12,opt,name=msg_status,json=msgStatus,proto3" json:"msg_status,omitempty"`
	// 是否为系统撤销
	SysCancel bool `protobuf:"varint,13,opt,name=sys_cancel,json=sysCancel,proto3" json:"sys_cancel,omitempty"`
	// 通知码
	NotifyCode string `protobuf:"bytes,14,opt,name=notify_code,json=notifyCode,proto3" json:"notify_code,omitempty"`
	// 消息来源
	MsgSource MsgSource `protobuf:"varint,15,opt,name=msg_source,json=msgSource,proto3,enum=bilibili.im.type.MsgSource" json:"msg_source,omitempty"`
	// 如果msg.content有表情字符，则该参数需要置为1
	NewFaceVersion int32 `protobuf:"varint,16,opt,name=new_face_version,json=newFaceVersion,proto3" json:"new_face_version,omitempty"`
	// 命中关键词信息
	KeyHitInfos *KeyHitInfos `protobuf:"bytes,17,opt,name=key_hit_infos,json=keyHitInfos,proto3" json:"key_hit_infos,omitempty"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{7}
}

func (x *Msg) GetSenderUid() uint64 {
	if x != nil {
		return x.SenderUid
	}
	return 0
}

func (x *Msg) GetReceiverType() RecverType {
	if x != nil {
		return x.ReceiverType
	}
	return RecverType_EN_NO_MEANING
}

func (x *Msg) GetReceiverId() uint64 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *Msg) GetCliMsgId() uint64 {
	if x != nil {
		return x.CliMsgId
	}
	return 0
}

func (x *Msg) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_EN_INVALID_MSG_TYPE
}

func (x *Msg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Msg) GetMsgSeqno() uint64 {
	if x != nil {
		return x.MsgSeqno
	}
	return 0
}

func (x *Msg) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Msg) GetAtUids() []uint64 {
	if x != nil {
		return x.AtUids
	}
	return nil
}

func (x *Msg) GetRecverIds() []uint64 {
	if x != nil {
		return x.RecverIds
	}
	return nil
}

func (x *Msg) GetMsgKey() uint64 {
	if x != nil {
		return x.MsgKey
	}
	return 0
}

func (x *Msg) GetMsgStatus() uint32 {
	if x != nil {
		return x.MsgStatus
	}
	return 0
}

func (x *Msg) GetSysCancel() bool {
	if x != nil {
		return x.SysCancel
	}
	return false
}

func (x *Msg) GetNotifyCode() string {
	if x != nil {
		return x.NotifyCode
	}
	return ""
}

func (x *Msg) GetMsgSource() MsgSource {
	if x != nil {
		return x.MsgSource
	}
	return MsgSource_EN_MSG_SOURCE_UNKONW
}

func (x *Msg) GetNewFaceVersion() int32 {
	if x != nil {
		return x.NewFaceVersion
	}
	return 0
}

func (x *Msg) GetKeyHitInfos() *KeyHitInfos {
	if x != nil {
		return x.KeyHitInfos
	}
	return nil
}

type RelationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作类型
	LogType RelationLogType `protobuf:"varint,1,opt,name=log_type,json=logType,proto3,enum=bilibili.im.type.RelationLogType" json:"log_type,omitempty"`
	// 操作seqno
	OplogSeqno uint64 `protobuf:"varint,2,opt,name=oplog_seqno,json=oplogSeqno,proto3" json:"oplog_seqno,omitempty"`
	// 好友信息
	FriendRelation *FriendRelation `protobuf:"bytes,3,opt,name=friend_relation,json=friendRelation,proto3" json:"friend_relation,omitempty"`
	// 群信息
	GroupRelation *GroupRelation `protobuf:"bytes,4,opt,name=group_relation,json=groupRelation,proto3" json:"group_relation,omitempty"`
}

func (x *RelationLog) Reset() {
	*x = RelationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationLog) ProtoMessage() {}

func (x *RelationLog) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationLog.ProtoReflect.Descriptor instead.
func (*RelationLog) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{8}
}

func (x *RelationLog) GetLogType() RelationLogType {
	if x != nil {
		return x.LogType
	}
	return RelationLogType_EN_INVALID_LOG_TYPE
}

func (x *RelationLog) GetOplogSeqno() uint64 {
	if x != nil {
		return x.OplogSeqno
	}
	return 0
}

func (x *RelationLog) GetFriendRelation() *FriendRelation {
	if x != nil {
		return x.FriendRelation
	}
	return nil
}

func (x *RelationLog) GetGroupRelation() *GroupRelation {
	if x != nil {
		return x.GroupRelation
	}
	return nil
}

// 会话详情
type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkerId uint64 `protobuf:"varint,1,opt,name=talker_id,json=talkerId,proto3" json:"talker_id,omitempty"`
	SessionType uint32 `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
	AtSeqno uint64 `protobuf:"varint,3,opt,name=at_seqno,json=atSeqno,proto3" json:"at_seqno,omitempty"`
	TopTs uint64 `protobuf:"varint,4,opt,name=top_ts,json=topTs,proto3" json:"top_ts,omitempty"`
	GroupName string `protobuf:"bytes,5,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupCover string `protobuf:"bytes,6,opt,name=group_cover,json=groupCover,proto3" json:"group_cover,omitempty"`
	IsFollow uint32 `protobuf:"varint,7,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	IsDnd uint32 `protobuf:"varint,8,opt,name=is_dnd,json=isDnd,proto3" json:"is_dnd,omitempty"`
	AckSeqno uint64 `protobuf:"varint,9,opt,name=ack_seqno,json=ackSeqno,proto3" json:"ack_seqno,omitempty"`
	AckTs uint64 `protobuf:"varint,10,opt,name=ack_ts,json=ackTs,proto3" json:"ack_ts,omitempty"`
	SessionTs uint64 `protobuf:"varint,11,opt,name=session_ts,json=sessionTs,proto3" json:"session_ts,omitempty"`
	UnreadCount uint32 `protobuf:"varint,12,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	LastMsg *Msg `protobuf:"bytes,13,opt,name=last_msg,json=lastMsg,proto3" json:"last_msg,omitempty"`
	GroupType uint32 `protobuf:"varint,14,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`
	CanFold uint32 `protobuf:"varint,15,opt,name=can_fold,json=canFold,proto3" json:"can_fold,omitempty"`
	Status uint32 `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	MaxSeqno uint64 `protobuf:"varint,17,opt,name=max_seqno,json=maxSeqno,proto3" json:"max_seqno,omitempty"`
	// 会话是否有业务通知
	NewPushMsg uint32 `protobuf:"varint,18,opt,name=new_push_msg,json=newPushMsg,proto3" json:"new_push_msg,omitempty"`
	// 接收方是否设置接受推送
	Setting uint32 `protobuf:"varint,19,opt,name=setting,proto3" json:"setting,omitempty"`
	IsGuardian uint32 `protobuf:"varint,20,opt,name=is_guardian,json=isGuardian,proto3" json:"is_guardian,omitempty"`
	IsIntercept int32 `protobuf:"varint,21,opt,name=is_intercept,json=isIntercept,proto3" json:"is_intercept,omitempty"`
	IsTrust int32 `protobuf:"varint,22,opt,name=is_trust,json=isTrust,proto3" json:"is_trust,omitempty"`
	SystemMsgType int32 `protobuf:"varint,23,opt,name=system_msg_type,json=systemMsgType,proto3" json:"system_msg_type,omitempty"`
	AccountInfo *AccountInfo `protobuf:"bytes,24,opt,name=account_info,json=accountInfo,proto3" json:"account_info,omitempty"`
	LiveStatus int32 `protobuf:"varint,25,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	BizMsgUnreadCount int32 `protobuf:"varint,26,opt,name=biz_msg_unread_count,json=bizMsgUnreadCount,proto3" json:"biz_msg_unread_count,omitempty"`
	UserLabel *UserLabel `protobuf:"bytes,27,opt,name=user_label,json=userLabel,proto3" json:"user_label,omitempty"`
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{9}
}

func (x *SessionInfo) GetTalkerId() uint64 {
	if x != nil {
		return x.TalkerId
	}
	return 0
}

func (x *SessionInfo) GetSessionType() uint32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *SessionInfo) GetAtSeqno() uint64 {
	if x != nil {
		return x.AtSeqno
	}
	return 0
}

func (x *SessionInfo) GetTopTs() uint64 {
	if x != nil {
		return x.TopTs
	}
	return 0
}

func (x *SessionInfo) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *SessionInfo) GetGroupCover() string {
	if x != nil {
		return x.GroupCover
	}
	return ""
}

func (x *SessionInfo) GetIsFollow() uint32 {
	if x != nil {
		return x.IsFollow
	}
	return 0
}

func (x *SessionInfo) GetIsDnd() uint32 {
	if x != nil {
		return x.IsDnd
	}
	return 0
}

func (x *SessionInfo) GetAckSeqno() uint64 {
	if x != nil {
		return x.AckSeqno
	}
	return 0
}

func (x *SessionInfo) GetAckTs() uint64 {
	if x != nil {
		return x.AckTs
	}
	return 0
}

func (x *SessionInfo) GetSessionTs() uint64 {
	if x != nil {
		return x.SessionTs
	}
	return 0
}

func (x *SessionInfo) GetUnreadCount() uint32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *SessionInfo) GetLastMsg() *Msg {
	if x != nil {
		return x.LastMsg
	}
	return nil
}

func (x *SessionInfo) GetGroupType() uint32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *SessionInfo) GetCanFold() uint32 {
	if x != nil {
		return x.CanFold
	}
	return 0
}

func (x *SessionInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SessionInfo) GetMaxSeqno() uint64 {
	if x != nil {
		return x.MaxSeqno
	}
	return 0
}

func (x *SessionInfo) GetNewPushMsg() uint32 {
	if x != nil {
		return x.NewPushMsg
	}
	return 0
}

func (x *SessionInfo) GetSetting() uint32 {
	if x != nil {
		return x.Setting
	}
	return 0
}

func (x *SessionInfo) GetIsGuardian() uint32 {
	if x != nil {
		return x.IsGuardian
	}
	return 0
}

func (x *SessionInfo) GetIsIntercept() int32 {
	if x != nil {
		return x.IsIntercept
	}
	return 0
}

func (x *SessionInfo) GetIsTrust() int32 {
	if x != nil {
		return x.IsTrust
	}
	return 0
}

func (x *SessionInfo) GetSystemMsgType() int32 {
	if x != nil {
		return x.SystemMsgType
	}
	return 0
}

func (x *SessionInfo) GetAccountInfo() *AccountInfo {
	if x != nil {
		return x.AccountInfo
	}
	return nil
}

func (x *SessionInfo) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *SessionInfo) GetBizMsgUnreadCount() int32 {
	if x != nil {
		return x.BizMsgUnreadCount
	}
	return 0
}

func (x *SessionInfo) GetUserLabel() *UserLabel {
	if x != nil {
		return x.UserLabel
	}
	return nil
}

type UserLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelType int32 `protobuf:"varint,1,opt,name=label_type,json=labelType,proto3" json:"label_type,omitempty"`
	Medal *Medal `protobuf:"bytes,2,opt,name=medal,proto3" json:"medal,omitempty"`
	GuardianRelation int32 `protobuf:"varint,3,opt,name=guardian_relation,json=guardianRelation,proto3" json:"guardian_relation,omitempty"`
}

func (x *UserLabel) Reset() {
	*x = UserLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_im_type_im_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLabel) ProtoMessage() {}

func (x *UserLabel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_im_type_im_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLabel.ProtoReflect.Descriptor instead.
func (*UserLabel) Descriptor() ([]byte, []int) {
	return file_bilibili_im_type_im_proto_rawDescGZIP(), []int{10}
}

func (x *UserLabel) GetLabelType() int32 {
	if x != nil {
		return x.LabelType
	}
	return 0
}

func (x *UserLabel) GetMedal() *Medal {
	if x != nil {
		return x.Medal
	}
	return nil
}

func (x *UserLabel) GetGuardianRelation() int32 {
	if x != nil {
		return x.GuardianRelation
	}
	return 0
}

var File_bilibili_im_type_im_proto protoreflect.FileDescriptor

var file_bilibili_im_type_im_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x69, 0x6d, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x22, 0x70, 0x0a, 0x0e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xe4, 0x02, 0x0a, 0x0d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x73,
	0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x22, 0x48, 0x0a, 0x08, 0x48, 0x69, 0x67, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x67, 0x0a, 0x07,
	0x49, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x48, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x08, 0x68, 0x69, 0x67, 0x68, 0x54, 0x65, 0x78, 0x74, 0x22, 0xd8, 0x03, 0x0a,
	0x05, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x64, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65,
	0x64, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x45,
	0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6d, 0x65, 0x64, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65,
	0x64, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8a, 0x05, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x69, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x74, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x61, 0x74,
	0x55, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x63, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x79, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x79, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x6d, 0x73,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x46, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x48,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x48, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x3c, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x53, 0x65,
	0x71, 0x6e, 0x6f, 0x12, 0x49, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x07, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x71,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x53, 0x65, 0x71, 0x6e,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x64, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x73, 0x44, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x6b,
	0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x6b, 0x54, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65,
	0x71, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x65,
	0x71, 0x6e, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x75,
	0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x69, 0x7a,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x69, 0x7a, 0x4d, 0x73, 0x67, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x69, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x52, 0x05, 0x6d, 0x65, 0x64,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0x94, 0x06, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x12, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xc1, 0x9a, 0x0c, 0x12, 0x18, 0x0a, 0x12, 0x45, 0x4e,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0xa1, 0xc2, 0x1e, 0x12, 0x1d, 0x0a, 0x17, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xa2, 0xc2, 0x1e, 0x12, 0x18, 0x0a, 0x12, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0xa3, 0xc2, 0x1e, 0x12, 0x27, 0x0a,
	0x21, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x53, 0x10, 0xa6, 0xc2, 0x1e, 0x12, 0x28, 0x0a, 0x22, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xc1, 0x84, 0x3d,
	0x12, 0x28, 0x0a, 0x22, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xc2, 0x84, 0x3d, 0x12, 0x28, 0x0a, 0x22, 0x45, 0x4e,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x56, 0x52, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0xc3, 0x84, 0x3d, 0x12, 0x26, 0x0a, 0x20, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0xc4, 0x84, 0x3d, 0x12, 0x23, 0x0a, 0x1d,
	0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0xc5, 0x84,
	0x3d, 0x12, 0x2a, 0x0a, 0x24, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xc7, 0x84, 0x3d, 0x12, 0x29, 0x0a,
	0x23, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x44, 0x10, 0xc8, 0x84, 0x3d, 0x12, 0x2b, 0x0a, 0x25, 0x45, 0x4e, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56,
	0x52, 0x5f, 0x4d, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41,
	0x44, 0x10, 0xc9, 0x84, 0x3d, 0x12, 0x2d, 0x0a, 0x27, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x46, 0x4c, 0x57, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x10, 0xca, 0x84, 0x3d, 0x12, 0x2b, 0x0a, 0x25, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xcb, 0x84,
	0x3d, 0x12, 0x29, 0x0a, 0x23, 0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xcc, 0x84, 0x3d, 0x12, 0x2a, 0x0a, 0x24,
	0x45, 0x4e, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0xcf, 0x84, 0x3d, 0x12, 0x2d, 0x0a, 0x27, 0x45, 0x4e, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56,
	0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x10, 0xd0, 0x84, 0x3d, 0x12, 0x2d, 0x0a, 0x27, 0x45, 0x4e, 0x5f, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x56, 0x52,
	0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x4d, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0xd1, 0x84, 0x3d, 0x2a, 0x49, 0x0a, 0x11, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x42,
	0x49, 0x5a, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x49, 0x5a, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x5a, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10,
	0x01, 0x2a, 0x94, 0x03, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4f, 0x4e, 0x57, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x35, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x50, 0x43, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x5a, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x45, 0x42,
	0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x42, 0x59,
	0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x45,
	0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44, 0x53, 0x10, 0x0a,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x56,
	0x4f, 0x59, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0c, 0x2a, 0x8c, 0x0f, 0x0a, 0x07, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x06, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x5f, 0x56, 0x32, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d,
	0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0a, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x32, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x33, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x65, 0x12, 0x24,
	0x0a, 0x20, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x10, 0x66, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49,
	0x43, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x67, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x68, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x10, 0x69, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x6a, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x10, 0x6b, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x6c, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x45, 0x56, 0x45,
	0x44, 0x10, 0x6d, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x49, 0x45, 0x56, 0x45, 0x44, 0x10, 0x6e, 0x12, 0x2a, 0x0a, 0x26, 0x45,
	0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x49, 0x45, 0x56, 0x45, 0x44, 0x10, 0x6f, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x45, 0x56, 0x45, 0x44, 0x10, 0x70, 0x12,
	0x2c, 0x0a, 0x28, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x52, 0x45, 0x43, 0x49, 0x45, 0x56, 0x45, 0x44, 0x5f, 0x56, 0x32, 0x10, 0x71, 0x12, 0x29, 0x0a,
	0x25, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x45,
	0x56, 0x45, 0x44, 0x5f, 0x56, 0x32, 0x10, 0x72, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4e, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x50, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x45, 0x56,
	0x45, 0x44, 0x5f, 0x56, 0x32, 0x10, 0x73, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x10, 0x74, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x10, 0x75, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x55, 0x52, 0x42, 0x10, 0x76, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x4e, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0xc9, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0xca, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x10, 0xcb, 0x01, 0x12, 0x26, 0x0a, 0x21,
	0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x45,
	0x44, 0x10, 0xcc, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xcd, 0x01, 0x12, 0x29,
	0x0a, 0x24, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59,
	0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4b, 0x49,
	0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0xce, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x4e, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x55, 0x54, 0x59, 0x10, 0xcf, 0x01,
	0x12, 0x27, 0x0a, 0x22, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0xd0, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x4e, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0xd2, 0x01, 0x12, 0x25, 0x0a, 0x20,
	0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x4b,
	0x10, 0xd3, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xd4,
	0x01, 0x12, 0x34, 0x0a, 0x2f, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x10, 0xd5, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xad, 0x02, 0x12, 0x23, 0x0a, 0x1e,
	0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x10, 0xae,
	0x02, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5a, 0x45, 0x44, 0x10, 0xaf, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0xb0, 0x02, 0x12, 0x23, 0x0a,
	0x1e, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0xb1, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x50, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0xb2, 0x02, 0x2a, 0x6c, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d,
	0x45, 0x41, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x4e, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x53, 0x10, 0x03, 0x2a, 0x79, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x45,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x04,
	0x2a, 0x82, 0x01, 0x0a, 0x0c, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55,
	0x4e, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x58, 0x69, 0x61, 0x6f, 0x4d, 0x69, 0x6b, 0x75, 0x30, 0x31, 0x2f, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69,
	0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x69, 0x6d, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bilibili_im_type_im_proto_rawDescOnce sync.Once
	file_bilibili_im_type_im_proto_rawDescData = file_bilibili_im_type_im_proto_rawDesc
)

func file_bilibili_im_type_im_proto_rawDescGZIP() []byte {
	file_bilibili_im_type_im_proto_rawDescOnce.Do(func() {
		file_bilibili_im_type_im_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_im_type_im_proto_rawDescData)
	})
	return file_bilibili_im_type_im_proto_rawDescData
}

var file_bilibili_im_type_im_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_bilibili_im_type_im_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_bilibili_im_type_im_proto_goTypes = []interface{}{
	(CmdId)(0),             // 0: bilibili.im.type.CmdId
	(ENUM_BIZ_MSG_TYPE)(0), // 1: bilibili.im.type.ENUM_BIZ_MSG_TYPE
	(MsgSource)(0),         // 2: bilibili.im.type.MsgSource
	(MsgType)(0),           // 3: bilibili.im.type.MsgType
	(RecverType)(0),        // 4: bilibili.im.type.RecverType
	(RelationLogType)(0),   // 5: bilibili.im.type.RelationLogType
	(SESSION_TYPE)(0),      // 6: bilibili.im.type.SESSION_TYPE
	(*AccountInfo)(nil),    // 7: bilibili.im.type.AccountInfo
	(*FriendRelation)(nil), // 8: bilibili.im.type.FriendRelation
	(*GroupRelation)(nil),  // 9: bilibili.im.type.GroupRelation
	(*HighText)(nil),       // 10: bilibili.im.type.HighText
	(*ImgInfo)(nil),        // 11: bilibili.im.type.ImgInfo
	(*KeyHitInfos)(nil),    // 12: bilibili.im.type.KeyHitInfos
	(*Medal)(nil),          // 13: bilibili.im.type.Medal
	(*Msg)(nil),            // 14: bilibili.im.type.Msg
	(*RelationLog)(nil),    // 15: bilibili.im.type.RelationLog
	(*SessionInfo)(nil),    // 16: bilibili.im.type.SessionInfo
	(*UserLabel)(nil),      // 17: bilibili.im.type.UserLabel
}
var file_bilibili_im_type_im_proto_depIdxs = []int32{
	10, // 0: bilibili.im.type.KeyHitInfos.high_text:type_name -> bilibili.im.type.HighText
	4,  // 1: bilibili.im.type.Msg.receiver_type:type_name -> bilibili.im.type.RecverType
	3,  // 2: bilibili.im.type.Msg.msg_type:type_name -> bilibili.im.type.MsgType
	2,  // 3: bilibili.im.type.Msg.msg_source:type_name -> bilibili.im.type.MsgSource
	12, // 4: bilibili.im.type.Msg.key_hit_infos:type_name -> bilibili.im.type.KeyHitInfos
	5,  // 5: bilibili.im.type.RelationLog.log_type:type_name -> bilibili.im.type.RelationLogType
	8,  // 6: bilibili.im.type.RelationLog.friend_relation:type_name -> bilibili.im.type.FriendRelation
	9,  // 7: bilibili.im.type.RelationLog.group_relation:type_name -> bilibili.im.type.GroupRelation
	14, // 8: bilibili.im.type.SessionInfo.last_msg:type_name -> bilibili.im.type.Msg
	7,  // 9: bilibili.im.type.SessionInfo.account_info:type_name -> bilibili.im.type.AccountInfo
	17, // 10: bilibili.im.type.SessionInfo.user_label:type_name -> bilibili.im.type.UserLabel
	13, // 11: bilibili.im.type.UserLabel.medal:type_name -> bilibili.im.type.Medal
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_bilibili_im_type_im_proto_init() }
func file_bilibili_im_type_im_proto_init() {
	if File_bilibili_im_type_im_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bilibili_im_type_im_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyHitInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Medal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_im_type_im_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_im_type_im_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bilibili_im_type_im_proto_goTypes,
		DependencyIndexes: file_bilibili_im_type_im_proto_depIdxs,
		EnumInfos:         file_bilibili_im_type_im_proto_enumTypes,
		MessageInfos:      file_bilibili_im_type_im_proto_msgTypes,
	}.Build()
	File_bilibili_im_type_im_proto = out.File
	file_bilibili_im_type_im_proto_rawDesc = nil
	file_bilibili_im_type_im_proto_goTypes = nil
	file_bilibili_im_type_im_proto_depIdxs = nil
}
