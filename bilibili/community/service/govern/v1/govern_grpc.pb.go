// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/community/service/govern/v1/govern.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Qoe_QoeReport_FullMethodName = "/bilibili.community.service.govern.v1.Qoe/QoeReport"
)

// QoeClient is the client API for Qoe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QoeClient interface {
	QoeReport(ctx context.Context, in *QoeReportReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type qoeClient struct {
	cc grpc.ClientConnInterface
}

func NewQoeClient(cc grpc.ClientConnInterface) QoeClient {
	return &qoeClient{cc}
}

func (c *qoeClient) QoeReport(ctx context.Context, in *QoeReportReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Qoe_QoeReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QoeServer is the server API for Qoe service.
// All implementations must embed UnimplementedQoeServer
// for forward compatibility
type QoeServer interface {
	QoeReport(context.Context, *QoeReportReq) (*empty.Empty, error)
	mustEmbedUnimplementedQoeServer()
}

// UnimplementedQoeServer must be embedded to have forward compatible implementations.
type UnimplementedQoeServer struct {
}

func (UnimplementedQoeServer) QoeReport(context.Context, *QoeReportReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QoeReport not implemented")
}
func (UnimplementedQoeServer) mustEmbedUnimplementedQoeServer() {}

// UnsafeQoeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QoeServer will
// result in compilation errors.
type UnsafeQoeServer interface {
	mustEmbedUnimplementedQoeServer()
}

func RegisterQoeServer(s grpc.ServiceRegistrar, srv QoeServer) {
	s.RegisterService(&Qoe_ServiceDesc, srv)
}

func _Qoe_QoeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QoeReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QoeServer).QoeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Qoe_QoeReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QoeServer).QoeReport(ctx, req.(*QoeReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Qoe_ServiceDesc is the grpc.ServiceDesc for Qoe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Qoe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.community.service.govern.v1.Qoe",
	HandlerType: (*QoeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QoeReport",
			Handler:    _Qoe_QoeReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/community/service/govern/v1/govern.proto",
}
