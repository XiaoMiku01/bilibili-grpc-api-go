// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: bilibili/community/service/dm/v1/dm.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AvatarType int32

const (
	AvatarType_AvatarTypeNone AvatarType = 0 //
	AvatarType_AvatarTypeNFT  AvatarType = 1 //
)

// Enum value maps for AvatarType.
var (
	AvatarType_name = map[int32]string{
		0: "AvatarTypeNone",
		1: "AvatarTypeNFT",
	}
	AvatarType_value = map[string]int32{
		"AvatarTypeNone": 0,
		"AvatarTypeNFT":  1,
	}
)

func (x AvatarType) Enum() *AvatarType {
	p := new(AvatarType)
	*p = x
	return p
}

func (x AvatarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[0].Descriptor()
}

func (AvatarType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[0]
}

func (x AvatarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarType.Descriptor instead.
func (AvatarType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{0}
}

type BubbleType int32

const (
	BubbleType_BubbleTypeNone           BubbleType = 0 //
	BubbleType_BubbleTypeClickButton    BubbleType = 1 //
	BubbleType_BubbleTypeDmSettingPanel BubbleType = 2 //
)

// Enum value maps for BubbleType.
var (
	BubbleType_name = map[int32]string{
		0: "BubbleTypeNone",
		1: "BubbleTypeClickButton",
		2: "BubbleTypeDmSettingPanel",
	}
	BubbleType_value = map[string]int32{
		"BubbleTypeNone":           0,
		"BubbleTypeClickButton":    1,
		"BubbleTypeDmSettingPanel": 2,
	}
)

func (x BubbleType) Enum() *BubbleType {
	p := new(BubbleType)
	*p = x
	return p
}

func (x BubbleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BubbleType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[1].Descriptor()
}

func (BubbleType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[1]
}

func (x BubbleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BubbleType.Descriptor instead.
func (BubbleType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{1}
}

type CheckboxType int32

const (
	CheckboxType_CheckboxTypeNone      CheckboxType = 0 //
	CheckboxType_CheckboxTypeEncourage CheckboxType = 1 //
	CheckboxType_CheckboxTypeColorDM   CheckboxType = 2 //
)

// Enum value maps for CheckboxType.
var (
	CheckboxType_name = map[int32]string{
		0: "CheckboxTypeNone",
		1: "CheckboxTypeEncourage",
		2: "CheckboxTypeColorDM",
	}
	CheckboxType_value = map[string]int32{
		"CheckboxTypeNone":      0,
		"CheckboxTypeEncourage": 1,
		"CheckboxTypeColorDM":   2,
	}
)

func (x CheckboxType) Enum() *CheckboxType {
	p := new(CheckboxType)
	*p = x
	return p
}

func (x CheckboxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckboxType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[2].Descriptor()
}

func (CheckboxType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[2]
}

func (x CheckboxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckboxType.Descriptor instead.
func (CheckboxType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{2}
}

// 弹幕属性位值
type DMAttrBit int32

const (
	DMAttrBit_DMAttrBitProtect  DMAttrBit = 0 // 保护弹幕
	DMAttrBit_DMAttrBitFromLive DMAttrBit = 1 // 直播弹幕
	DMAttrBit_DMAttrHighLike    DMAttrBit = 2 // 高赞弹幕
)

// Enum value maps for DMAttrBit.
var (
	DMAttrBit_name = map[int32]string{
		0: "DMAttrBitProtect",
		1: "DMAttrBitFromLive",
		2: "DMAttrHighLike",
	}
	DMAttrBit_value = map[string]int32{
		"DMAttrBitProtect":  0,
		"DMAttrBitFromLive": 1,
		"DMAttrHighLike":    2,
	}
)

func (x DMAttrBit) Enum() *DMAttrBit {
	p := new(DMAttrBit)
	*p = x
	return p
}

func (x DMAttrBit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DMAttrBit) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[3].Descriptor()
}

func (DMAttrBit) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[3]
}

func (x DMAttrBit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DMAttrBit.Descriptor instead.
func (DMAttrBit) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{3}
}

type DmColorfulType int32

const (
	DmColorfulType_NoneType        DmColorfulType = 0     // 无
	DmColorfulType_VipGradualColor DmColorfulType = 60001 // 渐变色
)

// Enum value maps for DmColorfulType.
var (
	DmColorfulType_name = map[int32]string{
		0:     "NoneType",
		60001: "VipGradualColor",
	}
	DmColorfulType_value = map[string]int32{
		"NoneType":        0,
		"VipGradualColor": 60001,
	}
)

func (x DmColorfulType) Enum() *DmColorfulType {
	p := new(DmColorfulType)
	*p = x
	return p
}

func (x DmColorfulType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DmColorfulType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[4].Descriptor()
}

func (DmColorfulType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[4]
}

func (x DmColorfulType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DmColorfulType.Descriptor instead.
func (DmColorfulType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{4}
}

type ExposureType int32

const (
	ExposureType_ExposureTypeNone   ExposureType = 0 //
	ExposureType_ExposureTypeDMSend ExposureType = 1 //
)

// Enum value maps for ExposureType.
var (
	ExposureType_name = map[int32]string{
		0: "ExposureTypeNone",
		1: "ExposureTypeDMSend",
	}
	ExposureType_value = map[string]int32{
		"ExposureTypeNone":   0,
		"ExposureTypeDMSend": 1,
	}
)

func (x ExposureType) Enum() *ExposureType {
	p := new(ExposureType)
	*p = x
	return p
}

func (x ExposureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExposureType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[5].Descriptor()
}

func (ExposureType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[5]
}

func (x ExposureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExposureType.Descriptor instead.
func (ExposureType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{5}
}

type PostPanelBizType int32

const (
	PostPanelBizType_PostPanelBizTypeNone      PostPanelBizType = 0 //
	PostPanelBizType_PostPanelBizTypeEncourage PostPanelBizType = 1 //
	PostPanelBizType_PostPanelBizTypeColorDM   PostPanelBizType = 2 //
	PostPanelBizType_PostPanelBizTypeNFTDM     PostPanelBizType = 3 //
	PostPanelBizType_PostPanelBizTypeFragClose PostPanelBizType = 4 //
	PostPanelBizType_PostPanelBizTypeRecommend PostPanelBizType = 5 //
)

// Enum value maps for PostPanelBizType.
var (
	PostPanelBizType_name = map[int32]string{
		0: "PostPanelBizTypeNone",
		1: "PostPanelBizTypeEncourage",
		2: "PostPanelBizTypeColorDM",
		3: "PostPanelBizTypeNFTDM",
		4: "PostPanelBizTypeFragClose",
		5: "PostPanelBizTypeRecommend",
	}
	PostPanelBizType_value = map[string]int32{
		"PostPanelBizTypeNone":      0,
		"PostPanelBizTypeEncourage": 1,
		"PostPanelBizTypeColorDM":   2,
		"PostPanelBizTypeNFTDM":     3,
		"PostPanelBizTypeFragClose": 4,
		"PostPanelBizTypeRecommend": 5,
	}
)

func (x PostPanelBizType) Enum() *PostPanelBizType {
	p := new(PostPanelBizType)
	*p = x
	return p
}

func (x PostPanelBizType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostPanelBizType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[6].Descriptor()
}

func (PostPanelBizType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[6]
}

func (x PostPanelBizType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostPanelBizType.Descriptor instead.
func (PostPanelBizType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{6}
}

type PostStatus int32

const (
	PostStatus_PostStatusNormal PostStatus = 0 //
	PostStatus_PostStatusClosed PostStatus = 1 //
)

// Enum value maps for PostStatus.
var (
	PostStatus_name = map[int32]string{
		0: "PostStatusNormal",
		1: "PostStatusClosed",
	}
	PostStatus_value = map[string]int32{
		"PostStatusNormal": 0,
		"PostStatusClosed": 1,
	}
)

func (x PostStatus) Enum() *PostStatus {
	p := new(PostStatus)
	*p = x
	return p
}

func (x PostStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[7].Descriptor()
}

func (PostStatus) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[7]
}

func (x PostStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostStatus.Descriptor instead.
func (PostStatus) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{7}
}

type RenderType int32

const (
	RenderType_RenderTypeNone     RenderType = 0 //
	RenderType_RenderTypeSingle   RenderType = 1 //
	RenderType_RenderTypeRotation RenderType = 2 //
)

// Enum value maps for RenderType.
var (
	RenderType_name = map[int32]string{
		0: "RenderTypeNone",
		1: "RenderTypeSingle",
		2: "RenderTypeRotation",
	}
	RenderType_value = map[string]int32{
		"RenderTypeNone":     0,
		"RenderTypeSingle":   1,
		"RenderTypeRotation": 2,
	}
)

func (x RenderType) Enum() *RenderType {
	p := new(RenderType)
	*p = x
	return p
}

func (x RenderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RenderType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[8].Descriptor()
}

func (RenderType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[8]
}

func (x RenderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RenderType.Descriptor instead.
func (RenderType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{8}
}

type SubtitleAiStatus int32

const (
	SubtitleAiStatus_None     SubtitleAiStatus = 0 //
	SubtitleAiStatus_Exposure SubtitleAiStatus = 1 //
	SubtitleAiStatus_Assist   SubtitleAiStatus = 2 //
)

// Enum value maps for SubtitleAiStatus.
var (
	SubtitleAiStatus_name = map[int32]string{
		0: "None",
		1: "Exposure",
		2: "Assist",
	}
	SubtitleAiStatus_value = map[string]int32{
		"None":     0,
		"Exposure": 1,
		"Assist":   2,
	}
)

func (x SubtitleAiStatus) Enum() *SubtitleAiStatus {
	p := new(SubtitleAiStatus)
	*p = x
	return p
}

func (x SubtitleAiStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubtitleAiStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[9].Descriptor()
}

func (SubtitleAiStatus) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[9]
}

func (x SubtitleAiStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubtitleAiStatus.Descriptor instead.
func (SubtitleAiStatus) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{9}
}

type SubtitleAiType int32

const (
	SubtitleAiType_Normal    SubtitleAiType = 0 //
	SubtitleAiType_Translate SubtitleAiType = 1 //
)

// Enum value maps for SubtitleAiType.
var (
	SubtitleAiType_name = map[int32]string{
		0: "Normal",
		1: "Translate",
	}
	SubtitleAiType_value = map[string]int32{
		"Normal":    0,
		"Translate": 1,
	}
)

func (x SubtitleAiType) Enum() *SubtitleAiType {
	p := new(SubtitleAiType)
	*p = x
	return p
}

func (x SubtitleAiType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubtitleAiType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[10].Descriptor()
}

func (SubtitleAiType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[10]
}

func (x SubtitleAiType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubtitleAiType.Descriptor instead.
func (SubtitleAiType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{10}
}

type SubtitleType int32

const (
	SubtitleType_CC SubtitleType = 0 // CC字幕
	SubtitleType_AI SubtitleType = 1 // AI生成字幕
)

// Enum value maps for SubtitleType.
var (
	SubtitleType_name = map[int32]string{
		0: "CC",
		1: "AI",
	}
	SubtitleType_value = map[string]int32{
		"CC": 0,
		"AI": 1,
	}
)

func (x SubtitleType) Enum() *SubtitleType {
	p := new(SubtitleType)
	*p = x
	return p
}

func (x SubtitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubtitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[11].Descriptor()
}

func (SubtitleType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[11]
}

func (x SubtitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubtitleType.Descriptor instead.
func (SubtitleType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{11}
}

type ToastFunctionType int32

const (
	ToastFunctionType_ToastFunctionTypeNone      ToastFunctionType = 0 //
	ToastFunctionType_ToastFunctionTypePostPanel ToastFunctionType = 1 //
)

// Enum value maps for ToastFunctionType.
var (
	ToastFunctionType_name = map[int32]string{
		0: "ToastFunctionTypeNone",
		1: "ToastFunctionTypePostPanel",
	}
	ToastFunctionType_value = map[string]int32{
		"ToastFunctionTypeNone":      0,
		"ToastFunctionTypePostPanel": 1,
	}
)

func (x ToastFunctionType) Enum() *ToastFunctionType {
	p := new(ToastFunctionType)
	*p = x
	return p
}

func (x ToastFunctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToastFunctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_community_service_dm_v1_dm_proto_enumTypes[12].Descriptor()
}

func (ToastFunctionType) Type() protoreflect.EnumType {
	return &file_bilibili_community_service_dm_v1_dm_proto_enumTypes[12]
}

func (x ToastFunctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToastFunctionType.Descriptor instead.
func (ToastFunctionType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{12}
}

type Avatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	AvatarType AvatarType `protobuf:"varint,3,opt,name=avatar_type,json=avatarType,proto3,enum=bilibili.community.service.dm.v1.AvatarType" json:"avatar_type,omitempty"`
}

func (x *Avatar) Reset() {
	*x = Avatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Avatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Avatar) ProtoMessage() {}

func (x *Avatar) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Avatar.ProtoReflect.Descriptor instead.
func (*Avatar) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{0}
}

func (x *Avatar) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Avatar) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Avatar) GetAvatarType() AvatarType {
	if x != nil {
		return x.AvatarType
	}
	return AvatarType_AvatarTypeNone
}

type Bubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Bubble) Reset() {
	*x = Bubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bubble) ProtoMessage() {}

func (x *Bubble) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bubble.ProtoReflect.Descriptor instead.
func (*Bubble) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{1}
}

func (x *Bubble) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Bubble) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type BubbleV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	BubbleType BubbleType `protobuf:"varint,3,opt,name=bubble_type,json=bubbleType,proto3,enum=bilibili.community.service.dm.v1.BubbleType" json:"bubble_type,omitempty"`
	ExposureOnce bool `protobuf:"varint,4,opt,name=exposure_once,json=exposureOnce,proto3" json:"exposure_once,omitempty"`
	ExposureType ExposureType `protobuf:"varint,5,opt,name=exposure_type,json=exposureType,proto3,enum=bilibili.community.service.dm.v1.ExposureType" json:"exposure_type,omitempty"`
}

func (x *BubbleV2) Reset() {
	*x = BubbleV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BubbleV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BubbleV2) ProtoMessage() {}

func (x *BubbleV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BubbleV2.ProtoReflect.Descriptor instead.
func (*BubbleV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{2}
}

func (x *BubbleV2) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BubbleV2) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BubbleV2) GetBubbleType() BubbleType {
	if x != nil {
		return x.BubbleType
	}
	return BubbleType_BubbleTypeNone
}

func (x *BubbleV2) GetExposureOnce() bool {
	if x != nil {
		return x.ExposureOnce
	}
	return false
}

func (x *BubbleV2) GetExposureType() ExposureType {
	if x != nil {
		return x.ExposureType
	}
	return ExposureType_ExposureTypeNone
}

type Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Action int32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Button) Reset() {
	*x = Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Button) ProtoMessage() {}

func (x *Button) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Button.ProtoReflect.Descriptor instead.
func (*Button) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{3}
}

func (x *Button) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Button) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type BuzzwordConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords []*BuzzwordShowConfig `protobuf:"bytes,1,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *BuzzwordConfig) Reset() {
	*x = BuzzwordConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuzzwordConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuzzwordConfig) ProtoMessage() {}

func (x *BuzzwordConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuzzwordConfig.ProtoReflect.Descriptor instead.
func (*BuzzwordConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{4}
}

func (x *BuzzwordConfig) GetKeywords() []*BuzzwordShowConfig {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type BuzzwordShowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Source int32 `protobuf:"varint,3,opt,name=source,proto3" json:"source,omitempty"`
	Id int64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	BuzzwordId int64 `protobuf:"varint,5,opt,name=buzzword_id,json=buzzwordId,proto3" json:"buzzword_id,omitempty"`
	SchemaType int32 `protobuf:"varint,6,opt,name=schema_type,json=schemaType,proto3" json:"schema_type,omitempty"`
}

func (x *BuzzwordShowConfig) Reset() {
	*x = BuzzwordShowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuzzwordShowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuzzwordShowConfig) ProtoMessage() {}

func (x *BuzzwordShowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuzzwordShowConfig.ProtoReflect.Descriptor instead.
func (*BuzzwordShowConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{5}
}

func (x *BuzzwordShowConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuzzwordShowConfig) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *BuzzwordShowConfig) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *BuzzwordShowConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BuzzwordShowConfig) GetBuzzwordId() int64 {
	if x != nil {
		return x.BuzzwordId
	}
	return 0
}

func (x *BuzzwordShowConfig) GetSchemaType() int32 {
	if x != nil {
		return x.SchemaType
	}
	return 0
}

type CheckBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type CheckboxType `protobuf:"varint,2,opt,name=type,proto3,enum=bilibili.community.service.dm.v1.CheckboxType" json:"type,omitempty"`
	DefaultValue bool `protobuf:"varint,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Show bool `protobuf:"varint,4,opt,name=show,proto3" json:"show,omitempty"`
}

func (x *CheckBox) Reset() {
	*x = CheckBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBox) ProtoMessage() {}

func (x *CheckBox) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBox.ProtoReflect.Descriptor instead.
func (*CheckBox) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{6}
}

func (x *CheckBox) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CheckBox) GetType() CheckboxType {
	if x != nil {
		return x.Type
	}
	return CheckboxType_CheckboxTypeNone
}

func (x *CheckBox) GetDefaultValue() bool {
	if x != nil {
		return x.DefaultValue
	}
	return false
}

func (x *CheckBox) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

type CheckBoxV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	DefaultValue bool `protobuf:"varint,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *CheckBoxV2) Reset() {
	*x = CheckBoxV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBoxV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBoxV2) ProtoMessage() {}

func (x *CheckBoxV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBoxV2.ProtoReflect.Descriptor instead.
func (*CheckBoxV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{7}
}

func (x *CheckBoxV2) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CheckBoxV2) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CheckBoxV2) GetDefaultValue() bool {
	if x != nil {
		return x.DefaultValue
	}
	return false
}

type ClickButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortraitText []string `protobuf:"bytes,1,rep,name=portrait_text,json=portraitText,proto3" json:"portrait_text,omitempty"`
	LandscapeText []string `protobuf:"bytes,2,rep,name=landscape_text,json=landscapeText,proto3" json:"landscape_text,omitempty"`
	PortraitTextFocus []string `protobuf:"bytes,3,rep,name=portrait_text_focus,json=portraitTextFocus,proto3" json:"portrait_text_focus,omitempty"`
	LandscapeTextFocus []string `protobuf:"bytes,4,rep,name=landscape_text_focus,json=landscapeTextFocus,proto3" json:"landscape_text_focus,omitempty"`
	RenderType RenderType `protobuf:"varint,5,opt,name=render_type,json=renderType,proto3,enum=bilibili.community.service.dm.v1.RenderType" json:"render_type,omitempty"`
	Show bool `protobuf:"varint,6,opt,name=show,proto3" json:"show,omitempty"`
	Bubble *Bubble `protobuf:"bytes,7,opt,name=bubble,proto3" json:"bubble,omitempty"`
}

func (x *ClickButton) Reset() {
	*x = ClickButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickButton) ProtoMessage() {}

func (x *ClickButton) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickButton.ProtoReflect.Descriptor instead.
func (*ClickButton) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{8}
}

func (x *ClickButton) GetPortraitText() []string {
	if x != nil {
		return x.PortraitText
	}
	return nil
}

func (x *ClickButton) GetLandscapeText() []string {
	if x != nil {
		return x.LandscapeText
	}
	return nil
}

func (x *ClickButton) GetPortraitTextFocus() []string {
	if x != nil {
		return x.PortraitTextFocus
	}
	return nil
}

func (x *ClickButton) GetLandscapeTextFocus() []string {
	if x != nil {
		return x.LandscapeTextFocus
	}
	return nil
}

func (x *ClickButton) GetRenderType() RenderType {
	if x != nil {
		return x.RenderType
	}
	return RenderType_RenderTypeNone
}

func (x *ClickButton) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *ClickButton) GetBubble() *Bubble {
	if x != nil {
		return x.Bubble
	}
	return nil
}

type ClickButtonV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortraitText []string `protobuf:"bytes,1,rep,name=portrait_text,json=portraitText,proto3" json:"portrait_text,omitempty"`
	LandscapeText []string `protobuf:"bytes,2,rep,name=landscape_text,json=landscapeText,proto3" json:"landscape_text,omitempty"`
	PortraitTextFocus []string `protobuf:"bytes,3,rep,name=portrait_text_focus,json=portraitTextFocus,proto3" json:"portrait_text_focus,omitempty"`
	LandscapeTextFocus []string `protobuf:"bytes,4,rep,name=landscape_text_focus,json=landscapeTextFocus,proto3" json:"landscape_text_focus,omitempty"`
	RenderType int32 `protobuf:"varint,5,opt,name=render_type,json=renderType,proto3" json:"render_type,omitempty"`
	TextInputPost bool `protobuf:"varint,6,opt,name=text_input_post,json=textInputPost,proto3" json:"text_input_post,omitempty"`
	ExposureOnce bool `protobuf:"varint,7,opt,name=exposure_once,json=exposureOnce,proto3" json:"exposure_once,omitempty"`
	ExposureType int32 `protobuf:"varint,8,opt,name=exposure_type,json=exposureType,proto3" json:"exposure_type,omitempty"`
}

func (x *ClickButtonV2) Reset() {
	*x = ClickButtonV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickButtonV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickButtonV2) ProtoMessage() {}

func (x *ClickButtonV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickButtonV2.ProtoReflect.Descriptor instead.
func (*ClickButtonV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{9}
}

func (x *ClickButtonV2) GetPortraitText() []string {
	if x != nil {
		return x.PortraitText
	}
	return nil
}

func (x *ClickButtonV2) GetLandscapeText() []string {
	if x != nil {
		return x.LandscapeText
	}
	return nil
}

func (x *ClickButtonV2) GetPortraitTextFocus() []string {
	if x != nil {
		return x.PortraitTextFocus
	}
	return nil
}

func (x *ClickButtonV2) GetLandscapeTextFocus() []string {
	if x != nil {
		return x.LandscapeTextFocus
	}
	return nil
}

func (x *ClickButtonV2) GetRenderType() int32 {
	if x != nil {
		return x.RenderType
	}
	return 0
}

func (x *ClickButtonV2) GetTextInputPost() bool {
	if x != nil {
		return x.TextInputPost
	}
	return false
}

func (x *ClickButtonV2) GetExposureOnce() bool {
	if x != nil {
		return x.ExposureOnce
	}
	return false
}

func (x *ClickButtonV2) GetExposureType() int32 {
	if x != nil {
		return x.ExposureType
	}
	return 0
}

// 互动弹幕条目信息
type CommandDm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 对象视频cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 发送者mid
	Mid string `protobuf:"bytes,3,opt,name=mid,proto3" json:"mid,omitempty"`
	// 互动弹幕指令
	Command string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	// 互动弹幕正文
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 出现时间
	Progress int32 `protobuf:"varint,6,opt,name=progress,proto3" json:"progress,omitempty"`
	// 创建时间
	Ctime string `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// 发布时间
	Mtime string `protobuf:"bytes,8,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// 扩展json数据
	Extra string `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	// 弹幕id str类型
	IdStr string `protobuf:"bytes,10,opt,name=idStr,proto3" json:"idStr,omitempty"`
}

func (x *CommandDm) Reset() {
	*x = CommandDm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDm) ProtoMessage() {}

func (x *CommandDm) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDm.ProtoReflect.Descriptor instead.
func (*CommandDm) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{10}
}

func (x *CommandDm) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommandDm) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *CommandDm) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *CommandDm) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandDm) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommandDm) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *CommandDm) GetCtime() string {
	if x != nil {
		return x.Ctime
	}
	return ""
}

func (x *CommandDm) GetMtime() string {
	if x != nil {
		return x.Mtime
	}
	return ""
}

func (x *CommandDm) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *CommandDm) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

// 弹幕ai云屏蔽列表
type DanmakuAIFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕ai云屏蔽条目
	DmFlags []*DanmakuFlag `protobuf:"bytes,1,rep,name=dm_flags,json=dmFlags,proto3" json:"dm_flags,omitempty"`
}

func (x *DanmakuAIFlag) Reset() {
	*x = DanmakuAIFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuAIFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuAIFlag) ProtoMessage() {}

func (x *DanmakuAIFlag) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuAIFlag.ProtoReflect.Descriptor instead.
func (*DanmakuAIFlag) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{11}
}

func (x *DanmakuAIFlag) GetDmFlags() []*DanmakuFlag {
	if x != nil {
		return x.DmFlags
	}
	return nil
}

// 弹幕条目
type DanmakuElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕dmid
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 弹幕出现位置(单位ms)
	Progress int32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// 弹幕类型 1 2 3:普通弹幕 4:底部弹幕 5:顶部弹幕 6:逆向弹幕 7:高级弹幕 8:代码弹幕 9:BAS弹幕(pool必须为2)
	Mode int32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// 弹幕字号
	Fontsize int32 `protobuf:"varint,4,opt,name=fontsize,proto3" json:"fontsize,omitempty"`
	// 弹幕颜色
	Color uint32 `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`
	// 发送者mid hash
	MidHash string `protobuf:"bytes,6,opt,name=midHash,proto3" json:"midHash,omitempty"`
	// 弹幕正文
	Content string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	// 发送时间
	Ctime int64 `protobuf:"varint,8,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// 权重 用于屏蔽等级 区间:[1,10]
	Weight int32 `protobuf:"varint,9,opt,name=weight,proto3" json:"weight,omitempty"`
	// 动作
	Action string `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
	// 弹幕池 0:普通池 1:字幕池 2:特殊池(代码/BAS弹幕)
	Pool int32 `protobuf:"varint,11,opt,name=pool,proto3" json:"pool,omitempty"`
	// 弹幕dmid str
	IdStr string `protobuf:"bytes,12,opt,name=idStr,proto3" json:"idStr,omitempty"`
	// 弹幕属性位(bin求AND)
	// bit0:保护 bit1:直播 bit2:高赞
	Attr int32 `protobuf:"varint,13,opt,name=attr,proto3" json:"attr,omitempty"`
	Animation string `protobuf:"bytes,22,opt,name=animation,proto3" json:"animation,omitempty"`
	// 大会员专属颜色
	Colorful DmColorfulType `protobuf:"varint,24,opt,name=colorful,proto3,enum=bilibili.community.service.dm.v1.DmColorfulType" json:"colorful,omitempty"`
}

func (x *DanmakuElem) Reset() {
	*x = DanmakuElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuElem) ProtoMessage() {}

func (x *DanmakuElem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuElem.ProtoReflect.Descriptor instead.
func (*DanmakuElem) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{12}
}

func (x *DanmakuElem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DanmakuElem) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DanmakuElem) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *DanmakuElem) GetFontsize() int32 {
	if x != nil {
		return x.Fontsize
	}
	return 0
}

func (x *DanmakuElem) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *DanmakuElem) GetMidHash() string {
	if x != nil {
		return x.MidHash
	}
	return ""
}

func (x *DanmakuElem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DanmakuElem) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *DanmakuElem) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DanmakuElem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *DanmakuElem) GetPool() int32 {
	if x != nil {
		return x.Pool
	}
	return 0
}

func (x *DanmakuElem) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *DanmakuElem) GetAttr() int32 {
	if x != nil {
		return x.Attr
	}
	return 0
}

func (x *DanmakuElem) GetAnimation() string {
	if x != nil {
		return x.Animation
	}
	return ""
}

func (x *DanmakuElem) GetColorful() DmColorfulType {
	if x != nil {
		return x.Colorful
	}
	return DmColorfulType_NoneType
}

// 弹幕ai云屏蔽条目
type DanmakuFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕dmid
	Dmid int64 `protobuf:"varint,1,opt,name=dmid,proto3" json:"dmid,omitempty"`
	// 评分
	Flag uint32 `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *DanmakuFlag) Reset() {
	*x = DanmakuFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuFlag) ProtoMessage() {}

func (x *DanmakuFlag) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuFlag.ProtoReflect.Descriptor instead.
func (*DanmakuFlag) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{13}
}

func (x *DanmakuFlag) GetDmid() int64 {
	if x != nil {
		return x.Dmid
	}
	return 0
}

func (x *DanmakuFlag) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

// 云屏蔽配置信息
type DanmakuFlagConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 云屏蔽等级
	RecFlag int32 `protobuf:"varint,1,opt,name=rec_flag,json=recFlag,proto3" json:"rec_flag,omitempty"`
	// 云屏蔽文案
	RecText string `protobuf:"bytes,2,opt,name=rec_text,json=recText,proto3" json:"rec_text,omitempty"`
	// 云屏蔽开关
	RecSwitch int32 `protobuf:"varint,3,opt,name=rec_switch,json=recSwitch,proto3" json:"rec_switch,omitempty"`
}

func (x *DanmakuFlagConfig) Reset() {
	*x = DanmakuFlagConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuFlagConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuFlagConfig) ProtoMessage() {}

func (x *DanmakuFlagConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuFlagConfig.ProtoReflect.Descriptor instead.
func (*DanmakuFlagConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{14}
}

func (x *DanmakuFlagConfig) GetRecFlag() int32 {
	if x != nil {
		return x.RecFlag
	}
	return 0
}

func (x *DanmakuFlagConfig) GetRecText() string {
	if x != nil {
		return x.RecText
	}
	return ""
}

func (x *DanmakuFlagConfig) GetRecSwitch() int32 {
	if x != nil {
		return x.RecSwitch
	}
	return 0
}

// 弹幕默认配置
type DanmuDefaultPlayerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerDanmakuUseDefaultConfig        bool            `protobuf:"varint,1,opt,name=player_danmaku_use_default_config,json=playerDanmakuUseDefaultConfig,proto3" json:"player_danmaku_use_default_config,omitempty"`                                                                                                                    // 是否使用推荐弹幕设置
	PlayerDanmakuAiRecommendedSwitch     bool            `protobuf:"varint,4,opt,name=player_danmaku_ai_recommended_switch,json=playerDanmakuAiRecommendedSwitch,proto3" json:"player_danmaku_ai_recommended_switch,omitempty"`                                                                                                           // 是否开启智能云屏蔽
	PlayerDanmakuAiRecommendedLevel      int32           `protobuf:"varint,5,opt,name=player_danmaku_ai_recommended_level,json=playerDanmakuAiRecommendedLevel,proto3" json:"player_danmaku_ai_recommended_level,omitempty"`                                                                                                              // 智能云屏蔽等级
	PlayerDanmakuBlocktop                bool            `protobuf:"varint,6,opt,name=player_danmaku_blocktop,json=playerDanmakuBlocktop,proto3" json:"player_danmaku_blocktop,omitempty"`                                                                                                                                                // 是否屏蔽顶端弹幕
	PlayerDanmakuBlockscroll             bool            `protobuf:"varint,7,opt,name=player_danmaku_blockscroll,json=playerDanmakuBlockscroll,proto3" json:"player_danmaku_blockscroll,omitempty"`                                                                                                                                       // 是否屏蔽滚动弹幕
	PlayerDanmakuBlockbottom             bool            `protobuf:"varint,8,opt,name=player_danmaku_blockbottom,json=playerDanmakuBlockbottom,proto3" json:"player_danmaku_blockbottom,omitempty"`                                                                                                                                       // 是否屏蔽底端弹幕
	PlayerDanmakuBlockcolorful           bool            `protobuf:"varint,9,opt,name=player_danmaku_blockcolorful,json=playerDanmakuBlockcolorful,proto3" json:"player_danmaku_blockcolorful,omitempty"`                                                                                                                                 // 是否屏蔽彩色弹幕
	PlayerDanmakuBlockrepeat             bool            `protobuf:"varint,10,opt,name=player_danmaku_blockrepeat,json=playerDanmakuBlockrepeat,proto3" json:"player_danmaku_blockrepeat,omitempty"`                                                                                                                                      // 是否屏蔽重复弹幕
	PlayerDanmakuBlockspecial            bool            `protobuf:"varint,11,opt,name=player_danmaku_blockspecial,json=playerDanmakuBlockspecial,proto3" json:"player_danmaku_blockspecial,omitempty"`                                                                                                                                   // 是否屏蔽高级弹幕
	PlayerDanmakuOpacity                 float32         `protobuf:"fixed32,12,opt,name=player_danmaku_opacity,json=playerDanmakuOpacity,proto3" json:"player_danmaku_opacity,omitempty"`                                                                                                                                                 // 弹幕不透明度
	PlayerDanmakuScalingfactor           float32         `protobuf:"fixed32,13,opt,name=player_danmaku_scalingfactor,json=playerDanmakuScalingfactor,proto3" json:"player_danmaku_scalingfactor,omitempty"`                                                                                                                               // 弹幕缩放比例
	PlayerDanmakuDomain                  float32         `protobuf:"fixed32,14,opt,name=player_danmaku_domain,json=playerDanmakuDomain,proto3" json:"player_danmaku_domain,omitempty"`                                                                                                                                                    // 弹幕显示区域
	PlayerDanmakuSpeed                   int32           `protobuf:"varint,15,opt,name=player_danmaku_speed,json=playerDanmakuSpeed,proto3" json:"player_danmaku_speed,omitempty"`                                                                                                                                                        // 弹幕速度
	InlinePlayerDanmakuSwitch            bool            `protobuf:"varint,16,opt,name=inline_player_danmaku_switch,json=inlinePlayerDanmakuSwitch,proto3" json:"inline_player_danmaku_switch,omitempty"`                                                                                                                                 // 是否开启弹幕
	PlayerDanmakuSeniorModeSwitch        int32           `protobuf:"varint,17,opt,name=player_danmaku_senior_mode_switch,json=playerDanmakuSeniorModeSwitch,proto3" json:"player_danmaku_senior_mode_switch,omitempty"`                                                                                                                   //
	PlayerDanmakuAiRecommendedLevelV2    int32           `protobuf:"varint,18,opt,name=player_danmaku_ai_recommended_level_v2,json=playerDanmakuAiRecommendedLevelV2,proto3" json:"player_danmaku_ai_recommended_level_v2,omitempty"`                                                                                                     //
	PlayerDanmakuAiRecommendedLevelV2Map map[int32]int32 `protobuf:"bytes,19,rep,name=player_danmaku_ai_recommended_level_v2_map,json=playerDanmakuAiRecommendedLevelV2Map,proto3" json:"player_danmaku_ai_recommended_level_v2_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //
}

func (x *DanmuDefaultPlayerConfig) Reset() {
	*x = DanmuDefaultPlayerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuDefaultPlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuDefaultPlayerConfig) ProtoMessage() {}

func (x *DanmuDefaultPlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuDefaultPlayerConfig.ProtoReflect.Descriptor instead.
func (*DanmuDefaultPlayerConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{15}
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuUseDefaultConfig() bool {
	if x != nil {
		return x.PlayerDanmakuUseDefaultConfig
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuAiRecommendedSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedSwitch
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuAiRecommendedLevel() int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevel
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlocktop() bool {
	if x != nil {
		return x.PlayerDanmakuBlocktop
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockscroll() bool {
	if x != nil {
		return x.PlayerDanmakuBlockscroll
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockbottom() bool {
	if x != nil {
		return x.PlayerDanmakuBlockbottom
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockcolorful() bool {
	if x != nil {
		return x.PlayerDanmakuBlockcolorful
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockrepeat() bool {
	if x != nil {
		return x.PlayerDanmakuBlockrepeat
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuBlockspecial() bool {
	if x != nil {
		return x.PlayerDanmakuBlockspecial
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuOpacity() float32 {
	if x != nil {
		return x.PlayerDanmakuOpacity
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuScalingfactor() float32 {
	if x != nil {
		return x.PlayerDanmakuScalingfactor
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuDomain() float32 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuSpeed() int32 {
	if x != nil {
		return x.PlayerDanmakuSpeed
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetInlinePlayerDanmakuSwitch() bool {
	if x != nil {
		return x.InlinePlayerDanmakuSwitch
	}
	return false
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuSeniorModeSwitch() int32 {
	if x != nil {
		return x.PlayerDanmakuSeniorModeSwitch
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuAiRecommendedLevelV2() int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevelV2
	}
	return 0
}

func (x *DanmuDefaultPlayerConfig) GetPlayerDanmakuAiRecommendedLevelV2Map() map[int32]int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevelV2Map
	}
	return nil
}

// 弹幕配置
type DanmuPlayerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerDanmakuSwitch                  bool            `protobuf:"varint,1,opt,name=player_danmaku_switch,json=playerDanmakuSwitch,proto3" json:"player_danmaku_switch,omitempty"`                                                                                                                                                      // 是否开启弹幕
	PlayerDanmakuSwitchSave              bool            `protobuf:"varint,2,opt,name=player_danmaku_switch_save,json=playerDanmakuSwitchSave,proto3" json:"player_danmaku_switch_save,omitempty"`                                                                                                                                        // 是否记录弹幕开关设置
	PlayerDanmakuUseDefaultConfig        bool            `protobuf:"varint,3,opt,name=player_danmaku_use_default_config,json=playerDanmakuUseDefaultConfig,proto3" json:"player_danmaku_use_default_config,omitempty"`                                                                                                                    // 是否使用推荐弹幕设置
	PlayerDanmakuAiRecommendedSwitch     bool            `protobuf:"varint,4,opt,name=player_danmaku_ai_recommended_switch,json=playerDanmakuAiRecommendedSwitch,proto3" json:"player_danmaku_ai_recommended_switch,omitempty"`                                                                                                           // 是否开启智能云屏蔽
	PlayerDanmakuAiRecommendedLevel      int32           `protobuf:"varint,5,opt,name=player_danmaku_ai_recommended_level,json=playerDanmakuAiRecommendedLevel,proto3" json:"player_danmaku_ai_recommended_level,omitempty"`                                                                                                              // 智能云屏蔽等级
	PlayerDanmakuBlocktop                bool            `protobuf:"varint,6,opt,name=player_danmaku_blocktop,json=playerDanmakuBlocktop,proto3" json:"player_danmaku_blocktop,omitempty"`                                                                                                                                                // 是否屏蔽顶端弹幕
	PlayerDanmakuBlockscroll             bool            `protobuf:"varint,7,opt,name=player_danmaku_blockscroll,json=playerDanmakuBlockscroll,proto3" json:"player_danmaku_blockscroll,omitempty"`                                                                                                                                       // 是否屏蔽滚动弹幕
	PlayerDanmakuBlockbottom             bool            `protobuf:"varint,8,opt,name=player_danmaku_blockbottom,json=playerDanmakuBlockbottom,proto3" json:"player_danmaku_blockbottom,omitempty"`                                                                                                                                       // 是否屏蔽底端弹幕
	PlayerDanmakuBlockcolorful           bool            `protobuf:"varint,9,opt,name=player_danmaku_blockcolorful,json=playerDanmakuBlockcolorful,proto3" json:"player_danmaku_blockcolorful,omitempty"`                                                                                                                                 // 是否屏蔽彩色弹幕
	PlayerDanmakuBlockrepeat             bool            `protobuf:"varint,10,opt,name=player_danmaku_blockrepeat,json=playerDanmakuBlockrepeat,proto3" json:"player_danmaku_blockrepeat,omitempty"`                                                                                                                                      // 是否屏蔽重复弹幕
	PlayerDanmakuBlockspecial            bool            `protobuf:"varint,11,opt,name=player_danmaku_blockspecial,json=playerDanmakuBlockspecial,proto3" json:"player_danmaku_blockspecial,omitempty"`                                                                                                                                   // 是否屏蔽高级弹幕
	PlayerDanmakuOpacity                 float32         `protobuf:"fixed32,12,opt,name=player_danmaku_opacity,json=playerDanmakuOpacity,proto3" json:"player_danmaku_opacity,omitempty"`                                                                                                                                                 // 弹幕不透明度
	PlayerDanmakuScalingfactor           float32         `protobuf:"fixed32,13,opt,name=player_danmaku_scalingfactor,json=playerDanmakuScalingfactor,proto3" json:"player_danmaku_scalingfactor,omitempty"`                                                                                                                               // 弹幕缩放比例
	PlayerDanmakuDomain                  float32         `protobuf:"fixed32,14,opt,name=player_danmaku_domain,json=playerDanmakuDomain,proto3" json:"player_danmaku_domain,omitempty"`                                                                                                                                                    // 弹幕显示区域
	PlayerDanmakuSpeed                   int32           `protobuf:"varint,15,opt,name=player_danmaku_speed,json=playerDanmakuSpeed,proto3" json:"player_danmaku_speed,omitempty"`                                                                                                                                                        // 弹幕速度
	PlayerDanmakuEnableblocklist         bool            `protobuf:"varint,16,opt,name=player_danmaku_enableblocklist,json=playerDanmakuEnableblocklist,proto3" json:"player_danmaku_enableblocklist,omitempty"`                                                                                                                          // 是否开启屏蔽列表
	InlinePlayerDanmakuSwitch            bool            `protobuf:"varint,17,opt,name=inline_player_danmaku_switch,json=inlinePlayerDanmakuSwitch,proto3" json:"inline_player_danmaku_switch,omitempty"`                                                                                                                                 // 是否开启弹幕
	InlinePlayerDanmakuConfig            int32           `protobuf:"varint,18,opt,name=inline_player_danmaku_config,json=inlinePlayerDanmakuConfig,proto3" json:"inline_player_danmaku_config,omitempty"`                                                                                                                                 //
	PlayerDanmakuIosSwitchSave           int32           `protobuf:"varint,19,opt,name=player_danmaku_ios_switch_save,json=playerDanmakuIosSwitchSave,proto3" json:"player_danmaku_ios_switch_save,omitempty"`                                                                                                                            //
	PlayerDanmakuSeniorModeSwitch        int32           `protobuf:"varint,20,opt,name=player_danmaku_senior_mode_switch,json=playerDanmakuSeniorModeSwitch,proto3" json:"player_danmaku_senior_mode_switch,omitempty"`                                                                                                                   //
	PlayerDanmakuAiRecommendedLevelV2    int32           `protobuf:"varint,21,opt,name=player_danmaku_ai_recommended_level_v2,json=playerDanmakuAiRecommendedLevelV2,proto3" json:"player_danmaku_ai_recommended_level_v2,omitempty"`                                                                                                     //
	PlayerDanmakuAiRecommendedLevelV2Map map[int32]int32 `protobuf:"bytes,22,rep,name=player_danmaku_ai_recommended_level_v2_map,json=playerDanmakuAiRecommendedLevelV2Map,proto3" json:"player_danmaku_ai_recommended_level_v2_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //
}

func (x *DanmuPlayerConfig) Reset() {
	*x = DanmuPlayerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuPlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuPlayerConfig) ProtoMessage() {}

func (x *DanmuPlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuPlayerConfig.ProtoReflect.Descriptor instead.
func (*DanmuPlayerConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{16}
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuSwitch
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuSwitchSave() bool {
	if x != nil {
		return x.PlayerDanmakuSwitchSave
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuUseDefaultConfig() bool {
	if x != nil {
		return x.PlayerDanmakuUseDefaultConfig
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuAiRecommendedSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedSwitch
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuAiRecommendedLevel() int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevel
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlocktop() bool {
	if x != nil {
		return x.PlayerDanmakuBlocktop
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockscroll() bool {
	if x != nil {
		return x.PlayerDanmakuBlockscroll
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockbottom() bool {
	if x != nil {
		return x.PlayerDanmakuBlockbottom
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockcolorful() bool {
	if x != nil {
		return x.PlayerDanmakuBlockcolorful
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockrepeat() bool {
	if x != nil {
		return x.PlayerDanmakuBlockrepeat
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuBlockspecial() bool {
	if x != nil {
		return x.PlayerDanmakuBlockspecial
	}
	return false
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuOpacity() float32 {
	if x != nil {
		return x.PlayerDanmakuOpacity
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuScalingfactor() float32 {
	if x != nil {
		return x.PlayerDanmakuScalingfactor
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuDomain() float32 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuSpeed() int32 {
	if x != nil {
		return x.PlayerDanmakuSpeed
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuEnableblocklist() bool {
	if x != nil {
		return x.PlayerDanmakuEnableblocklist
	}
	return false
}

func (x *DanmuPlayerConfig) GetInlinePlayerDanmakuSwitch() bool {
	if x != nil {
		return x.InlinePlayerDanmakuSwitch
	}
	return false
}

func (x *DanmuPlayerConfig) GetInlinePlayerDanmakuConfig() int32 {
	if x != nil {
		return x.InlinePlayerDanmakuConfig
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuIosSwitchSave() int32 {
	if x != nil {
		return x.PlayerDanmakuIosSwitchSave
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuSeniorModeSwitch() int32 {
	if x != nil {
		return x.PlayerDanmakuSeniorModeSwitch
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuAiRecommendedLevelV2() int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevelV2
	}
	return 0
}

func (x *DanmuPlayerConfig) GetPlayerDanmakuAiRecommendedLevelV2Map() map[int32]int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevelV2Map
	}
	return nil
}

type DanmuPlayerConfigPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionText string `protobuf:"bytes,1,opt,name=selection_text,json=selectionText,proto3" json:"selection_text,omitempty"`
}

func (x *DanmuPlayerConfigPanel) Reset() {
	*x = DanmuPlayerConfigPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuPlayerConfigPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuPlayerConfigPanel) ProtoMessage() {}

func (x *DanmuPlayerConfigPanel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuPlayerConfigPanel.ProtoReflect.Descriptor instead.
func (*DanmuPlayerConfigPanel) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{17}
}

func (x *DanmuPlayerConfigPanel) GetSelectionText() string {
	if x != nil {
		return x.SelectionText
	}
	return ""
}

// 弹幕显示区域自动配置
type DanmuPlayerDynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间
	Progress int32 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// 弹幕显示区域
	PlayerDanmakuDomain float32 `protobuf:"fixed32,14,opt,name=player_danmaku_domain,json=playerDanmakuDomain,proto3" json:"player_danmaku_domain,omitempty"`
}

func (x *DanmuPlayerDynamicConfig) Reset() {
	*x = DanmuPlayerDynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuPlayerDynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuPlayerDynamicConfig) ProtoMessage() {}

func (x *DanmuPlayerDynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuPlayerDynamicConfig.ProtoReflect.Descriptor instead.
func (*DanmuPlayerDynamicConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{18}
}

func (x *DanmuPlayerDynamicConfig) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DanmuPlayerDynamicConfig) GetPlayerDanmakuDomain() float32 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

// 弹幕配置信息
type DanmuPlayerViewConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕默认配置
	DanmukuDefaultPlayerConfig *DanmuDefaultPlayerConfig `protobuf:"bytes,1,opt,name=danmuku_default_player_config,json=danmukuDefaultPlayerConfig,proto3" json:"danmuku_default_player_config,omitempty"`
	// 弹幕用户配置
	DanmukuPlayerConfig *DanmuPlayerConfig `protobuf:"bytes,2,opt,name=danmuku_player_config,json=danmukuPlayerConfig,proto3" json:"danmuku_player_config,omitempty"`
	// 弹幕显示区域自动配置列表
	DanmukuPlayerDynamicConfig []*DanmuPlayerDynamicConfig `protobuf:"bytes,3,rep,name=danmuku_player_dynamic_config,json=danmukuPlayerDynamicConfig,proto3" json:"danmuku_player_dynamic_config,omitempty"`
	DanmukuPlayerConfigPanel *DanmuPlayerConfigPanel `protobuf:"bytes,4,opt,name=danmuku_player_config_panel,json=danmukuPlayerConfigPanel,proto3" json:"danmuku_player_config_panel,omitempty"`
}

func (x *DanmuPlayerViewConfig) Reset() {
	*x = DanmuPlayerViewConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuPlayerViewConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuPlayerViewConfig) ProtoMessage() {}

func (x *DanmuPlayerViewConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuPlayerViewConfig.ProtoReflect.Descriptor instead.
func (*DanmuPlayerViewConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{19}
}

func (x *DanmuPlayerViewConfig) GetDanmukuDefaultPlayerConfig() *DanmuDefaultPlayerConfig {
	if x != nil {
		return x.DanmukuDefaultPlayerConfig
	}
	return nil
}

func (x *DanmuPlayerViewConfig) GetDanmukuPlayerConfig() *DanmuPlayerConfig {
	if x != nil {
		return x.DanmukuPlayerConfig
	}
	return nil
}

func (x *DanmuPlayerViewConfig) GetDanmukuPlayerDynamicConfig() []*DanmuPlayerDynamicConfig {
	if x != nil {
		return x.DanmukuPlayerDynamicConfig
	}
	return nil
}

func (x *DanmuPlayerViewConfig) GetDanmukuPlayerConfigPanel() *DanmuPlayerConfigPanel {
	if x != nil {
		return x.DanmukuPlayerConfigPanel
	}
	return nil
}

// web端用户弹幕配置
type DanmuWebPlayerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DmSwitch         bool            `protobuf:"varint,1,opt,name=dm_switch,json=dmSwitch,proto3" json:"dm_switch,omitempty"`                                                                                                           // 是否开启弹幕
	AiSwitch         bool            `protobuf:"varint,2,opt,name=ai_switch,json=aiSwitch,proto3" json:"ai_switch,omitempty"`                                                                                                           // 是否开启智能云屏蔽
	AiLevel          int32           `protobuf:"varint,3,opt,name=ai_level,json=aiLevel,proto3" json:"ai_level,omitempty"`                                                                                                              // 智能云屏蔽等级
	Blocktop         bool            `protobuf:"varint,4,opt,name=blocktop,proto3" json:"blocktop,omitempty"`                                                                                                                           // 是否屏蔽顶端弹幕
	Blockscroll      bool            `protobuf:"varint,5,opt,name=blockscroll,proto3" json:"blockscroll,omitempty"`                                                                                                                     // 是否屏蔽滚动弹幕
	Blockbottom      bool            `protobuf:"varint,6,opt,name=blockbottom,proto3" json:"blockbottom,omitempty"`                                                                                                                     // 是否屏蔽底端弹幕
	Blockcolor       bool            `protobuf:"varint,7,opt,name=blockcolor,proto3" json:"blockcolor,omitempty"`                                                                                                                       // 是否屏蔽彩色弹幕
	Blockspecial     bool            `protobuf:"varint,8,opt,name=blockspecial,proto3" json:"blockspecial,omitempty"`                                                                                                                   // 是否屏蔽重复弹幕
	Preventshade     bool            `protobuf:"varint,9,opt,name=preventshade,proto3" json:"preventshade,omitempty"`                                                                                                                   //
	Dmask            bool            `protobuf:"varint,10,opt,name=dmask,proto3" json:"dmask,omitempty"`                                                                                                                                //
	Opacity          float32         `protobuf:"fixed32,11,opt,name=opacity,proto3" json:"opacity,omitempty"`                                                                                                                           //
	Dmarea           int32           `protobuf:"varint,12,opt,name=dmarea,proto3" json:"dmarea,omitempty"`                                                                                                                              //
	Speedplus        float32         `protobuf:"fixed32,13,opt,name=speedplus,proto3" json:"speedplus,omitempty"`                                                                                                                       //
	Fontsize         float32         `protobuf:"fixed32,14,opt,name=fontsize,proto3" json:"fontsize,omitempty"`                                                                                                                         // 弹幕字号
	Screensync       bool            `protobuf:"varint,15,opt,name=screensync,proto3" json:"screensync,omitempty"`                                                                                                                      //
	Speedsync        bool            `protobuf:"varint,16,opt,name=speedsync,proto3" json:"speedsync,omitempty"`                                                                                                                        //
	Fontfamily       string          `protobuf:"bytes,17,opt,name=fontfamily,proto3" json:"fontfamily,omitempty"`                                                                                                                       //
	Bold             bool            `protobuf:"varint,18,opt,name=bold,proto3" json:"bold,omitempty"`                                                                                                                                  // 是否使用加粗
	Fontborder       int32           `protobuf:"varint,19,opt,name=fontborder,proto3" json:"fontborder,omitempty"`                                                                                                                      //
	DrawType         string          `protobuf:"bytes,20,opt,name=draw_type,json=drawType,proto3" json:"draw_type,omitempty"`                                                                                                           // 弹幕渲染类型
	SeniorModeSwitch int32           `protobuf:"varint,21,opt,name=senior_mode_switch,json=seniorModeSwitch,proto3" json:"senior_mode_switch,omitempty"`                                                                                //
	AiLevelV2        int32           `protobuf:"varint,22,opt,name=ai_level_v2,json=aiLevelV2,proto3" json:"ai_level_v2,omitempty"`                                                                                                     //
	AiLevelV2Map     map[int32]int32 `protobuf:"bytes,23,rep,name=ai_level_v2_map,json=aiLevelV2Map,proto3" json:"ai_level_v2_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //
}

func (x *DanmuWebPlayerConfig) Reset() {
	*x = DanmuWebPlayerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuWebPlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuWebPlayerConfig) ProtoMessage() {}

func (x *DanmuWebPlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuWebPlayerConfig.ProtoReflect.Descriptor instead.
func (*DanmuWebPlayerConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{20}
}

func (x *DanmuWebPlayerConfig) GetDmSwitch() bool {
	if x != nil {
		return x.DmSwitch
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetAiSwitch() bool {
	if x != nil {
		return x.AiSwitch
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetAiLevel() int32 {
	if x != nil {
		return x.AiLevel
	}
	return 0
}

func (x *DanmuWebPlayerConfig) GetBlocktop() bool {
	if x != nil {
		return x.Blocktop
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetBlockscroll() bool {
	if x != nil {
		return x.Blockscroll
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetBlockbottom() bool {
	if x != nil {
		return x.Blockbottom
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetBlockcolor() bool {
	if x != nil {
		return x.Blockcolor
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetBlockspecial() bool {
	if x != nil {
		return x.Blockspecial
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetPreventshade() bool {
	if x != nil {
		return x.Preventshade
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetDmask() bool {
	if x != nil {
		return x.Dmask
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetOpacity() float32 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *DanmuWebPlayerConfig) GetDmarea() int32 {
	if x != nil {
		return x.Dmarea
	}
	return 0
}

func (x *DanmuWebPlayerConfig) GetSpeedplus() float32 {
	if x != nil {
		return x.Speedplus
	}
	return 0
}

func (x *DanmuWebPlayerConfig) GetFontsize() float32 {
	if x != nil {
		return x.Fontsize
	}
	return 0
}

func (x *DanmuWebPlayerConfig) GetScreensync() bool {
	if x != nil {
		return x.Screensync
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetSpeedsync() bool {
	if x != nil {
		return x.Speedsync
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetFontfamily() string {
	if x != nil {
		return x.Fontfamily
	}
	return ""
}

func (x *DanmuWebPlayerConfig) GetBold() bool {
	if x != nil {
		return x.Bold
	}
	return false
}

func (x *DanmuWebPlayerConfig) GetFontborder() int32 {
	if x != nil {
		return x.Fontborder
	}
	return 0
}

func (x *DanmuWebPlayerConfig) GetDrawType() string {
	if x != nil {
		return x.DrawType
	}
	return ""
}

func (x *DanmuWebPlayerConfig) GetSeniorModeSwitch() int32 {
	if x != nil {
		return x.SeniorModeSwitch
	}
	return 0
}

func (x *DanmuWebPlayerConfig) GetAiLevelV2() int32 {
	if x != nil {
		return x.AiLevelV2
	}
	return 0
}

func (x *DanmuWebPlayerConfig) GetAiLevelV2Map() map[int32]int32 {
	if x != nil {
		return x.AiLevelV2Map
	}
	return nil
}

type DmColorful struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DmColorfulType `protobuf:"varint,1,opt,name=type,proto3,enum=bilibili.community.service.dm.v1.DmColorfulType" json:"type,omitempty"` // 颜色类型
	Src  string         `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`                                                         //
}

func (x *DmColorful) Reset() {
	*x = DmColorful{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmColorful) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmColorful) ProtoMessage() {}

func (x *DmColorful) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmColorful.ProtoReflect.Descriptor instead.
func (*DmColorful) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{21}
}

func (x *DmColorful) GetType() DmColorfulType {
	if x != nil {
		return x.Type
	}
	return DmColorfulType_NoneType
}

func (x *DmColorful) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

type DmExpoReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
}

func (x *DmExpoReportReq) Reset() {
	*x = DmExpoReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmExpoReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmExpoReportReq) ProtoMessage() {}

func (x *DmExpoReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmExpoReportReq.ProtoReflect.Descriptor instead.
func (*DmExpoReportReq) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{22}
}

func (x *DmExpoReportReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DmExpoReportReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmExpoReportReq) GetSpmid() string {
	if x != nil {
		return x.Spmid
	}
	return ""
}

type DmExpoReportRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DmExpoReportRes) Reset() {
	*x = DmExpoReportRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmExpoReportRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmExpoReportRes) ProtoMessage() {}

func (x *DmExpoReportRes) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmExpoReportRes.ProtoReflect.Descriptor instead.
func (*DmExpoReportRes) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{23}
}

// 修改弹幕配置-请求
type DmPlayerConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts                        int64                              `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`                                                                     //
	Switch                    *PlayerDanmakuSwitch               `protobuf:"bytes,2,opt,name=switch,proto3" json:"switch,omitempty"`                                                              // 是否开启弹幕
	SwitchSave                *PlayerDanmakuSwitchSave           `protobuf:"bytes,3,opt,name=switch_save,json=switchSave,proto3" json:"switch_save,omitempty"`                                    // 是否记录弹幕开关设置
	UseDefaultConfig          *PlayerDanmakuUseDefaultConfig     `protobuf:"bytes,4,opt,name=use_default_config,json=useDefaultConfig,proto3" json:"use_default_config,omitempty"`                // 是否使用推荐弹幕设置
	AiRecommendedSwitch       *PlayerDanmakuAiRecommendedSwitch  `protobuf:"bytes,5,opt,name=ai_recommended_switch,json=aiRecommendedSwitch,proto3" json:"ai_recommended_switch,omitempty"`       // 是否开启智能云屏蔽
	AiRecommendedLevel        *PlayerDanmakuAiRecommendedLevel   `protobuf:"bytes,6,opt,name=ai_recommended_level,json=aiRecommendedLevel,proto3" json:"ai_recommended_level,omitempty"`          // 智能云屏蔽等级
	Blocktop                  *PlayerDanmakuBlocktop             `protobuf:"bytes,7,opt,name=blocktop,proto3" json:"blocktop,omitempty"`                                                          // 是否屏蔽顶端弹幕
	Blockscroll               *PlayerDanmakuBlockscroll          `protobuf:"bytes,8,opt,name=blockscroll,proto3" json:"blockscroll,omitempty"`                                                    // 是否屏蔽滚动弹幕
	Blockbottom               *PlayerDanmakuBlockbottom          `protobuf:"bytes,9,opt,name=blockbottom,proto3" json:"blockbottom,omitempty"`                                                    // 是否屏蔽底端弹幕
	Blockcolorful             *PlayerDanmakuBlockcolorful        `protobuf:"bytes,10,opt,name=blockcolorful,proto3" json:"blockcolorful,omitempty"`                                               // 是否屏蔽彩色弹幕
	Blockrepeat               *PlayerDanmakuBlockrepeat          `protobuf:"bytes,11,opt,name=blockrepeat,proto3" json:"blockrepeat,omitempty"`                                                   // 是否屏蔽重复弹幕
	Blockspecial              *PlayerDanmakuBlockspecial         `protobuf:"bytes,12,opt,name=blockspecial,proto3" json:"blockspecial,omitempty"`                                                 // 是否屏蔽高级弹幕
	Opacity                   *PlayerDanmakuOpacity              `protobuf:"bytes,13,opt,name=opacity,proto3" json:"opacity,omitempty"`                                                           // 弹幕不透明度
	Scalingfactor             *PlayerDanmakuScalingfactor        `protobuf:"bytes,14,opt,name=scalingfactor,proto3" json:"scalingfactor,omitempty"`                                               // 弹幕缩放比例
	Domain                    *PlayerDanmakuDomain               `protobuf:"bytes,15,opt,name=domain,proto3" json:"domain,omitempty"`                                                             // 弹幕显示区域
	Speed                     *PlayerDanmakuSpeed                `protobuf:"bytes,16,opt,name=speed,proto3" json:"speed,omitempty"`                                                               // 弹幕速度
	Enableblocklist           *PlayerDanmakuEnableblocklist      `protobuf:"bytes,17,opt,name=enableblocklist,proto3" json:"enableblocklist,omitempty"`                                           // 是否开启屏蔽列表
	InlinePlayerDanmakuSwitch *InlinePlayerDanmakuSwitch         `protobuf:"bytes,18,opt,name=inlinePlayerDanmakuSwitch,proto3" json:"inlinePlayerDanmakuSwitch,omitempty"`                       // 是否开启弹幕
	SeniorModeSwitch          *PlayerDanmakuSeniorModeSwitch     `protobuf:"bytes,19,opt,name=senior_mode_switch,json=seniorModeSwitch,proto3" json:"senior_mode_switch,omitempty"`               //
	AiRecommendedLevelV2      *PlayerDanmakuAiRecommendedLevelV2 `protobuf:"bytes,20,opt,name=ai_recommended_level_v2,json=aiRecommendedLevelV2,proto3" json:"ai_recommended_level_v2,omitempty"` //
}

func (x *DmPlayerConfigReq) Reset() {
	*x = DmPlayerConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmPlayerConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmPlayerConfigReq) ProtoMessage() {}

func (x *DmPlayerConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmPlayerConfigReq.ProtoReflect.Descriptor instead.
func (*DmPlayerConfigReq) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{24}
}

func (x *DmPlayerConfigReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *DmPlayerConfigReq) GetSwitch() *PlayerDanmakuSwitch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *DmPlayerConfigReq) GetSwitchSave() *PlayerDanmakuSwitchSave {
	if x != nil {
		return x.SwitchSave
	}
	return nil
}

func (x *DmPlayerConfigReq) GetUseDefaultConfig() *PlayerDanmakuUseDefaultConfig {
	if x != nil {
		return x.UseDefaultConfig
	}
	return nil
}

func (x *DmPlayerConfigReq) GetAiRecommendedSwitch() *PlayerDanmakuAiRecommendedSwitch {
	if x != nil {
		return x.AiRecommendedSwitch
	}
	return nil
}

func (x *DmPlayerConfigReq) GetAiRecommendedLevel() *PlayerDanmakuAiRecommendedLevel {
	if x != nil {
		return x.AiRecommendedLevel
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlocktop() *PlayerDanmakuBlocktop {
	if x != nil {
		return x.Blocktop
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockscroll() *PlayerDanmakuBlockscroll {
	if x != nil {
		return x.Blockscroll
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockbottom() *PlayerDanmakuBlockbottom {
	if x != nil {
		return x.Blockbottom
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockcolorful() *PlayerDanmakuBlockcolorful {
	if x != nil {
		return x.Blockcolorful
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockrepeat() *PlayerDanmakuBlockrepeat {
	if x != nil {
		return x.Blockrepeat
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockspecial() *PlayerDanmakuBlockspecial {
	if x != nil {
		return x.Blockspecial
	}
	return nil
}

func (x *DmPlayerConfigReq) GetOpacity() *PlayerDanmakuOpacity {
	if x != nil {
		return x.Opacity
	}
	return nil
}

func (x *DmPlayerConfigReq) GetScalingfactor() *PlayerDanmakuScalingfactor {
	if x != nil {
		return x.Scalingfactor
	}
	return nil
}

func (x *DmPlayerConfigReq) GetDomain() *PlayerDanmakuDomain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *DmPlayerConfigReq) GetSpeed() *PlayerDanmakuSpeed {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *DmPlayerConfigReq) GetEnableblocklist() *PlayerDanmakuEnableblocklist {
	if x != nil {
		return x.Enableblocklist
	}
	return nil
}

func (x *DmPlayerConfigReq) GetInlinePlayerDanmakuSwitch() *InlinePlayerDanmakuSwitch {
	if x != nil {
		return x.InlinePlayerDanmakuSwitch
	}
	return nil
}

func (x *DmPlayerConfigReq) GetSeniorModeSwitch() *PlayerDanmakuSeniorModeSwitch {
	if x != nil {
		return x.SeniorModeSwitch
	}
	return nil
}

func (x *DmPlayerConfigReq) GetAiRecommendedLevelV2() *PlayerDanmakuAiRecommendedLevelV2 {
	if x != nil {
		return x.AiRecommendedLevelV2
	}
	return nil
}

type DmSegConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DmSegConfig) Reset() {
	*x = DmSegConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegConfig) ProtoMessage() {}

func (x *DmSegConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegConfig.ProtoReflect.Descriptor instead.
func (*DmSegConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{25}
}

func (x *DmSegConfig) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DmSegConfig) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取弹幕-响应
type DmSegMobileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹幕列表
	Elems []*DanmakuElem `protobuf:"bytes,1,rep,name=elems,proto3" json:"elems,omitempty"`
	// 是否已关闭弹幕
	// 0:未关闭 1:已关闭
	State int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	// 弹幕云屏蔽ai评分值
	AiFlag      *DanmakuAIFlag `protobuf:"bytes,3,opt,name=ai_flag,json=aiFlag,proto3" json:"ai_flag,omitempty"`
	ColorfulSrc []*DmColorful  `protobuf:"bytes,5,rep,name=colorfulSrc,proto3" json:"colorfulSrc,omitempty"`
}

func (x *DmSegMobileReply) Reset() {
	*x = DmSegMobileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegMobileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegMobileReply) ProtoMessage() {}

func (x *DmSegMobileReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegMobileReply.ProtoReflect.Descriptor instead.
func (*DmSegMobileReply) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{26}
}

func (x *DmSegMobileReply) GetElems() []*DanmakuElem {
	if x != nil {
		return x.Elems
	}
	return nil
}

func (x *DmSegMobileReply) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DmSegMobileReply) GetAiFlag() *DanmakuAIFlag {
	if x != nil {
		return x.AiFlag
	}
	return nil
}

func (x *DmSegMobileReply) GetColorfulSrc() []*DmColorful {
	if x != nil {
		return x.ColorfulSrc
	}
	return nil
}

// 获取弹幕-请求
type DmSegMobileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid/漫画epid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// 视频cid/漫画cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 弹幕类型
	// 1:视频 2:漫画
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 分段(6min)
	SegmentIndex int64 `protobuf:"varint,4,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	// 是否青少年模式
	TeenagersMode int32 `protobuf:"varint,5,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	Ps int64 `protobuf:"varint,6,opt,name=ps,proto3" json:"ps,omitempty"`
	Pe int64 `protobuf:"varint,7,opt,name=pe,proto3" json:"pe,omitempty"`
	PullMode int32 `protobuf:"varint,8,opt,name=pull_mode,json=pullMode,proto3" json:"pull_mode,omitempty"`
	FromScene int32 `protobuf:"varint,9,opt,name=from_scene,json=fromScene,proto3" json:"from_scene,omitempty"`
}

func (x *DmSegMobileReq) Reset() {
	*x = DmSegMobileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegMobileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegMobileReq) ProtoMessage() {}

func (x *DmSegMobileReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegMobileReq.ProtoReflect.Descriptor instead.
func (*DmSegMobileReq) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{27}
}

func (x *DmSegMobileReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DmSegMobileReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmSegMobileReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DmSegMobileReq) GetSegmentIndex() int64 {
	if x != nil {
		return x.SegmentIndex
	}
	return 0
}

func (x *DmSegMobileReq) GetTeenagersMode() int32 {
	if x != nil {
		return x.TeenagersMode
	}
	return 0
}

func (x *DmSegMobileReq) GetPs() int64 {
	if x != nil {
		return x.Ps
	}
	return 0
}

func (x *DmSegMobileReq) GetPe() int64 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *DmSegMobileReq) GetPullMode() int32 {
	if x != nil {
		return x.PullMode
	}
	return 0
}

func (x *DmSegMobileReq) GetFromScene() int32 {
	if x != nil {
		return x.FromScene
	}
	return 0
}

// ott弹幕列表-响应
type DmSegOttReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否已关闭弹幕
	// 0:未关闭 1:已关闭
	Closed bool `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	// 弹幕列表
	Elems []*DanmakuElem `protobuf:"bytes,2,rep,name=elems,proto3" json:"elems,omitempty"`
}

func (x *DmSegOttReply) Reset() {
	*x = DmSegOttReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegOttReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegOttReply) ProtoMessage() {}

func (x *DmSegOttReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegOttReply.ProtoReflect.Descriptor instead.
func (*DmSegOttReply) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{28}
}

func (x *DmSegOttReply) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *DmSegOttReply) GetElems() []*DanmakuElem {
	if x != nil {
		return x.Elems
	}
	return nil
}

// ott弹幕列表-请求
type DmSegOttReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid/漫画epid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// 视频cid/漫画cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 弹幕类型
	// 1:视频 2:漫画
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 分段(6min)
	SegmentIndex int64 `protobuf:"varint,4,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
}

func (x *DmSegOttReq) Reset() {
	*x = DmSegOttReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegOttReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegOttReq) ProtoMessage() {}

func (x *DmSegOttReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegOttReq.ProtoReflect.Descriptor instead.
func (*DmSegOttReq) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{29}
}

func (x *DmSegOttReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DmSegOttReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmSegOttReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DmSegOttReq) GetSegmentIndex() int64 {
	if x != nil {
		return x.SegmentIndex
	}
	return 0
}

// 弹幕SDK-响应
type DmSegSDKReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否已关闭弹幕
	// 0:未关闭 1:已关闭
	Closed bool `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	// 弹幕列表
	Elems []*DanmakuElem `protobuf:"bytes,2,rep,name=elems,proto3" json:"elems,omitempty"`
}

func (x *DmSegSDKReply) Reset() {
	*x = DmSegSDKReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegSDKReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegSDKReply) ProtoMessage() {}

func (x *DmSegSDKReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegSDKReply.ProtoReflect.Descriptor instead.
func (*DmSegSDKReply) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{30}
}

func (x *DmSegSDKReply) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *DmSegSDKReply) GetElems() []*DanmakuElem {
	if x != nil {
		return x.Elems
	}
	return nil
}

// 弹幕SDK-请求
type DmSegSDKReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid/漫画epid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// 视频cid/漫画cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 弹幕类型
	// 1:视频 2:漫画
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 分段(6min)
	SegmentIndex int64 `protobuf:"varint,4,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
}

func (x *DmSegSDKReq) Reset() {
	*x = DmSegSDKReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegSDKReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegSDKReq) ProtoMessage() {}

func (x *DmSegSDKReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegSDKReq.ProtoReflect.Descriptor instead.
func (*DmSegSDKReq) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{31}
}

func (x *DmSegSDKReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DmSegSDKReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmSegSDKReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DmSegSDKReq) GetSegmentIndex() int64 {
	if x != nil {
		return x.SegmentIndex
	}
	return 0
}

// 客户端弹幕元数据-响应
type DmViewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否已关闭弹幕
	// 0:未关闭 1:已关闭
	Closed bool `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	// 智能防挡弹幕蒙版信息
	Mask *VideoMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	// 视频字幕
	Subtitle *VideoSubtitle `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 高级弹幕专包url(bfs)
	SpecialDms []string `protobuf:"bytes,4,rep,name=special_dms,json=specialDms,proto3" json:"special_dms,omitempty"`
	// 云屏蔽配置信息
	AiFlag *DanmakuFlagConfig `protobuf:"bytes,5,opt,name=ai_flag,json=aiFlag,proto3" json:"ai_flag,omitempty"`
	// 弹幕配置信息
	PlayerConfig *DanmuPlayerViewConfig `protobuf:"bytes,6,opt,name=player_config,json=playerConfig,proto3" json:"player_config,omitempty"`
	// 弹幕发送框样式
	SendBoxStyle int32 `protobuf:"varint,7,opt,name=send_box_style,json=sendBoxStyle,proto3" json:"send_box_style,omitempty"`
	// 是否允许
	Allow bool `protobuf:"varint,8,opt,name=allow,proto3" json:"allow,omitempty"`
	// check box 是否展示
	CheckBox string `protobuf:"bytes,9,opt,name=check_box,json=checkBox,proto3" json:"check_box,omitempty"`
	// check box 展示文本
	CheckBoxShowMsg string `protobuf:"bytes,10,opt,name=check_box_show_msg,json=checkBoxShowMsg,proto3" json:"check_box_show_msg,omitempty"`
	// 展示文案
	TextPlaceholder string `protobuf:"bytes,11,opt,name=text_placeholder,json=textPlaceholder,proto3" json:"text_placeholder,omitempty"`
	// 弹幕输入框文案
	InputPlaceholder string `protobuf:"bytes,12,opt,name=input_placeholder,json=inputPlaceholder,proto3" json:"input_placeholder,omitempty"`
	// 用户举报弹幕 cid维度屏蔽的正则规则
	ReportFilterContent []string `protobuf:"bytes,13,rep,name=report_filter_content,json=reportFilterContent,proto3" json:"report_filter_content,omitempty"`
	ExpoReport *ExpoReport `protobuf:"bytes,14,opt,name=expo_report,json=expoReport,proto3" json:"expo_report,omitempty"`
	BuzzwordConfig *BuzzwordConfig `protobuf:"bytes,15,opt,name=buzzword_config,json=buzzwordConfig,proto3" json:"buzzword_config,omitempty"`
	Expressions []*Expressions `protobuf:"bytes,16,rep,name=expressions,proto3" json:"expressions,omitempty"`
	PostPanel []*PostPanel `protobuf:"bytes,17,rep,name=post_panel,json=postPanel,proto3" json:"post_panel,omitempty"`
	ActivityMeta []string `protobuf:"bytes,18,rep,name=activity_meta,json=activityMeta,proto3" json:"activity_meta,omitempty"`
	PostPanel2 []*PostPanelV2 `protobuf:"bytes,19,rep,name=post_panel2,json=postPanel2,proto3" json:"post_panel2,omitempty"`
}

func (x *DmViewReply) Reset() {
	*x = DmViewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmViewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmViewReply) ProtoMessage() {}

func (x *DmViewReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmViewReply.ProtoReflect.Descriptor instead.
func (*DmViewReply) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{32}
}

func (x *DmViewReply) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *DmViewReply) GetMask() *VideoMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *DmViewReply) GetSubtitle() *VideoSubtitle {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *DmViewReply) GetSpecialDms() []string {
	if x != nil {
		return x.SpecialDms
	}
	return nil
}

func (x *DmViewReply) GetAiFlag() *DanmakuFlagConfig {
	if x != nil {
		return x.AiFlag
	}
	return nil
}

func (x *DmViewReply) GetPlayerConfig() *DanmuPlayerViewConfig {
	if x != nil {
		return x.PlayerConfig
	}
	return nil
}

func (x *DmViewReply) GetSendBoxStyle() int32 {
	if x != nil {
		return x.SendBoxStyle
	}
	return 0
}

func (x *DmViewReply) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *DmViewReply) GetCheckBox() string {
	if x != nil {
		return x.CheckBox
	}
	return ""
}

func (x *DmViewReply) GetCheckBoxShowMsg() string {
	if x != nil {
		return x.CheckBoxShowMsg
	}
	return ""
}

func (x *DmViewReply) GetTextPlaceholder() string {
	if x != nil {
		return x.TextPlaceholder
	}
	return ""
}

func (x *DmViewReply) GetInputPlaceholder() string {
	if x != nil {
		return x.InputPlaceholder
	}
	return ""
}

func (x *DmViewReply) GetReportFilterContent() []string {
	if x != nil {
		return x.ReportFilterContent
	}
	return nil
}

func (x *DmViewReply) GetExpoReport() *ExpoReport {
	if x != nil {
		return x.ExpoReport
	}
	return nil
}

func (x *DmViewReply) GetBuzzwordConfig() *BuzzwordConfig {
	if x != nil {
		return x.BuzzwordConfig
	}
	return nil
}

func (x *DmViewReply) GetExpressions() []*Expressions {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *DmViewReply) GetPostPanel() []*PostPanel {
	if x != nil {
		return x.PostPanel
	}
	return nil
}

func (x *DmViewReply) GetActivityMeta() []string {
	if x != nil {
		return x.ActivityMeta
	}
	return nil
}

func (x *DmViewReply) GetPostPanel2() []*PostPanelV2 {
	if x != nil {
		return x.PostPanel2
	}
	return nil
}

// 客户端弹幕元数据-请求
type DmViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid/漫画epid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// 视频cid/漫画cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 弹幕类型
	// 1:视频 2:漫画
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 页面spm
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// 是否冷启
	IsHardBoot int32 `protobuf:"varint,5,opt,name=is_hard_boot,json=isHardBoot,proto3" json:"is_hard_boot,omitempty"`
}

func (x *DmViewReq) Reset() {
	*x = DmViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmViewReq) ProtoMessage() {}

func (x *DmViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmViewReq.ProtoReflect.Descriptor instead.
func (*DmViewReq) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{33}
}

func (x *DmViewReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DmViewReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmViewReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DmViewReq) GetSpmid() string {
	if x != nil {
		return x.Spmid
	}
	return ""
}

func (x *DmViewReq) GetIsHardBoot() int32 {
	if x != nil {
		return x.IsHardBoot
	}
	return 0
}

// web端弹幕元数据-响应
// https://api.bilibili.com/x/v2/dm/web/view
type DmWebViewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否已关闭弹幕
	// 0:未关闭 1:已关闭
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	TextSide string `protobuf:"bytes,3,opt,name=text_side,json=textSide,proto3" json:"text_side,omitempty"`
	// 分段弹幕配置
	DmSge *DmSegConfig `protobuf:"bytes,4,opt,name=dm_sge,json=dmSge,proto3" json:"dm_sge,omitempty"`
	// 云屏蔽配置信息
	Flag *DanmakuFlagConfig `protobuf:"bytes,5,opt,name=flag,proto3" json:"flag,omitempty"`
	// 高级弹幕专包url(bfs)
	SpecialDms []string `protobuf:"bytes,6,rep,name=special_dms,json=specialDms,proto3" json:"special_dms,omitempty"`
	// check box 是否展示
	CheckBox bool `protobuf:"varint,7,opt,name=check_box,json=checkBox,proto3" json:"check_box,omitempty"`
	// 弹幕数
	Count int64 `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	// 互动弹幕
	CommandDms []*CommandDm `protobuf:"bytes,9,rep,name=commandDms,proto3" json:"commandDms,omitempty"`
	// 用户弹幕配置
	PlayerConfig *DanmuWebPlayerConfig `protobuf:"bytes,10,opt,name=player_config,json=playerConfig,proto3" json:"player_config,omitempty"`
	// 用户举报弹幕 cid维度屏蔽
	ReportFilterContent []string `protobuf:"bytes,11,rep,name=report_filter_content,json=reportFilterContent,proto3" json:"report_filter_content,omitempty"`
	Expressions []*Expressions `protobuf:"bytes,12,rep,name=expressions,proto3" json:"expressions,omitempty"`
	PostPanel []*PostPanel `protobuf:"bytes,13,rep,name=post_panel,json=postPanel,proto3" json:"post_panel,omitempty"`
	ActivityMeta []string `protobuf:"bytes,14,rep,name=activity_meta,json=activityMeta,proto3" json:"activity_meta,omitempty"`
}

func (x *DmWebViewReply) Reset() {
	*x = DmWebViewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmWebViewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmWebViewReply) ProtoMessage() {}

func (x *DmWebViewReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmWebViewReply.ProtoReflect.Descriptor instead.
func (*DmWebViewReply) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{34}
}

func (x *DmWebViewReply) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DmWebViewReply) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DmWebViewReply) GetTextSide() string {
	if x != nil {
		return x.TextSide
	}
	return ""
}

func (x *DmWebViewReply) GetDmSge() *DmSegConfig {
	if x != nil {
		return x.DmSge
	}
	return nil
}

func (x *DmWebViewReply) GetFlag() *DanmakuFlagConfig {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *DmWebViewReply) GetSpecialDms() []string {
	if x != nil {
		return x.SpecialDms
	}
	return nil
}

func (x *DmWebViewReply) GetCheckBox() bool {
	if x != nil {
		return x.CheckBox
	}
	return false
}

func (x *DmWebViewReply) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DmWebViewReply) GetCommandDms() []*CommandDm {
	if x != nil {
		return x.CommandDms
	}
	return nil
}

func (x *DmWebViewReply) GetPlayerConfig() *DanmuWebPlayerConfig {
	if x != nil {
		return x.PlayerConfig
	}
	return nil
}

func (x *DmWebViewReply) GetReportFilterContent() []string {
	if x != nil {
		return x.ReportFilterContent
	}
	return nil
}

func (x *DmWebViewReply) GetExpressions() []*Expressions {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *DmWebViewReply) GetPostPanel() []*PostPanel {
	if x != nil {
		return x.PostPanel
	}
	return nil
}

func (x *DmWebViewReply) GetActivityMeta() []string {
	if x != nil {
		return x.ActivityMeta
	}
	return nil
}

type ExpoReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldReportAtEnd bool `protobuf:"varint,1,opt,name=should_report_at_end,json=shouldReportAtEnd,proto3" json:"should_report_at_end,omitempty"`
}

func (x *ExpoReport) Reset() {
	*x = ExpoReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpoReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpoReport) ProtoMessage() {}

func (x *ExpoReport) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpoReport.ProtoReflect.Descriptor instead.
func (*ExpoReport) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{35}
}

func (x *ExpoReport) GetShouldReportAtEnd() bool {
	if x != nil {
		return x.ShouldReportAtEnd
	}
	return false
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword []string `protobuf:"bytes,1,rep,name=keyword,proto3" json:"keyword,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Period []*Period `protobuf:"bytes,3,rep,name=period,proto3" json:"period,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{36}
}

func (x *Expression) GetKeyword() []string {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *Expression) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Expression) GetPeriod() []*Period {
	if x != nil {
		return x.Period
	}
	return nil
}

type Expressions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Expression `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Expressions) Reset() {
	*x = Expressions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expressions) ProtoMessage() {}

func (x *Expressions) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expressions.ProtoReflect.Descriptor instead.
func (*Expressions) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{37}
}

func (x *Expressions) GetData() []*Expression {
	if x != nil {
		return x.Data
	}
	return nil
}

// 是否开启弹幕
type InlinePlayerDanmakuSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InlinePlayerDanmakuSwitch) Reset() {
	*x = InlinePlayerDanmakuSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlinePlayerDanmakuSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlinePlayerDanmakuSwitch) ProtoMessage() {}

func (x *InlinePlayerDanmakuSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlinePlayerDanmakuSwitch.ProtoReflect.Descriptor instead.
func (*InlinePlayerDanmakuSwitch) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{38}
}

func (x *InlinePlayerDanmakuSwitch) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content []string `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{39}
}

func (x *Label) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Label) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

type LabelV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content []string `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
	ExposureOnce bool `protobuf:"varint,3,opt,name=exposure_once,json=exposureOnce,proto3" json:"exposure_once,omitempty"`
	ExposureType int32 `protobuf:"varint,4,opt,name=exposure_type,json=exposureType,proto3" json:"exposure_type,omitempty"`
}

func (x *LabelV2) Reset() {
	*x = LabelV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelV2) ProtoMessage() {}

func (x *LabelV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelV2.ProtoReflect.Descriptor instead.
func (*LabelV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{40}
}

func (x *LabelV2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LabelV2) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *LabelV2) GetExposureOnce() bool {
	if x != nil {
		return x.ExposureOnce
	}
	return false
}

func (x *LabelV2) GetExposureType() int32 {
	if x != nil {
		return x.ExposureType
	}
	return 0
}

type Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Period) Reset() {
	*x = Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Period) ProtoMessage() {}

func (x *Period) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Period.ProtoReflect.Descriptor instead.
func (*Period) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{41}
}

func (x *Period) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Period) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type PlayerDanmakuAiRecommendedLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuAiRecommendedLevel) Reset() {
	*x = PlayerDanmakuAiRecommendedLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuAiRecommendedLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuAiRecommendedLevel) ProtoMessage() {}

func (x *PlayerDanmakuAiRecommendedLevel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuAiRecommendedLevel.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuAiRecommendedLevel) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{42}
}

func (x *PlayerDanmakuAiRecommendedLevel) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuAiRecommendedLevelV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuAiRecommendedLevelV2) Reset() {
	*x = PlayerDanmakuAiRecommendedLevelV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuAiRecommendedLevelV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuAiRecommendedLevelV2) ProtoMessage() {}

func (x *PlayerDanmakuAiRecommendedLevelV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuAiRecommendedLevelV2.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuAiRecommendedLevelV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{43}
}

func (x *PlayerDanmakuAiRecommendedLevelV2) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PlayerDanmakuAiRecommendedSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuAiRecommendedSwitch) Reset() {
	*x = PlayerDanmakuAiRecommendedSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuAiRecommendedSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuAiRecommendedSwitch) ProtoMessage() {}

func (x *PlayerDanmakuAiRecommendedSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuAiRecommendedSwitch.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuAiRecommendedSwitch) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{44}
}

func (x *PlayerDanmakuAiRecommendedSwitch) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuBlockbottom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockbottom) Reset() {
	*x = PlayerDanmakuBlockbottom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockbottom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockbottom) ProtoMessage() {}

func (x *PlayerDanmakuBlockbottom) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockbottom.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockbottom) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{45}
}

func (x *PlayerDanmakuBlockbottom) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuBlockcolorful struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockcolorful) Reset() {
	*x = PlayerDanmakuBlockcolorful{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockcolorful) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockcolorful) ProtoMessage() {}

func (x *PlayerDanmakuBlockcolorful) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockcolorful.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockcolorful) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{46}
}

func (x *PlayerDanmakuBlockcolorful) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuBlockrepeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockrepeat) Reset() {
	*x = PlayerDanmakuBlockrepeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockrepeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockrepeat) ProtoMessage() {}

func (x *PlayerDanmakuBlockrepeat) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockrepeat.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockrepeat) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{47}
}

func (x *PlayerDanmakuBlockrepeat) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuBlockscroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockscroll) Reset() {
	*x = PlayerDanmakuBlockscroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockscroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockscroll) ProtoMessage() {}

func (x *PlayerDanmakuBlockscroll) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockscroll.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockscroll) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{48}
}

func (x *PlayerDanmakuBlockscroll) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuBlockspecial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockspecial) Reset() {
	*x = PlayerDanmakuBlockspecial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockspecial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockspecial) ProtoMessage() {}

func (x *PlayerDanmakuBlockspecial) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockspecial.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockspecial) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{49}
}

func (x *PlayerDanmakuBlockspecial) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuBlocktop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlocktop) Reset() {
	*x = PlayerDanmakuBlocktop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlocktop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlocktop) ProtoMessage() {}

func (x *PlayerDanmakuBlocktop) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlocktop.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlocktop) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{50}
}

func (x *PlayerDanmakuBlocktop) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuDomain) Reset() {
	*x = PlayerDanmakuDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuDomain) ProtoMessage() {}

func (x *PlayerDanmakuDomain) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuDomain.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuDomain) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{51}
}

func (x *PlayerDanmakuDomain) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PlayerDanmakuEnableblocklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuEnableblocklist) Reset() {
	*x = PlayerDanmakuEnableblocklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuEnableblocklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuEnableblocklist) ProtoMessage() {}

func (x *PlayerDanmakuEnableblocklist) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuEnableblocklist.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuEnableblocklist) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{52}
}

func (x *PlayerDanmakuEnableblocklist) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuOpacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuOpacity) Reset() {
	*x = PlayerDanmakuOpacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuOpacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuOpacity) ProtoMessage() {}

func (x *PlayerDanmakuOpacity) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuOpacity.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuOpacity) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{53}
}

func (x *PlayerDanmakuOpacity) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PlayerDanmakuScalingfactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuScalingfactor) Reset() {
	*x = PlayerDanmakuScalingfactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuScalingfactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuScalingfactor) ProtoMessage() {}

func (x *PlayerDanmakuScalingfactor) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuScalingfactor.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuScalingfactor) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{54}
}

func (x *PlayerDanmakuScalingfactor) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PlayerDanmakuSeniorModeSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuSeniorModeSwitch) Reset() {
	*x = PlayerDanmakuSeniorModeSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuSeniorModeSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuSeniorModeSwitch) ProtoMessage() {}

func (x *PlayerDanmakuSeniorModeSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuSeniorModeSwitch.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuSeniorModeSwitch) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{55}
}

func (x *PlayerDanmakuSeniorModeSwitch) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PlayerDanmakuSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuSpeed) Reset() {
	*x = PlayerDanmakuSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuSpeed) ProtoMessage() {}

func (x *PlayerDanmakuSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuSpeed.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuSpeed) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{56}
}

func (x *PlayerDanmakuSpeed) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PlayerDanmakuSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	CanIgnore bool `protobuf:"varint,2,opt,name=can_ignore,json=canIgnore,proto3" json:"can_ignore,omitempty"`
}

func (x *PlayerDanmakuSwitch) Reset() {
	*x = PlayerDanmakuSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuSwitch) ProtoMessage() {}

func (x *PlayerDanmakuSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuSwitch.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuSwitch) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{57}
}

func (x *PlayerDanmakuSwitch) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *PlayerDanmakuSwitch) GetCanIgnore() bool {
	if x != nil {
		return x.CanIgnore
	}
	return false
}

type PlayerDanmakuSwitchSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuSwitchSave) Reset() {
	*x = PlayerDanmakuSwitchSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuSwitchSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuSwitchSave) ProtoMessage() {}

func (x *PlayerDanmakuSwitchSave) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuSwitchSave.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuSwitchSave) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{58}
}

func (x *PlayerDanmakuSwitchSave) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PlayerDanmakuUseDefaultConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuUseDefaultConfig) Reset() {
	*x = PlayerDanmakuUseDefaultConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuUseDefaultConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuUseDefaultConfig) ProtoMessage() {}

func (x *PlayerDanmakuUseDefaultConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuUseDefaultConfig.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuUseDefaultConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{59}
}

func (x *PlayerDanmakuUseDefaultConfig) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PostPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Priority int64 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	BizId int64 `protobuf:"varint,4,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	BizType PostPanelBizType `protobuf:"varint,5,opt,name=biz_type,json=bizType,proto3,enum=bilibili.community.service.dm.v1.PostPanelBizType" json:"biz_type,omitempty"`
	ClickButton *ClickButton `protobuf:"bytes,6,opt,name=click_button,json=clickButton,proto3" json:"click_button,omitempty"`
	TextInput *TextInput `protobuf:"bytes,7,opt,name=text_input,json=textInput,proto3" json:"text_input,omitempty"`
	CheckBox *CheckBox `protobuf:"bytes,8,opt,name=check_box,json=checkBox,proto3" json:"check_box,omitempty"`
	Toast *Toast `protobuf:"bytes,9,opt,name=toast,proto3" json:"toast,omitempty"`
}

func (x *PostPanel) Reset() {
	*x = PostPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPanel) ProtoMessage() {}

func (x *PostPanel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPanel.ProtoReflect.Descriptor instead.
func (*PostPanel) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{60}
}

func (x *PostPanel) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PostPanel) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *PostPanel) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PostPanel) GetBizId() int64 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *PostPanel) GetBizType() PostPanelBizType {
	if x != nil {
		return x.BizType
	}
	return PostPanelBizType_PostPanelBizTypeNone
}

func (x *PostPanel) GetClickButton() *ClickButton {
	if x != nil {
		return x.ClickButton
	}
	return nil
}

func (x *PostPanel) GetTextInput() *TextInput {
	if x != nil {
		return x.TextInput
	}
	return nil
}

func (x *PostPanel) GetCheckBox() *CheckBox {
	if x != nil {
		return x.CheckBox
	}
	return nil
}

func (x *PostPanel) GetToast() *Toast {
	if x != nil {
		return x.Toast
	}
	return nil
}

type PostPanelV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	BizType int32 `protobuf:"varint,3,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	ClickButton *ClickButtonV2 `protobuf:"bytes,4,opt,name=click_button,json=clickButton,proto3" json:"click_button,omitempty"`
	TextInput *TextInputV2 `protobuf:"bytes,5,opt,name=text_input,json=textInput,proto3" json:"text_input,omitempty"`
	CheckBox *CheckBoxV2 `protobuf:"bytes,6,opt,name=check_box,json=checkBox,proto3" json:"check_box,omitempty"`
	Toast *ToastV2 `protobuf:"bytes,7,opt,name=toast,proto3" json:"toast,omitempty"`
	Bubble *BubbleV2 `protobuf:"bytes,8,opt,name=bubble,proto3" json:"bubble,omitempty"`
	Label *LabelV2 `protobuf:"bytes,9,opt,name=label,proto3" json:"label,omitempty"`
	PostStatus int32 `protobuf:"varint,10,opt,name=post_status,json=postStatus,proto3" json:"post_status,omitempty"`
}

func (x *PostPanelV2) Reset() {
	*x = PostPanelV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPanelV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPanelV2) ProtoMessage() {}

func (x *PostPanelV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPanelV2.ProtoReflect.Descriptor instead.
func (*PostPanelV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{61}
}

func (x *PostPanelV2) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PostPanelV2) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *PostPanelV2) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *PostPanelV2) GetClickButton() *ClickButtonV2 {
	if x != nil {
		return x.ClickButton
	}
	return nil
}

func (x *PostPanelV2) GetTextInput() *TextInputV2 {
	if x != nil {
		return x.TextInput
	}
	return nil
}

func (x *PostPanelV2) GetCheckBox() *CheckBoxV2 {
	if x != nil {
		return x.CheckBox
	}
	return nil
}

func (x *PostPanelV2) GetToast() *ToastV2 {
	if x != nil {
		return x.Toast
	}
	return nil
}

func (x *PostPanelV2) GetBubble() *BubbleV2 {
	if x != nil {
		return x.Bubble
	}
	return nil
}

func (x *PostPanelV2) GetLabel() *LabelV2 {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *PostPanelV2) GetPostStatus() int32 {
	if x != nil {
		return x.PostStatus
	}
	return 0
}

// 修改弹幕配置-响应
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{62}
}

func (x *Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 单个字幕信息
type SubtitleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字幕id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 字幕id str
	IdStr string `protobuf:"bytes,2,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
	// 字幕语言代码
	Lan string `protobuf:"bytes,3,opt,name=lan,proto3" json:"lan,omitempty"`
	// 字幕语言
	LanDoc string `protobuf:"bytes,4,opt,name=lan_doc,json=lanDoc,proto3" json:"lan_doc,omitempty"`
	// 字幕文件url
	SubtitleUrl string `protobuf:"bytes,5,opt,name=subtitle_url,json=subtitleUrl,proto3" json:"subtitle_url,omitempty"`
	// 字幕作者信息
	Author *UserInfo `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	// 字幕类型
	Type SubtitleType `protobuf:"varint,7,opt,name=type,proto3,enum=bilibili.community.service.dm.v1.SubtitleType" json:"type,omitempty"`
	LanDocBrief string `protobuf:"bytes,8,opt,name=lan_doc_brief,json=lanDocBrief,proto3" json:"lan_doc_brief,omitempty"`
	AiType SubtitleAiType `protobuf:"varint,9,opt,name=ai_type,json=aiType,proto3,enum=bilibili.community.service.dm.v1.SubtitleAiType" json:"ai_type,omitempty"`
	AiStatus SubtitleAiStatus `protobuf:"varint,10,opt,name=ai_status,json=aiStatus,proto3,enum=bilibili.community.service.dm.v1.SubtitleAiStatus" json:"ai_status,omitempty"`
}

func (x *SubtitleItem) Reset() {
	*x = SubtitleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtitleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtitleItem) ProtoMessage() {}

func (x *SubtitleItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtitleItem.ProtoReflect.Descriptor instead.
func (*SubtitleItem) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{63}
}

func (x *SubtitleItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubtitleItem) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *SubtitleItem) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

func (x *SubtitleItem) GetLanDoc() string {
	if x != nil {
		return x.LanDoc
	}
	return ""
}

func (x *SubtitleItem) GetSubtitleUrl() string {
	if x != nil {
		return x.SubtitleUrl
	}
	return ""
}

func (x *SubtitleItem) GetAuthor() *UserInfo {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *SubtitleItem) GetType() SubtitleType {
	if x != nil {
		return x.Type
	}
	return SubtitleType_CC
}

func (x *SubtitleItem) GetLanDocBrief() string {
	if x != nil {
		return x.LanDocBrief
	}
	return ""
}

func (x *SubtitleItem) GetAiType() SubtitleAiType {
	if x != nil {
		return x.AiType
	}
	return SubtitleAiType_Normal
}

func (x *SubtitleItem) GetAiStatus() SubtitleAiStatus {
	if x != nil {
		return x.AiStatus
	}
	return SubtitleAiStatus_None
}

type TextInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortraitPlaceholder []string `protobuf:"bytes,1,rep,name=portrait_placeholder,json=portraitPlaceholder,proto3" json:"portrait_placeholder,omitempty"`
	LandscapePlaceholder []string `protobuf:"bytes,2,rep,name=landscape_placeholder,json=landscapePlaceholder,proto3" json:"landscape_placeholder,omitempty"`
	RenderType RenderType `protobuf:"varint,3,opt,name=render_type,json=renderType,proto3,enum=bilibili.community.service.dm.v1.RenderType" json:"render_type,omitempty"`
	PlaceholderPost bool `protobuf:"varint,4,opt,name=placeholder_post,json=placeholderPost,proto3" json:"placeholder_post,omitempty"`
	Show bool `protobuf:"varint,5,opt,name=show,proto3" json:"show,omitempty"`
	Avatar []*Avatar `protobuf:"bytes,6,rep,name=avatar,proto3" json:"avatar,omitempty"`
	PostStatus PostStatus `protobuf:"varint,7,opt,name=post_status,json=postStatus,proto3,enum=bilibili.community.service.dm.v1.PostStatus" json:"post_status,omitempty"`
	Label *Label `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *TextInput) Reset() {
	*x = TextInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextInput) ProtoMessage() {}

func (x *TextInput) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextInput.ProtoReflect.Descriptor instead.
func (*TextInput) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{64}
}

func (x *TextInput) GetPortraitPlaceholder() []string {
	if x != nil {
		return x.PortraitPlaceholder
	}
	return nil
}

func (x *TextInput) GetLandscapePlaceholder() []string {
	if x != nil {
		return x.LandscapePlaceholder
	}
	return nil
}

func (x *TextInput) GetRenderType() RenderType {
	if x != nil {
		return x.RenderType
	}
	return RenderType_RenderTypeNone
}

func (x *TextInput) GetPlaceholderPost() bool {
	if x != nil {
		return x.PlaceholderPost
	}
	return false
}

func (x *TextInput) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *TextInput) GetAvatar() []*Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *TextInput) GetPostStatus() PostStatus {
	if x != nil {
		return x.PostStatus
	}
	return PostStatus_PostStatusNormal
}

func (x *TextInput) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

type TextInputV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortraitPlaceholder []string `protobuf:"bytes,1,rep,name=portrait_placeholder,json=portraitPlaceholder,proto3" json:"portrait_placeholder,omitempty"`
	LandscapePlaceholder []string `protobuf:"bytes,2,rep,name=landscape_placeholder,json=landscapePlaceholder,proto3" json:"landscape_placeholder,omitempty"`
	RenderType RenderType `protobuf:"varint,3,opt,name=render_type,json=renderType,proto3,enum=bilibili.community.service.dm.v1.RenderType" json:"render_type,omitempty"`
	PlaceholderPost bool `protobuf:"varint,4,opt,name=placeholder_post,json=placeholderPost,proto3" json:"placeholder_post,omitempty"`
	Avatar []*Avatar `protobuf:"bytes,5,rep,name=avatar,proto3" json:"avatar,omitempty"`
	TextInputLimit int32 `protobuf:"varint,6,opt,name=text_input_limit,json=textInputLimit,proto3" json:"text_input_limit,omitempty"`
}

func (x *TextInputV2) Reset() {
	*x = TextInputV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextInputV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextInputV2) ProtoMessage() {}

func (x *TextInputV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextInputV2.ProtoReflect.Descriptor instead.
func (*TextInputV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{65}
}

func (x *TextInputV2) GetPortraitPlaceholder() []string {
	if x != nil {
		return x.PortraitPlaceholder
	}
	return nil
}

func (x *TextInputV2) GetLandscapePlaceholder() []string {
	if x != nil {
		return x.LandscapePlaceholder
	}
	return nil
}

func (x *TextInputV2) GetRenderType() RenderType {
	if x != nil {
		return x.RenderType
	}
	return RenderType_RenderTypeNone
}

func (x *TextInputV2) GetPlaceholderPost() bool {
	if x != nil {
		return x.PlaceholderPost
	}
	return false
}

func (x *TextInputV2) GetAvatar() []*Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *TextInputV2) GetTextInputLimit() int32 {
	if x != nil {
		return x.TextInputLimit
	}
	return 0
}

type Toast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Duration int32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Show bool `protobuf:"varint,3,opt,name=show,proto3" json:"show,omitempty"`
	Button *Button `protobuf:"bytes,4,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *Toast) Reset() {
	*x = Toast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Toast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toast) ProtoMessage() {}

func (x *Toast) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toast.ProtoReflect.Descriptor instead.
func (*Toast) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{66}
}

func (x *Toast) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Toast) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Toast) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *Toast) GetButton() *Button {
	if x != nil {
		return x.Button
	}
	return nil
}

type ToastButtonV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Action int32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ToastButtonV2) Reset() {
	*x = ToastButtonV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToastButtonV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToastButtonV2) ProtoMessage() {}

func (x *ToastButtonV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToastButtonV2.ProtoReflect.Descriptor instead.
func (*ToastButtonV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{67}
}

func (x *ToastButtonV2) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ToastButtonV2) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type ToastV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Duration int32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	ToastButtonV2 *ToastButtonV2 `protobuf:"bytes,3,opt,name=toast_button_v2,json=toastButtonV2,proto3" json:"toast_button_v2,omitempty"`
}

func (x *ToastV2) Reset() {
	*x = ToastV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToastV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToastV2) ProtoMessage() {}

func (x *ToastV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToastV2.ProtoReflect.Descriptor instead.
func (*ToastV2) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{68}
}

func (x *ToastV2) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ToastV2) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ToastV2) GetToastButtonV2() *ToastButtonV2 {
	if x != nil {
		return x.ToastButtonV2
	}
	return nil
}

// 字幕作者信息
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户昵称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户性别
	Sex string `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex,omitempty"`
	// 用户头像url
	Face string `protobuf:"bytes,4,opt,name=face,proto3" json:"face,omitempty"`
	// 用户签名
	Sign string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	// 用户等级
	Rank int32 `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{69}
}

func (x *UserInfo) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *UserInfo) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *UserInfo) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *UserInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// 智能防挡弹幕蒙版信息
type VideoMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频cid
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 平台
	// 0:web端 1:客户端
	Plat int32 `protobuf:"varint,2,opt,name=plat,proto3" json:"plat,omitempty"`
	// 帧率
	Fps int32 `protobuf:"varint,3,opt,name=fps,proto3" json:"fps,omitempty"`
	// 间隔时间
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	// 蒙版url
	MaskUrl string `protobuf:"bytes,5,opt,name=mask_url,json=maskUrl,proto3" json:"mask_url,omitempty"`
}

func (x *VideoMask) Reset() {
	*x = VideoMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMask) ProtoMessage() {}

func (x *VideoMask) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMask.ProtoReflect.Descriptor instead.
func (*VideoMask) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{70}
}

func (x *VideoMask) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *VideoMask) GetPlat() int32 {
	if x != nil {
		return x.Plat
	}
	return 0
}

func (x *VideoMask) GetFps() int32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *VideoMask) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *VideoMask) GetMaskUrl() string {
	if x != nil {
		return x.MaskUrl
	}
	return ""
}

// 视频字幕信息
type VideoSubtitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频原语言代码
	Lan string `protobuf:"bytes,1,opt,name=lan,proto3" json:"lan,omitempty"`
	// 视频原语言
	LanDoc string `protobuf:"bytes,2,opt,name=lanDoc,proto3" json:"lanDoc,omitempty"`
	// 视频字幕列表
	Subtitles []*SubtitleItem `protobuf:"bytes,3,rep,name=subtitles,proto3" json:"subtitles,omitempty"`
}

func (x *VideoSubtitle) Reset() {
	*x = VideoSubtitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSubtitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSubtitle) ProtoMessage() {}

func (x *VideoSubtitle) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_community_service_dm_v1_dm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSubtitle.ProtoReflect.Descriptor instead.
func (*VideoSubtitle) Descriptor() ([]byte, []int) {
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP(), []int{71}
}

func (x *VideoSubtitle) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

func (x *VideoSubtitle) GetLanDoc() string {
	if x != nil {
		return x.LanDoc
	}
	return ""
}

func (x *VideoSubtitle) GetSubtitles() []*SubtitleItem {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

var File_bilibili_community_service_dm_v1_dm_proto protoreflect.FileDescriptor

var file_bilibili_community_service_dm_v1_dm_proto_rawDesc = []byte{
	0x0a, 0x29, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x22, 0x79, 0x0a,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x06, 0x42, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xf9, 0x01, 0x0a, 0x08, 0x42, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x0b, 0x62,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x12,
	0x53, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x06, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x0e, 0x42, 0x75,
	0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xaa,
	0x01, 0x0a, 0x12, 0x42, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x7a,
	0x7a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x08,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x22, 0x59, 0x0a, 0x0a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x42, 0x6f, 0x78, 0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x6e,
	0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x72,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x22, 0x59, 0x0a, 0x0d, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41,
	0x49, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x48, 0x0a, 0x08, 0x64, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x07, 0x64, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0xa3, 0x03, 0x0a, 0x0b, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x66, 0x75, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x66, 0x75, 0x6c, 0x22, 0x35, 0x0a, 0x0b, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x68, 0x0a, 0x11,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0xcc, 0x0a, 0x0a, 0x18, 0x44, 0x61, 0x6e, 0x6d, 0x75,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x55, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a,
	0x24, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f,
	0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4c, 0x0a,
	0x23, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f,
	0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x74, 0x6f, 0x70, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12,
	0x40, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75,
	0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12,
	0x3e, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3f, 0x0a,
	0x1c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x48,
	0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x51, 0x0a, 0x26, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x76, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x12, 0xbe, 0x01, 0x0a, 0x2a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x61,
	0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x64, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x24, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x4d, 0x61, 0x70, 0x1a, 0x57, 0x0a, 0x29,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56,
	0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x0c, 0x0a, 0x11, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x3b, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x61, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x21,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x24, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x3c, 0x0a, 0x1a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x40,
	0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3f, 0x0a,
	0x1c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42,
	0x0a, 0x1e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x61, 0x76, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x49, 0x6f, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x61,
	0x76, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x65, 0x6e, 0x69,
	0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x51, 0x0a, 0x26,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x61,
	0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x12,
	0xb7, 0x01, 0x0a, 0x2a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x5f, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x24, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x4d, 0x61, 0x70, 0x1a, 0x57, 0x0a, 0x29, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3f, 0x0a, 0x16, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x22, 0x6a, 0x0a, 0x18, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0xf7, 0x03, 0x0a, 0x15, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x1d, 0x64, 0x61, 0x6e,
	0x6d, 0x75, 0x6b, 0x75, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1a, 0x64, 0x61,
	0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x15, 0x64, 0x61, 0x6e, 0x6d,
	0x75, 0x6b, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x64, 0x61,
	0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x7d, 0x0a, 0x1d, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d,
	0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x1a, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x77, 0x0a, 0x1b, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52,
	0x18, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x22, 0xe4, 0x06, 0x0a, 0x14, 0x44, 0x61,
	0x6e, 0x6d, 0x75, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x69, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x69, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x69, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x74, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x68, 0x61, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x68, 0x61, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x64, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6d, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x64, 0x6d, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x70, 0x6c, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x70, 0x6c, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x79, 0x6e,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x79, 0x6e, 0x63, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62,
	0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65,
	0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x12, 0x6f,
	0x0a, 0x0f, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75,
	0x57, 0x65, 0x62, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x61, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x4d, 0x61, 0x70, 0x1a,
	0x3f, 0x0a, 0x11, 0x41, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x64, 0x0a, 0x0a, 0x44, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x44,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x58, 0x0a, 0x0f, 0x44, 0x6d, 0x45, 0x78, 0x70, 0x6f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64,
	0x22, 0x11, 0x0a, 0x0f, 0x44, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x22, 0xff, 0x0e, 0x0a, 0x11, 0x44, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x53, 0x61, 0x76, 0x65, 0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x61, 0x76, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x75, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x15, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x13, 0x61, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x73, 0x0a, 0x14, 0x61,
	0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x12, 0x61, 0x69,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x53, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x5c, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x12, 0x62, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66,
	0x75, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x5c, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x07, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x79, 0x0a, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x6d, 0x0a, 0x12, 0x73, 0x65,
	0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x7a, 0x0a, 0x17, 0x61, 0x69, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x76, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x32, 0x52,
	0x14, 0x61, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x32, 0x22, 0x40, 0x0a, 0x0b, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x87, 0x02, 0x0a, 0x10, 0x44, 0x6d, 0x53, 0x65,
	0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x05,
	0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65, 0x6c, 0x65, 0x6d,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x41, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x06, 0x61, 0x69, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x53, 0x72, 0x63,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x66, 0x75, 0x6c, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x53, 0x72,
	0x63, 0x22, 0xf0, 0x01, 0x0a, 0x0e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x65, 0x65, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x6c, 0x6c,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x75, 0x6c,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x22, 0x6c, 0x0a, 0x0d, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4f, 0x74, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65, 0x6c, 0x65,
	0x6d, 0x73, 0x22, 0x6a, 0x0a, 0x0b, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4f, 0x74, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x6c,
	0x0a, 0x0d, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0x6a, 0x0a, 0x0b,
	0x44, 0x6d, 0x53, 0x65, 0x67, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xce, 0x08, 0x0a, 0x0b, 0x44, 0x6d, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x12, 0x3f, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x6d, 0x73, 0x12,
	0x4c, 0x0a, 0x07, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x61, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x5c, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x62, 0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x42, 0x6f, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f,
	0x78, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73,
	0x67, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x78,
	0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x0f,
	0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x32, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x56, 0x32, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x32, 0x22, 0x7b, 0x0a, 0x09, 0x44, 0x6d, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x70, 0x6d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x62, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x61,
	0x72, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x22, 0xda, 0x05, 0x0a, 0x0e, 0x44, 0x6d, 0x57, 0x65, 0x62,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x53, 0x69, 0x64, 0x65,
	0x12, 0x44, 0x0a, 0x06, 0x64, 0x6d, 0x5f, 0x73, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x64, 0x6d, 0x53, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x46,
	0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x6d, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x44, 0x6d, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x6d, 0x73,
	0x12, 0x5b, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75,
	0x57, 0x65, 0x62, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x45,
	0x6e, 0x64, 0x22, 0x7a, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x4f,
	0x0a, 0x0b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x31, 0x0a, 0x19, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x37, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x07,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x30, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x22, 0x37, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x21,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x30, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x19, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d,
	0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a,
	0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x1c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x2c, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x35, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x22, 0x2f, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x61, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x35, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x03, 0x0a, 0x09, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x69, 0x7a,
	0x49, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x47, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x6f, 0x61, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x61, 0x73, 0x74,
	0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x22, 0xa4, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x56,
	0x32, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56,
	0x32, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x09,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x56, 0x32, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x12, 0x3f, 0x0a, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x56,
	0x32, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x56, 0x32, 0x52, 0x06, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x32, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcb, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c,
	0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x42,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x6f,
	0x63, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x61, 0x6e, 0x44, 0x6f, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x07, 0x61, 0x69,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x69, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x41, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x61, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x6c, 0x61, 0x6e, 0x64, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0b,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xdb, 0x02, 0x0a, 0x0b, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x32, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x15, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61,
	0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x61,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x0d, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x07, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x56,
	0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x57, 0x0a, 0x0f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0d, 0x74, 0x6f, 0x61,
	0x73, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x56, 0x32, 0x22, 0x7e, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x72, 0x0a, 0x09, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x87,
	0x01, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c,
	0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x12, 0x4c, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x2a, 0x33, 0x0a, 0x0a, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x46, 0x54, 0x10, 0x01, 0x2a, 0x59, 0x0a,
	0x0a, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x62, 0x6f, 0x78, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x4d,
	0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x09, 0x44, 0x4d, 0x41, 0x74, 0x74, 0x72, 0x42, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x10, 0x44, 0x4d, 0x41, 0x74, 0x74, 0x72, 0x42, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4d, 0x41, 0x74, 0x74, 0x72, 0x42,
	0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x4d, 0x41, 0x74, 0x74, 0x72, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x02,
	0x2a, 0x35, 0x0a, 0x0e, 0x44, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x0f, 0x56, 0x69, 0x70, 0x47, 0x72, 0x61, 0x64, 0x75, 0x61, 0x6c, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x10, 0xe1, 0xd4, 0x03, 0x2a, 0x3c, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4d, 0x53,
	0x65, 0x6e, 0x64, 0x10, 0x01, 0x2a, 0xc1, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61, 0x67,
	0x65, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x4d, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x46, 0x54, 0x44, 0x4d, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x6f, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x72, 0x61, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x10, 0x05, 0x2a, 0x38, 0x0a, 0x0a, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x10, 0x01, 0x2a, 0x4e, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x2a, 0x36, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x41,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x10, 0x02, 0x2a, 0x2b, 0x0a, 0x0e, 0x53,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x01, 0x2a, 0x1e, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x43, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x49, 0x10, 0x01, 0x2a, 0x4e, 0x0a, 0x11, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x10, 0x01, 0x32, 0xa0, 0x05, 0x0a, 0x02, 0x44, 0x4d, 0x12,
	0x73, 0x0a, 0x0b, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x30,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x32, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x64, 0x0a, 0x06, 0x44, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2b,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6d, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x71, 0x0a, 0x0e, 0x44, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a,
	0x08, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4f, 0x74, 0x74, 0x12, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x53,
	0x65, 0x67, 0x4f, 0x74, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x53, 0x65,
	0x67, 0x4f, 0x74, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6a, 0x0a, 0x08, 0x44, 0x6d, 0x53,
	0x65, 0x67, 0x53, 0x44, 0x4b, 0x12, 0x2d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x53, 0x44,
	0x4b, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x53, 0x44, 0x4b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x74, 0x0a, 0x0c, 0x44, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x45, 0x78,
	0x70, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x42, 0x4d, 0x5a, 0x4b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x58, 0x69, 0x61, 0x6f, 0x4d, 0x69,
	0x6b, 0x75, 0x30, 0x31, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bilibili_community_service_dm_v1_dm_proto_rawDescOnce sync.Once
	file_bilibili_community_service_dm_v1_dm_proto_rawDescData = file_bilibili_community_service_dm_v1_dm_proto_rawDesc
)

func file_bilibili_community_service_dm_v1_dm_proto_rawDescGZIP() []byte {
	file_bilibili_community_service_dm_v1_dm_proto_rawDescOnce.Do(func() {
		file_bilibili_community_service_dm_v1_dm_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_community_service_dm_v1_dm_proto_rawDescData)
	})
	return file_bilibili_community_service_dm_v1_dm_proto_rawDescData
}

var file_bilibili_community_service_dm_v1_dm_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_bilibili_community_service_dm_v1_dm_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_bilibili_community_service_dm_v1_dm_proto_goTypes = []interface{}{
	(AvatarType)(0),                           // 0: bilibili.community.service.dm.v1.AvatarType
	(BubbleType)(0),                           // 1: bilibili.community.service.dm.v1.BubbleType
	(CheckboxType)(0),                         // 2: bilibili.community.service.dm.v1.CheckboxType
	(DMAttrBit)(0),                            // 3: bilibili.community.service.dm.v1.DMAttrBit
	(DmColorfulType)(0),                       // 4: bilibili.community.service.dm.v1.DmColorfulType
	(ExposureType)(0),                         // 5: bilibili.community.service.dm.v1.ExposureType
	(PostPanelBizType)(0),                     // 6: bilibili.community.service.dm.v1.PostPanelBizType
	(PostStatus)(0),                           // 7: bilibili.community.service.dm.v1.PostStatus
	(RenderType)(0),                           // 8: bilibili.community.service.dm.v1.RenderType
	(SubtitleAiStatus)(0),                     // 9: bilibili.community.service.dm.v1.SubtitleAiStatus
	(SubtitleAiType)(0),                       // 10: bilibili.community.service.dm.v1.SubtitleAiType
	(SubtitleType)(0),                         // 11: bilibili.community.service.dm.v1.SubtitleType
	(ToastFunctionType)(0),                    // 12: bilibili.community.service.dm.v1.ToastFunctionType
	(*Avatar)(nil),                            // 13: bilibili.community.service.dm.v1.Avatar
	(*Bubble)(nil),                            // 14: bilibili.community.service.dm.v1.Bubble
	(*BubbleV2)(nil),                          // 15: bilibili.community.service.dm.v1.BubbleV2
	(*Button)(nil),                            // 16: bilibili.community.service.dm.v1.Button
	(*BuzzwordConfig)(nil),                    // 17: bilibili.community.service.dm.v1.BuzzwordConfig
	(*BuzzwordShowConfig)(nil),                // 18: bilibili.community.service.dm.v1.BuzzwordShowConfig
	(*CheckBox)(nil),                          // 19: bilibili.community.service.dm.v1.CheckBox
	(*CheckBoxV2)(nil),                        // 20: bilibili.community.service.dm.v1.CheckBoxV2
	(*ClickButton)(nil),                       // 21: bilibili.community.service.dm.v1.ClickButton
	(*ClickButtonV2)(nil),                     // 22: bilibili.community.service.dm.v1.ClickButtonV2
	(*CommandDm)(nil),                         // 23: bilibili.community.service.dm.v1.CommandDm
	(*DanmakuAIFlag)(nil),                     // 24: bilibili.community.service.dm.v1.DanmakuAIFlag
	(*DanmakuElem)(nil),                       // 25: bilibili.community.service.dm.v1.DanmakuElem
	(*DanmakuFlag)(nil),                       // 26: bilibili.community.service.dm.v1.DanmakuFlag
	(*DanmakuFlagConfig)(nil),                 // 27: bilibili.community.service.dm.v1.DanmakuFlagConfig
	(*DanmuDefaultPlayerConfig)(nil),          // 28: bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
	(*DanmuPlayerConfig)(nil),                 // 29: bilibili.community.service.dm.v1.DanmuPlayerConfig
	(*DanmuPlayerConfigPanel)(nil),            // 30: bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
	(*DanmuPlayerDynamicConfig)(nil),          // 31: bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
	(*DanmuPlayerViewConfig)(nil),             // 32: bilibili.community.service.dm.v1.DanmuPlayerViewConfig
	(*DanmuWebPlayerConfig)(nil),              // 33: bilibili.community.service.dm.v1.DanmuWebPlayerConfig
	(*DmColorful)(nil),                        // 34: bilibili.community.service.dm.v1.DmColorful
	(*DmExpoReportReq)(nil),                   // 35: bilibili.community.service.dm.v1.DmExpoReportReq
	(*DmExpoReportRes)(nil),                   // 36: bilibili.community.service.dm.v1.DmExpoReportRes
	(*DmPlayerConfigReq)(nil),                 // 37: bilibili.community.service.dm.v1.DmPlayerConfigReq
	(*DmSegConfig)(nil),                       // 38: bilibili.community.service.dm.v1.DmSegConfig
	(*DmSegMobileReply)(nil),                  // 39: bilibili.community.service.dm.v1.DmSegMobileReply
	(*DmSegMobileReq)(nil),                    // 40: bilibili.community.service.dm.v1.DmSegMobileReq
	(*DmSegOttReply)(nil),                     // 41: bilibili.community.service.dm.v1.DmSegOttReply
	(*DmSegOttReq)(nil),                       // 42: bilibili.community.service.dm.v1.DmSegOttReq
	(*DmSegSDKReply)(nil),                     // 43: bilibili.community.service.dm.v1.DmSegSDKReply
	(*DmSegSDKReq)(nil),                       // 44: bilibili.community.service.dm.v1.DmSegSDKReq
	(*DmViewReply)(nil),                       // 45: bilibili.community.service.dm.v1.DmViewReply
	(*DmViewReq)(nil),                         // 46: bilibili.community.service.dm.v1.DmViewReq
	(*DmWebViewReply)(nil),                    // 47: bilibili.community.service.dm.v1.DmWebViewReply
	(*ExpoReport)(nil),                        // 48: bilibili.community.service.dm.v1.ExpoReport
	(*Expression)(nil),                        // 49: bilibili.community.service.dm.v1.Expression
	(*Expressions)(nil),                       // 50: bilibili.community.service.dm.v1.Expressions
	(*InlinePlayerDanmakuSwitch)(nil),         // 51: bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
	(*Label)(nil),                             // 52: bilibili.community.service.dm.v1.Label
	(*LabelV2)(nil),                           // 53: bilibili.community.service.dm.v1.LabelV2
	(*Period)(nil),                            // 54: bilibili.community.service.dm.v1.Period
	(*PlayerDanmakuAiRecommendedLevel)(nil),   // 55: bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
	(*PlayerDanmakuAiRecommendedLevelV2)(nil), // 56: bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
	(*PlayerDanmakuAiRecommendedSwitch)(nil),  // 57: bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
	(*PlayerDanmakuBlockbottom)(nil),          // 58: bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
	(*PlayerDanmakuBlockcolorful)(nil),        // 59: bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
	(*PlayerDanmakuBlockrepeat)(nil),          // 60: bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
	(*PlayerDanmakuBlockscroll)(nil),          // 61: bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
	(*PlayerDanmakuBlockspecial)(nil),         // 62: bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
	(*PlayerDanmakuBlocktop)(nil),             // 63: bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
	(*PlayerDanmakuDomain)(nil),               // 64: bilibili.community.service.dm.v1.PlayerDanmakuDomain
	(*PlayerDanmakuEnableblocklist)(nil),      // 65: bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
	(*PlayerDanmakuOpacity)(nil),              // 66: bilibili.community.service.dm.v1.PlayerDanmakuOpacity
	(*PlayerDanmakuScalingfactor)(nil),        // 67: bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
	(*PlayerDanmakuSeniorModeSwitch)(nil),     // 68: bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
	(*PlayerDanmakuSpeed)(nil),                // 69: bilibili.community.service.dm.v1.PlayerDanmakuSpeed
	(*PlayerDanmakuSwitch)(nil),               // 70: bilibili.community.service.dm.v1.PlayerDanmakuSwitch
	(*PlayerDanmakuSwitchSave)(nil),           // 71: bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
	(*PlayerDanmakuUseDefaultConfig)(nil),     // 72: bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
	(*PostPanel)(nil),                         // 73: bilibili.community.service.dm.v1.PostPanel
	(*PostPanelV2)(nil),                       // 74: bilibili.community.service.dm.v1.PostPanelV2
	(*Response)(nil),                          // 75: bilibili.community.service.dm.v1.Response
	(*SubtitleItem)(nil),                      // 76: bilibili.community.service.dm.v1.SubtitleItem
	(*TextInput)(nil),                         // 77: bilibili.community.service.dm.v1.TextInput
	(*TextInputV2)(nil),                       // 78: bilibili.community.service.dm.v1.TextInputV2
	(*Toast)(nil),                             // 79: bilibili.community.service.dm.v1.Toast
	(*ToastButtonV2)(nil),                     // 80: bilibili.community.service.dm.v1.ToastButtonV2
	(*ToastV2)(nil),                           // 81: bilibili.community.service.dm.v1.ToastV2
	(*UserInfo)(nil),                          // 82: bilibili.community.service.dm.v1.UserInfo
	(*VideoMask)(nil),                         // 83: bilibili.community.service.dm.v1.VideoMask
	(*VideoSubtitle)(nil),                     // 84: bilibili.community.service.dm.v1.VideoSubtitle
	nil,                                       // 85: bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.PlayerDanmakuAiRecommendedLevelV2MapEntry
	nil,                                       // 86: bilibili.community.service.dm.v1.DanmuPlayerConfig.PlayerDanmakuAiRecommendedLevelV2MapEntry
	nil,                                       // 87: bilibili.community.service.dm.v1.DanmuWebPlayerConfig.AiLevelV2MapEntry
}
var file_bilibili_community_service_dm_v1_dm_proto_depIdxs = []int32{
	0,  // 0: bilibili.community.service.dm.v1.Avatar.avatar_type:type_name -> bilibili.community.service.dm.v1.AvatarType
	1,  // 1: bilibili.community.service.dm.v1.BubbleV2.bubble_type:type_name -> bilibili.community.service.dm.v1.BubbleType
	5,  // 2: bilibili.community.service.dm.v1.BubbleV2.exposure_type:type_name -> bilibili.community.service.dm.v1.ExposureType
	18, // 3: bilibili.community.service.dm.v1.BuzzwordConfig.keywords:type_name -> bilibili.community.service.dm.v1.BuzzwordShowConfig
	2,  // 4: bilibili.community.service.dm.v1.CheckBox.type:type_name -> bilibili.community.service.dm.v1.CheckboxType
	8,  // 5: bilibili.community.service.dm.v1.ClickButton.render_type:type_name -> bilibili.community.service.dm.v1.RenderType
	14, // 6: bilibili.community.service.dm.v1.ClickButton.bubble:type_name -> bilibili.community.service.dm.v1.Bubble
	26, // 7: bilibili.community.service.dm.v1.DanmakuAIFlag.dm_flags:type_name -> bilibili.community.service.dm.v1.DanmakuFlag
	4,  // 8: bilibili.community.service.dm.v1.DanmakuElem.colorful:type_name -> bilibili.community.service.dm.v1.DmColorfulType
	85, // 9: bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_ai_recommended_level_v2_map:type_name -> bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.PlayerDanmakuAiRecommendedLevelV2MapEntry
	86, // 10: bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_ai_recommended_level_v2_map:type_name -> bilibili.community.service.dm.v1.DanmuPlayerConfig.PlayerDanmakuAiRecommendedLevelV2MapEntry
	28, // 11: bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_default_player_config:type_name -> bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
	29, // 12: bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_config:type_name -> bilibili.community.service.dm.v1.DanmuPlayerConfig
	31, // 13: bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_dynamic_config:type_name -> bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
	30, // 14: bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_config_panel:type_name -> bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
	87, // 15: bilibili.community.service.dm.v1.DanmuWebPlayerConfig.ai_level_v2_map:type_name -> bilibili.community.service.dm.v1.DanmuWebPlayerConfig.AiLevelV2MapEntry
	4,  // 16: bilibili.community.service.dm.v1.DmColorful.type:type_name -> bilibili.community.service.dm.v1.DmColorfulType
	70, // 17: bilibili.community.service.dm.v1.DmPlayerConfigReq.switch:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuSwitch
	71, // 18: bilibili.community.service.dm.v1.DmPlayerConfigReq.switch_save:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
	72, // 19: bilibili.community.service.dm.v1.DmPlayerConfigReq.use_default_config:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
	57, // 20: bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_switch:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
	55, // 21: bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_level:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
	63, // 22: bilibili.community.service.dm.v1.DmPlayerConfigReq.blocktop:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
	61, // 23: bilibili.community.service.dm.v1.DmPlayerConfigReq.blockscroll:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
	58, // 24: bilibili.community.service.dm.v1.DmPlayerConfigReq.blockbottom:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
	59, // 25: bilibili.community.service.dm.v1.DmPlayerConfigReq.blockcolorful:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
	60, // 26: bilibili.community.service.dm.v1.DmPlayerConfigReq.blockrepeat:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
	62, // 27: bilibili.community.service.dm.v1.DmPlayerConfigReq.blockspecial:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
	66, // 28: bilibili.community.service.dm.v1.DmPlayerConfigReq.opacity:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuOpacity
	67, // 29: bilibili.community.service.dm.v1.DmPlayerConfigReq.scalingfactor:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
	64, // 30: bilibili.community.service.dm.v1.DmPlayerConfigReq.domain:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuDomain
	69, // 31: bilibili.community.service.dm.v1.DmPlayerConfigReq.speed:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuSpeed
	65, // 32: bilibili.community.service.dm.v1.DmPlayerConfigReq.enableblocklist:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
	51, // 33: bilibili.community.service.dm.v1.DmPlayerConfigReq.inlinePlayerDanmakuSwitch:type_name -> bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
	68, // 34: bilibili.community.service.dm.v1.DmPlayerConfigReq.senior_mode_switch:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
	56, // 35: bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_level_v2:type_name -> bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
	25, // 36: bilibili.community.service.dm.v1.DmSegMobileReply.elems:type_name -> bilibili.community.service.dm.v1.DanmakuElem
	24, // 37: bilibili.community.service.dm.v1.DmSegMobileReply.ai_flag:type_name -> bilibili.community.service.dm.v1.DanmakuAIFlag
	34, // 38: bilibili.community.service.dm.v1.DmSegMobileReply.colorfulSrc:type_name -> bilibili.community.service.dm.v1.DmColorful
	25, // 39: bilibili.community.service.dm.v1.DmSegOttReply.elems:type_name -> bilibili.community.service.dm.v1.DanmakuElem
	25, // 40: bilibili.community.service.dm.v1.DmSegSDKReply.elems:type_name -> bilibili.community.service.dm.v1.DanmakuElem
	83, // 41: bilibili.community.service.dm.v1.DmViewReply.mask:type_name -> bilibili.community.service.dm.v1.VideoMask
	84, // 42: bilibili.community.service.dm.v1.DmViewReply.subtitle:type_name -> bilibili.community.service.dm.v1.VideoSubtitle
	27, // 43: bilibili.community.service.dm.v1.DmViewReply.ai_flag:type_name -> bilibili.community.service.dm.v1.DanmakuFlagConfig
	32, // 44: bilibili.community.service.dm.v1.DmViewReply.player_config:type_name -> bilibili.community.service.dm.v1.DanmuPlayerViewConfig
	48, // 45: bilibili.community.service.dm.v1.DmViewReply.expo_report:type_name -> bilibili.community.service.dm.v1.ExpoReport
	17, // 46: bilibili.community.service.dm.v1.DmViewReply.buzzword_config:type_name -> bilibili.community.service.dm.v1.BuzzwordConfig
	50, // 47: bilibili.community.service.dm.v1.DmViewReply.expressions:type_name -> bilibili.community.service.dm.v1.Expressions
	73, // 48: bilibili.community.service.dm.v1.DmViewReply.post_panel:type_name -> bilibili.community.service.dm.v1.PostPanel
	74, // 49: bilibili.community.service.dm.v1.DmViewReply.post_panel2:type_name -> bilibili.community.service.dm.v1.PostPanelV2
	38, // 50: bilibili.community.service.dm.v1.DmWebViewReply.dm_sge:type_name -> bilibili.community.service.dm.v1.DmSegConfig
	27, // 51: bilibili.community.service.dm.v1.DmWebViewReply.flag:type_name -> bilibili.community.service.dm.v1.DanmakuFlagConfig
	23, // 52: bilibili.community.service.dm.v1.DmWebViewReply.commandDms:type_name -> bilibili.community.service.dm.v1.CommandDm
	33, // 53: bilibili.community.service.dm.v1.DmWebViewReply.player_config:type_name -> bilibili.community.service.dm.v1.DanmuWebPlayerConfig
	50, // 54: bilibili.community.service.dm.v1.DmWebViewReply.expressions:type_name -> bilibili.community.service.dm.v1.Expressions
	73, // 55: bilibili.community.service.dm.v1.DmWebViewReply.post_panel:type_name -> bilibili.community.service.dm.v1.PostPanel
	54, // 56: bilibili.community.service.dm.v1.Expression.period:type_name -> bilibili.community.service.dm.v1.Period
	49, // 57: bilibili.community.service.dm.v1.Expressions.data:type_name -> bilibili.community.service.dm.v1.Expression
	6,  // 58: bilibili.community.service.dm.v1.PostPanel.biz_type:type_name -> bilibili.community.service.dm.v1.PostPanelBizType
	21, // 59: bilibili.community.service.dm.v1.PostPanel.click_button:type_name -> bilibili.community.service.dm.v1.ClickButton
	77, // 60: bilibili.community.service.dm.v1.PostPanel.text_input:type_name -> bilibili.community.service.dm.v1.TextInput
	19, // 61: bilibili.community.service.dm.v1.PostPanel.check_box:type_name -> bilibili.community.service.dm.v1.CheckBox
	79, // 62: bilibili.community.service.dm.v1.PostPanel.toast:type_name -> bilibili.community.service.dm.v1.Toast
	22, // 63: bilibili.community.service.dm.v1.PostPanelV2.click_button:type_name -> bilibili.community.service.dm.v1.ClickButtonV2
	78, // 64: bilibili.community.service.dm.v1.PostPanelV2.text_input:type_name -> bilibili.community.service.dm.v1.TextInputV2
	20, // 65: bilibili.community.service.dm.v1.PostPanelV2.check_box:type_name -> bilibili.community.service.dm.v1.CheckBoxV2
	81, // 66: bilibili.community.service.dm.v1.PostPanelV2.toast:type_name -> bilibili.community.service.dm.v1.ToastV2
	15, // 67: bilibili.community.service.dm.v1.PostPanelV2.bubble:type_name -> bilibili.community.service.dm.v1.BubbleV2
	53, // 68: bilibili.community.service.dm.v1.PostPanelV2.label:type_name -> bilibili.community.service.dm.v1.LabelV2
	82, // 69: bilibili.community.service.dm.v1.SubtitleItem.author:type_name -> bilibili.community.service.dm.v1.UserInfo
	11, // 70: bilibili.community.service.dm.v1.SubtitleItem.type:type_name -> bilibili.community.service.dm.v1.SubtitleType
	10, // 71: bilibili.community.service.dm.v1.SubtitleItem.ai_type:type_name -> bilibili.community.service.dm.v1.SubtitleAiType
	9,  // 72: bilibili.community.service.dm.v1.SubtitleItem.ai_status:type_name -> bilibili.community.service.dm.v1.SubtitleAiStatus
	8,  // 73: bilibili.community.service.dm.v1.TextInput.render_type:type_name -> bilibili.community.service.dm.v1.RenderType
	13, // 74: bilibili.community.service.dm.v1.TextInput.avatar:type_name -> bilibili.community.service.dm.v1.Avatar
	7,  // 75: bilibili.community.service.dm.v1.TextInput.post_status:type_name -> bilibili.community.service.dm.v1.PostStatus
	52, // 76: bilibili.community.service.dm.v1.TextInput.label:type_name -> bilibili.community.service.dm.v1.Label
	8,  // 77: bilibili.community.service.dm.v1.TextInputV2.render_type:type_name -> bilibili.community.service.dm.v1.RenderType
	13, // 78: bilibili.community.service.dm.v1.TextInputV2.avatar:type_name -> bilibili.community.service.dm.v1.Avatar
	16, // 79: bilibili.community.service.dm.v1.Toast.button:type_name -> bilibili.community.service.dm.v1.Button
	80, // 80: bilibili.community.service.dm.v1.ToastV2.toast_button_v2:type_name -> bilibili.community.service.dm.v1.ToastButtonV2
	76, // 81: bilibili.community.service.dm.v1.VideoSubtitle.subtitles:type_name -> bilibili.community.service.dm.v1.SubtitleItem
	40, // 82: bilibili.community.service.dm.v1.DM.DmSegMobile:input_type -> bilibili.community.service.dm.v1.DmSegMobileReq
	46, // 83: bilibili.community.service.dm.v1.DM.DmView:input_type -> bilibili.community.service.dm.v1.DmViewReq
	37, // 84: bilibili.community.service.dm.v1.DM.DmPlayerConfig:input_type -> bilibili.community.service.dm.v1.DmPlayerConfigReq
	42, // 85: bilibili.community.service.dm.v1.DM.DmSegOtt:input_type -> bilibili.community.service.dm.v1.DmSegOttReq
	44, // 86: bilibili.community.service.dm.v1.DM.DmSegSDK:input_type -> bilibili.community.service.dm.v1.DmSegSDKReq
	35, // 87: bilibili.community.service.dm.v1.DM.DmExpoReport:input_type -> bilibili.community.service.dm.v1.DmExpoReportReq
	39, // 88: bilibili.community.service.dm.v1.DM.DmSegMobile:output_type -> bilibili.community.service.dm.v1.DmSegMobileReply
	45, // 89: bilibili.community.service.dm.v1.DM.DmView:output_type -> bilibili.community.service.dm.v1.DmViewReply
	75, // 90: bilibili.community.service.dm.v1.DM.DmPlayerConfig:output_type -> bilibili.community.service.dm.v1.Response
	41, // 91: bilibili.community.service.dm.v1.DM.DmSegOtt:output_type -> bilibili.community.service.dm.v1.DmSegOttReply
	43, // 92: bilibili.community.service.dm.v1.DM.DmSegSDK:output_type -> bilibili.community.service.dm.v1.DmSegSDKReply
	36, // 93: bilibili.community.service.dm.v1.DM.DmExpoReport:output_type -> bilibili.community.service.dm.v1.DmExpoReportRes
	88, // [88:94] is the sub-list for method output_type
	82, // [82:88] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_bilibili_community_service_dm_v1_dm_proto_init() }
func file_bilibili_community_service_dm_v1_dm_proto_init() {
	if File_bilibili_community_service_dm_v1_dm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Avatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BubbleV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuzzwordConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuzzwordShowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBoxV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickButtonV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuAIFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuFlagConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuDefaultPlayerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuPlayerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuPlayerConfigPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuPlayerDynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuPlayerViewConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuWebPlayerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmColorful); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmExpoReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmExpoReportRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmPlayerConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegMobileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegMobileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegOttReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegOttReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegSDKReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegSDKReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmViewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmWebViewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpoReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expressions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlinePlayerDanmakuSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuAiRecommendedLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuAiRecommendedLevelV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuAiRecommendedSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockbottom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockcolorful); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockrepeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockscroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockspecial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlocktop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuEnableblocklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuOpacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuScalingfactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuSeniorModeSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuSwitchSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuUseDefaultConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPanelV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtitleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextInputV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Toast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToastButtonV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToastV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_community_service_dm_v1_dm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoSubtitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_community_service_dm_v1_dm_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bilibili_community_service_dm_v1_dm_proto_goTypes,
		DependencyIndexes: file_bilibili_community_service_dm_v1_dm_proto_depIdxs,
		EnumInfos:         file_bilibili_community_service_dm_v1_dm_proto_enumTypes,
		MessageInfos:      file_bilibili_community_service_dm_v1_dm_proto_msgTypes,
	}.Build()
	File_bilibili_community_service_dm_v1_dm_proto = out.File
	file_bilibili_community_service_dm_v1_dm_proto_rawDesc = nil
	file_bilibili_community_service_dm_v1_dm_proto_goTypes = nil
	file_bilibili_community_service_dm_v1_dm_proto_depIdxs = nil
}
