// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/main/community/reply/v1/reply.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Reply_MainList_FullMethodName          = "/bilibili.main.community.reply.v1.Reply/MainList"
	Reply_DetailList_FullMethodName        = "/bilibili.main.community.reply.v1.Reply/DetailList"
	Reply_DialogList_FullMethodName        = "/bilibili.main.community.reply.v1.Reply/DialogList"
	Reply_PreviewList_FullMethodName       = "/bilibili.main.community.reply.v1.Reply/PreviewList"
	Reply_SearchItemPreHook_FullMethodName = "/bilibili.main.community.reply.v1.Reply/SearchItemPreHook"
	Reply_SearchItem_FullMethodName        = "/bilibili.main.community.reply.v1.Reply/SearchItem"
	Reply_AtSearch_FullMethodName          = "/bilibili.main.community.reply.v1.Reply/AtSearch"
	Reply_ReplyInfo_FullMethodName         = "/bilibili.main.community.reply.v1.Reply/ReplyInfo"
	Reply_UserCallback_FullMethodName      = "/bilibili.main.community.reply.v1.Reply/UserCallback"
	Reply_ShareRepliesInfo_FullMethodName  = "/bilibili.main.community.reply.v1.Reply/ShareRepliesInfo"
	Reply_SuggestEmotes_FullMethodName     = "/bilibili.main.community.reply.v1.Reply/SuggestEmotes"
)

// ReplyClient is the client API for Reply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplyClient interface {
	// 主评论列表接口
	MainList(ctx context.Context, in *MainListReq, opts ...grpc.CallOption) (*MainListReply, error)
	// 二级评论明细接口
	DetailList(ctx context.Context, in *DetailListReq, opts ...grpc.CallOption) (*DetailListReply, error)
	// 对话评论树接口
	DialogList(ctx context.Context, in *DialogListReq, opts ...grpc.CallOption) (*DialogListReply, error)
	// 评论预览接口
	PreviewList(ctx context.Context, in *PreviewListReq, opts ...grpc.CallOption) (*PreviewListReply, error)
	// 评论搜索item前置发布接口
	SearchItemPreHook(ctx context.Context, in *SearchItemPreHookReq, opts ...grpc.CallOption) (*SearchItemPreHookReply, error)
	// 评论搜索插入项目接口
	SearchItem(ctx context.Context, in *SearchItemReq, opts ...grpc.CallOption) (*SearchItemReply, error)
	// 评论at用户搜索接口
	AtSearch(ctx context.Context, in *AtSearchReq, opts ...grpc.CallOption) (*AtSearchReply, error)
	// 查询单条评论接口
	ReplyInfo(ctx context.Context, in *ReplyInfoReq, opts ...grpc.CallOption) (*ReplyInfoReply, error)
	// 用户回调上报接口
	UserCallback(ctx context.Context, in *UserCallbackReq, opts ...grpc.CallOption) (*UserCallbackReply, error)
	// 评论分享材料接口
	ShareRepliesInfo(ctx context.Context, in *ShareRepliesInfoReq, opts ...grpc.CallOption) (*ShareRepliesInfoResp, error)
	// 评论表情推荐列表接口
	SuggestEmotes(ctx context.Context, in *SuggestEmotesReq, opts ...grpc.CallOption) (*SuggestEmotesResp, error)
}

type replyClient struct {
	cc grpc.ClientConnInterface
}

func NewReplyClient(cc grpc.ClientConnInterface) ReplyClient {
	return &replyClient{cc}
}

func (c *replyClient) MainList(ctx context.Context, in *MainListReq, opts ...grpc.CallOption) (*MainListReply, error) {
	out := new(MainListReply)
	err := c.cc.Invoke(ctx, Reply_MainList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) DetailList(ctx context.Context, in *DetailListReq, opts ...grpc.CallOption) (*DetailListReply, error) {
	out := new(DetailListReply)
	err := c.cc.Invoke(ctx, Reply_DetailList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) DialogList(ctx context.Context, in *DialogListReq, opts ...grpc.CallOption) (*DialogListReply, error) {
	out := new(DialogListReply)
	err := c.cc.Invoke(ctx, Reply_DialogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) PreviewList(ctx context.Context, in *PreviewListReq, opts ...grpc.CallOption) (*PreviewListReply, error) {
	out := new(PreviewListReply)
	err := c.cc.Invoke(ctx, Reply_PreviewList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) SearchItemPreHook(ctx context.Context, in *SearchItemPreHookReq, opts ...grpc.CallOption) (*SearchItemPreHookReply, error) {
	out := new(SearchItemPreHookReply)
	err := c.cc.Invoke(ctx, Reply_SearchItemPreHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) SearchItem(ctx context.Context, in *SearchItemReq, opts ...grpc.CallOption) (*SearchItemReply, error) {
	out := new(SearchItemReply)
	err := c.cc.Invoke(ctx, Reply_SearchItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) AtSearch(ctx context.Context, in *AtSearchReq, opts ...grpc.CallOption) (*AtSearchReply, error) {
	out := new(AtSearchReply)
	err := c.cc.Invoke(ctx, Reply_AtSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) ReplyInfo(ctx context.Context, in *ReplyInfoReq, opts ...grpc.CallOption) (*ReplyInfoReply, error) {
	out := new(ReplyInfoReply)
	err := c.cc.Invoke(ctx, Reply_ReplyInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) UserCallback(ctx context.Context, in *UserCallbackReq, opts ...grpc.CallOption) (*UserCallbackReply, error) {
	out := new(UserCallbackReply)
	err := c.cc.Invoke(ctx, Reply_UserCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) ShareRepliesInfo(ctx context.Context, in *ShareRepliesInfoReq, opts ...grpc.CallOption) (*ShareRepliesInfoResp, error) {
	out := new(ShareRepliesInfoResp)
	err := c.cc.Invoke(ctx, Reply_ShareRepliesInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) SuggestEmotes(ctx context.Context, in *SuggestEmotesReq, opts ...grpc.CallOption) (*SuggestEmotesResp, error) {
	out := new(SuggestEmotesResp)
	err := c.cc.Invoke(ctx, Reply_SuggestEmotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplyServer is the server API for Reply service.
// All implementations must embed UnimplementedReplyServer
// for forward compatibility
type ReplyServer interface {
	// 主评论列表接口
	MainList(context.Context, *MainListReq) (*MainListReply, error)
	// 二级评论明细接口
	DetailList(context.Context, *DetailListReq) (*DetailListReply, error)
	// 对话评论树接口
	DialogList(context.Context, *DialogListReq) (*DialogListReply, error)
	// 评论预览接口
	PreviewList(context.Context, *PreviewListReq) (*PreviewListReply, error)
	// 评论搜索item前置发布接口
	SearchItemPreHook(context.Context, *SearchItemPreHookReq) (*SearchItemPreHookReply, error)
	// 评论搜索插入项目接口
	SearchItem(context.Context, *SearchItemReq) (*SearchItemReply, error)
	// 评论at用户搜索接口
	AtSearch(context.Context, *AtSearchReq) (*AtSearchReply, error)
	// 查询单条评论接口
	ReplyInfo(context.Context, *ReplyInfoReq) (*ReplyInfoReply, error)
	// 用户回调上报接口
	UserCallback(context.Context, *UserCallbackReq) (*UserCallbackReply, error)
	// 评论分享材料接口
	ShareRepliesInfo(context.Context, *ShareRepliesInfoReq) (*ShareRepliesInfoResp, error)
	// 评论表情推荐列表接口
	SuggestEmotes(context.Context, *SuggestEmotesReq) (*SuggestEmotesResp, error)
	mustEmbedUnimplementedReplyServer()
}

// UnimplementedReplyServer must be embedded to have forward compatible implementations.
type UnimplementedReplyServer struct {
}

func (UnimplementedReplyServer) MainList(context.Context, *MainListReq) (*MainListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainList not implemented")
}
func (UnimplementedReplyServer) DetailList(context.Context, *DetailListReq) (*DetailListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailList not implemented")
}
func (UnimplementedReplyServer) DialogList(context.Context, *DialogListReq) (*DialogListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogList not implemented")
}
func (UnimplementedReplyServer) PreviewList(context.Context, *PreviewListReq) (*PreviewListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewList not implemented")
}
func (UnimplementedReplyServer) SearchItemPreHook(context.Context, *SearchItemPreHookReq) (*SearchItemPreHookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItemPreHook not implemented")
}
func (UnimplementedReplyServer) SearchItem(context.Context, *SearchItemReq) (*SearchItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItem not implemented")
}
func (UnimplementedReplyServer) AtSearch(context.Context, *AtSearchReq) (*AtSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtSearch not implemented")
}
func (UnimplementedReplyServer) ReplyInfo(context.Context, *ReplyInfoReq) (*ReplyInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyInfo not implemented")
}
func (UnimplementedReplyServer) UserCallback(context.Context, *UserCallbackReq) (*UserCallbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCallback not implemented")
}
func (UnimplementedReplyServer) ShareRepliesInfo(context.Context, *ShareRepliesInfoReq) (*ShareRepliesInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareRepliesInfo not implemented")
}
func (UnimplementedReplyServer) SuggestEmotes(context.Context, *SuggestEmotesReq) (*SuggestEmotesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestEmotes not implemented")
}
func (UnimplementedReplyServer) mustEmbedUnimplementedReplyServer() {}

// UnsafeReplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplyServer will
// result in compilation errors.
type UnsafeReplyServer interface {
	mustEmbedUnimplementedReplyServer()
}

func RegisterReplyServer(s grpc.ServiceRegistrar, srv ReplyServer) {
	s.RegisterService(&Reply_ServiceDesc, srv)
}

func _Reply_MainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).MainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_MainList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).MainList(ctx, req.(*MainListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_DetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).DetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_DetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).DetailList(ctx, req.(*DetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_DialogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).DialogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_DialogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).DialogList(ctx, req.(*DialogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_PreviewList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).PreviewList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_PreviewList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).PreviewList(ctx, req.(*PreviewListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_SearchItemPreHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemPreHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).SearchItemPreHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_SearchItemPreHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).SearchItemPreHook(ctx, req.(*SearchItemPreHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_SearchItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).SearchItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_SearchItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).SearchItem(ctx, req.(*SearchItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_AtSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).AtSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_AtSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).AtSearch(ctx, req.(*AtSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_ReplyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ReplyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ReplyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ReplyInfo(ctx, req.(*ReplyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_UserCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).UserCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_UserCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).UserCallback(ctx, req.(*UserCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_ShareRepliesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRepliesInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ShareRepliesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ShareRepliesInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ShareRepliesInfo(ctx, req.(*ShareRepliesInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_SuggestEmotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestEmotesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).SuggestEmotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_SuggestEmotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).SuggestEmotes(ctx, req.(*SuggestEmotesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Reply_ServiceDesc is the grpc.ServiceDesc for Reply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.main.community.reply.v1.Reply",
	HandlerType: (*ReplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MainList",
			Handler:    _Reply_MainList_Handler,
		},
		{
			MethodName: "DetailList",
			Handler:    _Reply_DetailList_Handler,
		},
		{
			MethodName: "DialogList",
			Handler:    _Reply_DialogList_Handler,
		},
		{
			MethodName: "PreviewList",
			Handler:    _Reply_PreviewList_Handler,
		},
		{
			MethodName: "SearchItemPreHook",
			Handler:    _Reply_SearchItemPreHook_Handler,
		},
		{
			MethodName: "SearchItem",
			Handler:    _Reply_SearchItem_Handler,
		},
		{
			MethodName: "AtSearch",
			Handler:    _Reply_AtSearch_Handler,
		},
		{
			MethodName: "ReplyInfo",
			Handler:    _Reply_ReplyInfo_Handler,
		},
		{
			MethodName: "UserCallback",
			Handler:    _Reply_UserCallback_Handler,
		},
		{
			MethodName: "ShareRepliesInfo",
			Handler:    _Reply_ShareRepliesInfo_Handler,
		},
		{
			MethodName: "SuggestEmotes",
			Handler:    _Reply_SuggestEmotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/main/community/reply/v1/reply.proto",
}
