// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: bilibili/playershared/playershared.proto

package playershared

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 视频编码
type CodeType int32

const (
	CodeType_NOCODE  CodeType = 0 //
	CodeType_CODE264 CodeType = 1 // H264
	CodeType_CODE265 CodeType = 2 // H265
	CodeType_CODEAV1 CodeType = 3 // AV1
)

// Enum value maps for CodeType.
var (
	CodeType_name = map[int32]string{
		0: "NOCODE",
		1: "CODE264",
		2: "CODE265",
		3: "CODEAV1",
	}
	CodeType_value = map[string]int32{
		"NOCODE":  0,
		"CODE264": 1,
		"CODE265": 2,
		"CODEAV1": 3,
	}
)

func (x CodeType) Enum() *CodeType {
	p := new(CodeType)
	*p = x
	return p
}

func (x CodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[0].Descriptor()
}

func (CodeType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[0]
}

func (x CodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeType.Descriptor instead.
func (CodeType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{0}
}

// 功能类型
type ConfType int32

const (
	ConfType_NoType         ConfType = 0
	ConfType_FLIPCONF       ConfType = 1
	ConfType_CASTCONF       ConfType = 2
	ConfType_FEEDBACK       ConfType = 3
	ConfType_SUBTITLE       ConfType = 4
	ConfType_PLAYBACKRATE   ConfType = 5
	ConfType_TIMEUP         ConfType = 6
	ConfType_PLAYBACKMODE   ConfType = 7
	ConfType_SCALEMODE      ConfType = 8
	ConfType_BACKGROUNDPLAY ConfType = 9
	ConfType_LIKE           ConfType = 10
	ConfType_DISLIKE        ConfType = 11
	ConfType_COIN           ConfType = 12
	ConfType_ELEC           ConfType = 13
	ConfType_SHARE          ConfType = 14
	ConfType_SCREENSHOT     ConfType = 15
	ConfType_LOCKSCREEN     ConfType = 16
	ConfType_RECOMMEND      ConfType = 17
	ConfType_PLAYBACKSPEED  ConfType = 18
	ConfType_DEFINITION     ConfType = 19
	ConfType_SELECTIONS     ConfType = 20
	ConfType_NEXT           ConfType = 21
	ConfType_EDITDM         ConfType = 22
	ConfType_SMALLWINDOW    ConfType = 23
	ConfType_SHAKE          ConfType = 24
	ConfType_OUTERDM        ConfType = 25
	ConfType_INNERDM        ConfType = 26
	ConfType_PANORAMA       ConfType = 27
	ConfType_DOLBY          ConfType = 28
	ConfType_COLORFILTER    ConfType = 29
	ConfType_LOSSLESS       ConfType = 30
	ConfType_FREYAENTER     ConfType = 31
	ConfType_FREYAFULLENTER ConfType = 32
	ConfType_SKIPOPED       ConfType = 33
	ConfType_RECORDSCREEN   ConfType = 34
	ConfType_DUBBING        ConfType = 35
	ConfType_LISTEN         ConfType = 36
)

// Enum value maps for ConfType.
var (
	ConfType_name = map[int32]string{
		0:  "NoType",
		1:  "FLIPCONF",
		2:  "CASTCONF",
		3:  "FEEDBACK",
		4:  "SUBTITLE",
		5:  "PLAYBACKRATE",
		6:  "TIMEUP",
		7:  "PLAYBACKMODE",
		8:  "SCALEMODE",
		9:  "BACKGROUNDPLAY",
		10: "LIKE",
		11: "DISLIKE",
		12: "COIN",
		13: "ELEC",
		14: "SHARE",
		15: "SCREENSHOT",
		16: "LOCKSCREEN",
		17: "RECOMMEND",
		18: "PLAYBACKSPEED",
		19: "DEFINITION",
		20: "SELECTIONS",
		21: "NEXT",
		22: "EDITDM",
		23: "SMALLWINDOW",
		24: "SHAKE",
		25: "OUTERDM",
		26: "INNERDM",
		27: "PANORAMA",
		28: "DOLBY",
		29: "COLORFILTER",
		30: "LOSSLESS",
		31: "FREYAENTER",
		32: "FREYAFULLENTER",
		33: "SKIPOPED",
		34: "RECORDSCREEN",
		35: "DUBBING",
		36: "LISTEN",
	}
	ConfType_value = map[string]int32{
		"NoType":         0,
		"FLIPCONF":       1,
		"CASTCONF":       2,
		"FEEDBACK":       3,
		"SUBTITLE":       4,
		"PLAYBACKRATE":   5,
		"TIMEUP":         6,
		"PLAYBACKMODE":   7,
		"SCALEMODE":      8,
		"BACKGROUNDPLAY": 9,
		"LIKE":           10,
		"DISLIKE":        11,
		"COIN":           12,
		"ELEC":           13,
		"SHARE":          14,
		"SCREENSHOT":     15,
		"LOCKSCREEN":     16,
		"RECOMMEND":      17,
		"PLAYBACKSPEED":  18,
		"DEFINITION":     19,
		"SELECTIONS":     20,
		"NEXT":           21,
		"EDITDM":         22,
		"SMALLWINDOW":    23,
		"SHAKE":          24,
		"OUTERDM":        25,
		"INNERDM":        26,
		"PANORAMA":       27,
		"DOLBY":          28,
		"COLORFILTER":    29,
		"LOSSLESS":       30,
		"FREYAENTER":     31,
		"FREYAFULLENTER": 32,
		"SKIPOPED":       33,
		"RECORDSCREEN":   34,
		"DUBBING":        35,
		"LISTEN":         36,
	}
)

func (x ConfType) Enum() *ConfType {
	p := new(ConfType)
	*p = x
	return p
}

func (x ConfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[1].Descriptor()
}

func (ConfType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[1]
}

func (x ConfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfType.Descriptor instead.
func (ConfType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{1}
}

// DRM类型
type DrmTechType int32

const (
	DrmTechType_UNKNOWN_DRM DrmTechType = 0
	DrmTechType_FAIR_PLAY   DrmTechType = 1
	DrmTechType_WIDE_VINE   DrmTechType = 2
	// 哔哩哔哩自研DRM
	DrmTechType_BILI_DRM DrmTechType = 3
)

// Enum value maps for DrmTechType.
var (
	DrmTechType_name = map[int32]string{
		0: "UNKNOWN_DRM",
		1: "FAIR_PLAY",
		2: "WIDE_VINE",
		3: "BILI_DRM",
	}
	DrmTechType_value = map[string]int32{
		"UNKNOWN_DRM": 0,
		"FAIR_PLAY":   1,
		"WIDE_VINE":   2,
		"BILI_DRM":    3,
	}
)

func (x DrmTechType) Enum() *DrmTechType {
	p := new(DrmTechType)
	*p = x
	return p
}

func (x DrmTechType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmTechType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[2].Descriptor()
}

func (DrmTechType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[2]
}

func (x DrmTechType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrmTechType.Descriptor instead.
func (DrmTechType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{2}
}

// 错误码
type PlayErr int32

const (
	PlayErr_NoErr                   PlayErr = 0 //
	PlayErr_WithMultiDeviceLoginErr PlayErr = 1 // 管控类型的错误码
)

// Enum value maps for PlayErr.
var (
	PlayErr_name = map[int32]string{
		0: "NoErr",
		1: "WithMultiDeviceLoginErr",
	}
	PlayErr_value = map[string]int32{
		"NoErr":                   0,
		"WithMultiDeviceLoginErr": 1,
	}
)

func (x PlayErr) Enum() *PlayErr {
	p := new(PlayErr)
	*p = x
	return p
}

func (x PlayErr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayErr) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[3].Descriptor()
}

func (PlayErr) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[3]
}

func (x PlayErr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayErr.Descriptor instead.
func (PlayErr) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{3}
}

type UnsupportScene int32

const (
	UnsupportScene_UNKNOWN_SCENE UnsupportScene = 0
	UnsupportScene_PREMIERE      UnsupportScene = 1
)

// Enum value maps for UnsupportScene.
var (
	UnsupportScene_name = map[int32]string{
		0: "UNKNOWN_SCENE",
		1: "PREMIERE",
	}
	UnsupportScene_value = map[string]int32{
		"UNKNOWN_SCENE": 0,
		"PREMIERE":      1,
	}
)

func (x UnsupportScene) Enum() *UnsupportScene {
	p := new(UnsupportScene)
	*p = x
	return p
}

func (x UnsupportScene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnsupportScene) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[4].Descriptor()
}

func (UnsupportScene) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[4]
}

func (x UnsupportScene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnsupportScene.Descriptor instead.
func (UnsupportScene) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{4}
}

// 视频类型
type VideoType int32

const (
	VideoType_UNKNOWN VideoType = 0
	// 用户生成内容
	VideoType_UGC VideoType = 1
	// 专业生产内容
	VideoType_PGC VideoType = 2
)

// Enum value maps for VideoType.
var (
	VideoType_name = map[int32]string{
		0: "UNKNOWN",
		1: "UGC",
		2: "PGC",
	}
	VideoType_value = map[string]int32{
		"UNKNOWN": 0,
		"UGC":     1,
		"PGC":     2,
	}
)

func (x VideoType) Enum() *VideoType {
	p := new(VideoType)
	*p = x
	return p
}

func (x VideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[5].Descriptor()
}

func (VideoType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[5]
}

func (x VideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoType.Descriptor instead.
func (VideoType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{5}
}

type Scheme_ActionType int32

const (
	Scheme_UNKNOWN    Scheme_ActionType = 0
	Scheme_SHOW_TOAST Scheme_ActionType = 1
)

// Enum value maps for Scheme_ActionType.
var (
	Scheme_ActionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SHOW_TOAST",
	}
	Scheme_ActionType_value = map[string]int32{
		"UNKNOWN":    0,
		"SHOW_TOAST": 1,
	}
)

func (x Scheme_ActionType) Enum() *Scheme_ActionType {
	p := new(Scheme_ActionType)
	*p = x
	return p
}

func (x Scheme_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scheme_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[6].Descriptor()
}

func (Scheme_ActionType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[6]
}

func (x Scheme_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scheme_ActionType.Descriptor instead.
func (Scheme_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{6, 0}
}

// 杜比类型
type DolbyItem_Type int32

const (
	DolbyItem_NONE   DolbyItem_Type = 0 // NONE
	DolbyItem_COMMON DolbyItem_Type = 1 // 普通杜比音效
	DolbyItem_ATMOS  DolbyItem_Type = 2 // 全景杜比音效
)

// Enum value maps for DolbyItem_Type.
var (
	DolbyItem_Type_name = map[int32]string{
		0: "NONE",
		1: "COMMON",
		2: "ATMOS",
	}
	DolbyItem_Type_value = map[string]int32{
		"NONE":   0,
		"COMMON": 1,
		"ATMOS":  2,
	}
)

func (x DolbyItem_Type) Enum() *DolbyItem_Type {
	p := new(DolbyItem_Type)
	*p = x
	return p
}

func (x DolbyItem_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DolbyItem_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[7].Descriptor()
}

func (DolbyItem_Type) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[7]
}

func (x DolbyItem_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DolbyItem_Type.Descriptor instead.
func (DolbyItem_Type) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{17, 0}
}

type ArcConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSupport      bool          `protobuf:"varint,1,opt,name=is_support,json=isSupport,proto3" json:"is_support,omitempty"`
	Disable        bool          `protobuf:"varint,2,opt,name=disable,proto3" json:"disable,omitempty"`
	ExtraConnent   *ExtraContent `protobuf:"bytes,3,opt,name=extra_connent,json=extraConnent,proto3" json:"extra_connent,omitempty"`
	UnsupportScene []int32       `protobuf:"varint,4,rep,packed,name=unsupport_scene,json=unsupportScene,proto3" json:"unsupport_scene,omitempty"`
}

func (x *ArcConf) Reset() {
	*x = ArcConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArcConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArcConf) ProtoMessage() {}

func (x *ArcConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArcConf.ProtoReflect.Descriptor instead.
func (*ArcConf) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{0}
}

func (x *ArcConf) GetIsSupport() bool {
	if x != nil {
		return x.IsSupport
	}
	return false
}

func (x *ArcConf) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *ArcConf) GetExtraConnent() *ExtraContent {
	if x != nil {
		return x.ExtraConnent
	}
	return nil
}

func (x *ArcConf) GetUnsupportScene() []int32 {
	if x != nil {
		return x.UnsupportScene
	}
	return nil
}

type ConfValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ConfValue_SwitchVal
	//	*ConfValue_SelectedVal
	Value isConfValue_Value `protobuf_oneof:"value"`
}

func (x *ConfValue) Reset() {
	*x = ConfValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfValue) ProtoMessage() {}

func (x *ConfValue) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfValue.ProtoReflect.Descriptor instead.
func (*ConfValue) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{1}
}

func (m *ConfValue) GetValue() isConfValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConfValue) GetSwitchVal() int32 {
	if x, ok := x.GetValue().(*ConfValue_SwitchVal); ok {
		return x.SwitchVal
	}
	return 0
}

func (x *ConfValue) GetSelectedVal() int32 {
	if x, ok := x.GetValue().(*ConfValue_SelectedVal); ok {
		return x.SelectedVal
	}
	return 0
}

type isConfValue_Value interface {
	isConfValue_Value()
}

type ConfValue_SwitchVal struct {
	// dash流
	SwitchVal int32 `protobuf:"varint,1,opt,name=switch_val,json=switchVal,proto3,oneof"`
}

type ConfValue_SelectedVal struct {
	// 分段流
	SelectedVal int32 `protobuf:"varint,2,opt,name=selected_val,json=selectedVal,proto3,oneof"`
}

func (*ConfValue_SwitchVal) isConfValue_Value() {}

func (*ConfValue_SelectedVal) isConfValue_Value() {}

type DeviceConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfValue *ConfValue `protobuf:"bytes,1,opt,name=conf_value,json=confValue,proto3" json:"conf_value,omitempty"`
}

func (x *DeviceConf) Reset() {
	*x = DeviceConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConf) ProtoMessage() {}

func (x *DeviceConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConf.ProtoReflect.Descriptor instead.
func (*DeviceConf) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceConf) GetConfValue() *ConfValue {
	if x != nil {
		return x.ConfValue
	}
	return nil
}

// ? 错误码补充信息
type ExtraContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableReason string `protobuf:"bytes,1,opt,name=disable_reason,json=disableReason,proto3" json:"disable_reason,omitempty"`
	DisableCode   uint64 `protobuf:"varint,2,opt,name=disable_code,json=disableCode,proto3" json:"disable_code,omitempty"`
}

func (x *ExtraContent) Reset() {
	*x = ExtraContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraContent) ProtoMessage() {}

func (x *ExtraContent) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraContent.ProtoReflect.Descriptor instead.
func (*ExtraContent) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{3}
}

func (x *ExtraContent) GetDisableReason() string {
	if x != nil {
		return x.DisableReason
	}
	return ""
}

func (x *ExtraContent) GetDisableCode() uint64 {
	if x != nil {
		return x.DisableCode
	}
	return 0
}

// 播放历史
type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 播放进度
	Progress    uint64 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	Toast       string `protobuf:"bytes,2,opt,name=toast,proto3" json:"toast,omitempty"`
	LastPlayCid uint64 `protobuf:"varint,3,opt,name=last_play_cid,json=lastPlayCid,proto3" json:"last_play_cid,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{4}
}

func (x *History) GetProgress() uint64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *History) GetToast() string {
	if x != nil {
		return x.Toast
	}
	return ""
}

func (x *History) GetLastPlayCid() uint64 {
	if x != nil {
		return x.LastPlayCid
	}
	return 0
}

type PlayDeviceConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArcConfs map[int32]*DeviceConf `protobuf:"bytes,1,rep,name=arc_confs,json=arcConfs,proto3" json:"arc_confs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayDeviceConf) Reset() {
	*x = PlayDeviceConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayDeviceConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayDeviceConf) ProtoMessage() {}

func (x *PlayDeviceConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayDeviceConf.ProtoReflect.Descriptor instead.
func (*PlayDeviceConf) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{5}
}

func (x *PlayDeviceConf) GetArcConfs() map[int32]*DeviceConf {
	if x != nil {
		return x.ArcConfs
	}
	return nil
}

// 方案
type Scheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType Scheme_ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=bilibili.playershared.Scheme_ActionType" json:"action_type,omitempty"`
	Toast      string            `protobuf:"bytes,2,opt,name=toast,proto3" json:"toast,omitempty"`
}

func (x *Scheme) Reset() {
	*x = Scheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheme) ProtoMessage() {}

func (x *Scheme) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheme.ProtoReflect.Descriptor instead.
func (*Scheme) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{6}
}

func (x *Scheme) GetActionType() Scheme_ActionType {
	if x != nil {
		return x.ActionType
	}
	return Scheme_UNKNOWN
}

func (x *Scheme) GetToast() string {
	if x != nil {
		return x.Toast
	}
	return ""
}

// 视频流信息
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 元数据
	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=stream_info,json=streamInfo,proto3" json:"stream_info,omitempty"`
	// 流数据
	//
	// Types that are assignable to Content:
	//
	//	*Stream_DashVideo
	//	*Stream_SegmentVideo
	Content isStream_Content `protobuf_oneof:"content"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{7}
}

func (x *Stream) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (m *Stream) GetContent() isStream_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Stream) GetDashVideo() *DashVideo {
	if x, ok := x.GetContent().(*Stream_DashVideo); ok {
		return x.DashVideo
	}
	return nil
}

func (x *Stream) GetSegmentVideo() *SegmentVideo {
	if x, ok := x.GetContent().(*Stream_SegmentVideo); ok {
		return x.SegmentVideo
	}
	return nil
}

type isStream_Content interface {
	isStream_Content()
}

type Stream_DashVideo struct {
	// dash流
	DashVideo *DashVideo `protobuf:"bytes,2,opt,name=dash_video,json=dashVideo,proto3,oneof"`
}

type Stream_SegmentVideo struct {
	// 分段流
	SegmentVideo *SegmentVideo `protobuf:"bytes,3,opt,name=segment_video,json=segmentVideo,proto3,oneof"`
}

func (*Stream_DashVideo) isStream_Content() {}

func (*Stream_SegmentVideo) isStream_Content() {}

// 视频流信息: 元数据
type StreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清晰度
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 格式描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 错误码
	ErrCode uint32 `protobuf:"varint,4,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	// 不满足条件信息
	Limit *StreamLimit `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// 是否需要vip
	NeedVip bool `protobuf:"varint,6,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`
	// 是否需要登录
	NeedLogin bool `protobuf:"varint,7,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	// 是否完整
	Intact bool `protobuf:"varint,8,opt,name=intact,proto3" json:"intact,omitempty"`
	// 是否非全二压
	NoRexcode bool `protobuf:"varint,9,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	// 清晰度属性位
	Attribute int64 `protobuf:"varint,10,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// 新版格式描述
	NewDescription string `protobuf:"bytes,11,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
	// 格式文字
	DisplayDesc string `protobuf:"bytes,12,opt,name=display_desc,json=displayDesc,proto3" json:"display_desc,omitempty"`
	// 新版格式描述备注
	Superscript string `protobuf:"bytes,13,opt,name=superscript,proto3" json:"superscript,omitempty"`
	VipFree     bool   `protobuf:"varint,14,opt,name=vip_free,json=vipFree,proto3" json:"vip_free,omitempty"`
	Subtitle    string `protobuf:"bytes,15,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 方案
	Scheme *Scheme `protobuf:"bytes,16,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// 支持drm
	SupportDrm bool `protobuf:"varint,17,opt,name=support_drm,json=supportDrm,proto3" json:"support_drm,omitempty"`
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{8}
}

func (x *StreamInfo) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *StreamInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *StreamInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StreamInfo) GetErrCode() uint32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *StreamInfo) GetLimit() *StreamLimit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *StreamInfo) GetNeedVip() bool {
	if x != nil {
		return x.NeedVip
	}
	return false
}

func (x *StreamInfo) GetNeedLogin() bool {
	if x != nil {
		return x.NeedLogin
	}
	return false
}

func (x *StreamInfo) GetIntact() bool {
	if x != nil {
		return x.Intact
	}
	return false
}

func (x *StreamInfo) GetNoRexcode() bool {
	if x != nil {
		return x.NoRexcode
	}
	return false
}

func (x *StreamInfo) GetAttribute() int64 {
	if x != nil {
		return x.Attribute
	}
	return 0
}

func (x *StreamInfo) GetNewDescription() string {
	if x != nil {
		return x.NewDescription
	}
	return ""
}

func (x *StreamInfo) GetDisplayDesc() string {
	if x != nil {
		return x.DisplayDesc
	}
	return ""
}

func (x *StreamInfo) GetSuperscript() string {
	if x != nil {
		return x.Superscript
	}
	return ""
}

func (x *StreamInfo) GetVipFree() bool {
	if x != nil {
		return x.VipFree
	}
	return false
}

func (x *StreamInfo) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *StreamInfo) GetScheme() *Scheme {
	if x != nil {
		return x.Scheme
	}
	return nil
}

func (x *StreamInfo) GetSupportDrm() bool {
	if x != nil {
		return x.SupportDrm
	}
	return false
}

// Dash条目
type DashItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清晰度
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 主线流
	BaseUrl string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,3,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// 带宽
	Bandwidth uint32 `protobuf:"varint,4,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// 编码id
	Codecid uint32 `protobuf:"varint,5,opt,name=codecid,proto3" json:"codecid,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	// 大小
	Size uint64 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	// 帧率
	FrameRate string `protobuf:"bytes,8,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	// DRM密钥
	WidevinePssh string `protobuf:"bytes,9,opt,name=widevine_pssh,json=widevinePssh,proto3" json:"widevine_pssh,omitempty"`
}

func (x *DashItem) Reset() {
	*x = DashItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashItem) ProtoMessage() {}

func (x *DashItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashItem.ProtoReflect.Descriptor instead.
func (*DashItem) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{9}
}

func (x *DashItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DashItem) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *DashItem) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *DashItem) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *DashItem) GetCodecid() uint32 {
	if x != nil {
		return x.Codecid
	}
	return 0
}

func (x *DashItem) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *DashItem) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DashItem) GetFrameRate() string {
	if x != nil {
		return x.FrameRate
	}
	return ""
}

func (x *DashItem) GetWidevinePssh() string {
	if x != nil {
		return x.WidevinePssh
	}
	return ""
}

// 视频流信息: dash流
type DashVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主线流
	BaseUrl string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,2,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// 带宽
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// 编码id
	Codecid uint32 `protobuf:"varint,4,opt,name=codecid,proto3" json:"codecid,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,5,opt,name=md5,proto3" json:"md5,omitempty"`
	// 大小
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// 伴音质量id
	AudioId uint32 `protobuf:"varint,7,opt,name=audio_id,json=audioId,proto3" json:"audio_id,omitempty"`
	// 是否非全二压
	NoRexcode bool `protobuf:"varint,8,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	// 帧率
	FrameRate string `protobuf:"bytes,9,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	// 宽
	Width int32 `protobuf:"varint,10,opt,name=width,proto3" json:"width,omitempty"`
	// 高
	Height int32 `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	// DRM密钥
	WidevinePssh string `protobuf:"bytes,12,opt,name=widevine_pssh,json=widevinePssh,proto3" json:"widevine_pssh,omitempty"`
}

func (x *DashVideo) Reset() {
	*x = DashVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashVideo) ProtoMessage() {}

func (x *DashVideo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashVideo.ProtoReflect.Descriptor instead.
func (*DashVideo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{10}
}

func (x *DashVideo) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *DashVideo) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *DashVideo) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *DashVideo) GetCodecid() uint32 {
	if x != nil {
		return x.Codecid
	}
	return 0
}

func (x *DashVideo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *DashVideo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DashVideo) GetAudioId() uint32 {
	if x != nil {
		return x.AudioId
	}
	return 0
}

func (x *DashVideo) GetNoRexcode() bool {
	if x != nil {
		return x.NoRexcode
	}
	return false
}

func (x *DashVideo) GetFrameRate() string {
	if x != nil {
		return x.FrameRate
	}
	return ""
}

func (x *DashVideo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DashVideo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DashVideo) GetWidevinePssh() string {
	if x != nil {
		return x.WidevinePssh
	}
	return ""
}

// 视频流信息: 分段流
type SegmentVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment []*ResponseUrl `protobuf:"bytes,1,rep,name=segment,proto3" json:"segment,omitempty"`
}

func (x *SegmentVideo) Reset() {
	*x = SegmentVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentVideo) ProtoMessage() {}

func (x *SegmentVideo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentVideo.ProtoReflect.Descriptor instead.
func (*SegmentVideo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{11}
}

func (x *SegmentVideo) GetSegment() []*ResponseUrl {
	if x != nil {
		return x.Segment
	}
	return nil
}

// 分段流条目
type ResponseUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分段序号
	Order uint32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	// 分段时长
	Length uint64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// 分段大小
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// 主线流
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,5,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
}

func (x *ResponseUrl) Reset() {
	*x = ResponseUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUrl) ProtoMessage() {}

func (x *ResponseUrl) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUrl.ProtoReflect.Descriptor instead.
func (*ResponseUrl) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{12}
}

func (x *ResponseUrl) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ResponseUrl) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ResponseUrl) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ResponseUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ResponseUrl) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *ResponseUrl) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

// Dash Response, 未使用
type ResponseDash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video []*DashItem `protobuf:"bytes,1,rep,name=video,proto3" json:"video,omitempty"`
	Audio []*DashItem `protobuf:"bytes,2,rep,name=audio,proto3" json:"audio,omitempty"`
}

func (x *ResponseDash) Reset() {
	*x = ResponseDash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDash) ProtoMessage() {}

func (x *ResponseDash) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDash.ProtoReflect.Descriptor instead.
func (*ResponseDash) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseDash) GetVideo() []*DashItem {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *ResponseDash) GetAudio() []*DashItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

// 视频流信息: 流媒体元数据: 清晰度不满足条件信息
type StreamLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 提示信息
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StreamLimit) Reset() {
	*x = StreamLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLimit) ProtoMessage() {}

func (x *StreamLimit) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLimit.ProtoReflect.Descriptor instead.
func (*StreamLimit) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{14}
}

func (x *StreamLimit) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StreamLimit) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *StreamLimit) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 播放页信息-请求: 音视频VOD
type VideoVod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频aid
	Aid int32 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// 视频cid
	Cid int32 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// 清晰度
	Qn uint64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	// 视频流版本
	Fnver int32 `protobuf:"varint,4,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 视频流格式
	Fnval int32 `protobuf:"varint,5,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 下载模式
	// 0:播放 1:flv下载 2:dash下载
	Download uint32 `protobuf:"varint,6,opt,name=download,proto3" json:"download,omitempty"`
	// 流url强制是用域名
	// 0:允许使用ip 1:使用http 2:使用https
	ForceHost int32 `protobuf:"varint,7,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否4K
	Fourk bool `protobuf:"varint,8,opt,name=fourk,proto3" json:"fourk,omitempty"`
	// 视频编码
	PreferCodecType CodeType `protobuf:"varint,9,opt,name=prefer_codec_type,json=preferCodecType,proto3,enum=bilibili.playershared.CodeType" json:"prefer_codec_type,omitempty"`
	// 响度均衡
	VoiceBalance uint64 `protobuf:"varint,10,opt,name=voice_balance,json=voiceBalance,proto3" json:"voice_balance,omitempty"`
}

func (x *VideoVod) Reset() {
	*x = VideoVod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoVod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoVod) ProtoMessage() {}

func (x *VideoVod) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoVod.ProtoReflect.Descriptor instead.
func (*VideoVod) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{15}
}

func (x *VideoVod) GetAid() int32 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *VideoVod) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *VideoVod) GetQn() uint64 {
	if x != nil {
		return x.Qn
	}
	return 0
}

func (x *VideoVod) GetFnver() int32 {
	if x != nil {
		return x.Fnver
	}
	return 0
}

func (x *VideoVod) GetFnval() int32 {
	if x != nil {
		return x.Fnval
	}
	return 0
}

func (x *VideoVod) GetDownload() uint32 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *VideoVod) GetForceHost() int32 {
	if x != nil {
		return x.ForceHost
	}
	return 0
}

func (x *VideoVod) GetFourk() bool {
	if x != nil {
		return x.Fourk
	}
	return false
}

func (x *VideoVod) GetPreferCodecType() CodeType {
	if x != nil {
		return x.PreferCodecType
	}
	return CodeType_NOCODE
}

func (x *VideoVod) GetVoiceBalance() uint64 {
	if x != nil {
		return x.VoiceBalance
	}
	return 0
}

// 播放页信息-响应: VOD音视频信息
type VodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频清晰度
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 视频格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 视频时长
	Timelength uint64 `protobuf:"varint,3,opt,name=timelength,proto3" json:"timelength,omitempty"`
	// 视频编码id
	VideoCodecid uint32 `protobuf:"varint,4,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid,omitempty"`
	// 视频流
	StreamList []*Stream `protobuf:"bytes,5,rep,name=stream_list,json=streamList,proto3" json:"stream_list,omitempty"`
	// 伴音流
	DashAudio []*DashItem `protobuf:"bytes,6,rep,name=dash_audio,json=dashAudio,proto3" json:"dash_audio,omitempty"`
	// 杜比伴音流
	Dolby *DolbyItem `protobuf:"bytes,7,opt,name=dolby,proto3" json:"dolby,omitempty"`
	// 响度均衡操作信息
	Volume *VolumeInfo `protobuf:"bytes,8,opt,name=volume,proto3" json:"volume,omitempty"`
	// HIRES伴音流信息
	LossLessItem *LossLessItem `protobuf:"bytes,9,opt,name=loss_less_item,json=lossLessItem,proto3" json:"loss_less_item,omitempty"`
}

func (x *VodInfo) Reset() {
	*x = VodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodInfo) ProtoMessage() {}

func (x *VodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodInfo.ProtoReflect.Descriptor instead.
func (*VodInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{16}
}

func (x *VodInfo) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *VodInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodInfo) GetTimelength() uint64 {
	if x != nil {
		return x.Timelength
	}
	return 0
}

func (x *VodInfo) GetVideoCodecid() uint32 {
	if x != nil {
		return x.VideoCodecid
	}
	return 0
}

func (x *VodInfo) GetStreamList() []*Stream {
	if x != nil {
		return x.StreamList
	}
	return nil
}

func (x *VodInfo) GetDashAudio() []*DashItem {
	if x != nil {
		return x.DashAudio
	}
	return nil
}

func (x *VodInfo) GetDolby() *DolbyItem {
	if x != nil {
		return x.Dolby
	}
	return nil
}

func (x *VodInfo) GetVolume() *VolumeInfo {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *VodInfo) GetLossLessItem() *LossLessItem {
	if x != nil {
		return x.LossLessItem
	}
	return nil
}

// 杜比伴音流信息
type DolbyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 杜比类型
	Type DolbyItem_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bilibili.playershared.DolbyItem_Type" json:"type,omitempty"`
	// 音频流
	Audio *DashItem `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *DolbyItem) Reset() {
	*x = DolbyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DolbyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DolbyItem) ProtoMessage() {}

func (x *DolbyItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DolbyItem.ProtoReflect.Descriptor instead.
func (*DolbyItem) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{17}
}

func (x *DolbyItem) GetType() DolbyItem_Type {
	if x != nil {
		return x.Type
	}
	return DolbyItem_NONE
}

func (x *DolbyItem) GetAudio() *DashItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

// HIRES伴音流信息
type LossLessItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否为hires
	IsLosslessAudio bool `protobuf:"varint,1,opt,name=is_lossless_audio,json=isLosslessAudio,proto3" json:"is_lossless_audio,omitempty"`
	// 音频流信息
	Audio *DashItem `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	// 是否需要大会员
	NeedVip bool `protobuf:"varint,3,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`
}

func (x *LossLessItem) Reset() {
	*x = LossLessItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LossLessItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LossLessItem) ProtoMessage() {}

func (x *LossLessItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LossLessItem.ProtoReflect.Descriptor instead.
func (*LossLessItem) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{18}
}

func (x *LossLessItem) GetIsLosslessAudio() bool {
	if x != nil {
		return x.IsLosslessAudio
	}
	return false
}

func (x *LossLessItem) GetAudio() *DashItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *LossLessItem) GetNeedVip() bool {
	if x != nil {
		return x.NeedVip
	}
	return false
}

// 响度均衡操作信息
type VolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Measured integrated loudness 实际综合响度
	MeasuredI float64 `protobuf:"fixed64,1,opt,name=measured_i,json=measuredI,proto3" json:"measured_i,omitempty"`
	// Measured loudness range 实际响度范围
	MeasuredLra float64 `protobuf:"fixed64,2,opt,name=measured_lra,json=measuredLra,proto3" json:"measured_lra,omitempty"`
	// Measured true peak 实际响度真峰值
	MeasuredTp float64 `protobuf:"fixed64,3,opt,name=measured_tp,json=measuredTp,proto3" json:"measured_tp,omitempty"`
	// Measured threshold 实际响度阈值
	MeasuredThreshold float64 `protobuf:"fixed64,4,opt,name=measured_threshold,json=measuredThreshold,proto3" json:"measured_threshold,omitempty"`
	// Target offset gain(Gain is applied before the true-peak limiter) 目标增益Offset(增益在真实峰值限制器之前应用)
	TargetOffset float64 `protobuf:"fixed64,5,opt,name=target_offset,json=targetOffset,proto3" json:"target_offset,omitempty"`
	// Target integrated loudness 目标综合响度
	TargetI float64 `protobuf:"fixed64,6,opt,name=target_i,json=targetI,proto3" json:"target_i,omitempty"`
	// Target true peak 目标响度真峰值
	TargetTp float64 `protobuf:"fixed64,7,opt,name=target_tp,json=targetTp,proto3" json:"target_tp,omitempty"`
}

func (x *VolumeInfo) Reset() {
	*x = VolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfo) ProtoMessage() {}

func (x *VolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfo.ProtoReflect.Descriptor instead.
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{19}
}

func (x *VolumeInfo) GetMeasuredI() float64 {
	if x != nil {
		return x.MeasuredI
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredLra() float64 {
	if x != nil {
		return x.MeasuredLra
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredTp() float64 {
	if x != nil {
		return x.MeasuredTp
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredThreshold() float64 {
	if x != nil {
		return x.MeasuredThreshold
	}
	return 0
}

func (x *VolumeInfo) GetTargetOffset() float64 {
	if x != nil {
		return x.TargetOffset
	}
	return 0
}

func (x *VolumeInfo) GetTargetI() float64 {
	if x != nil {
		return x.TargetI
	}
	return 0
}

func (x *VolumeInfo) GetTargetTp() float64 {
	if x != nil {
		return x.TargetTp
	}
	return 0
}

type PlayArc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoType   VideoType   `protobuf:"varint,1,opt,name=video_type,json=videoType,proto3,enum=bilibili.playershared.VideoType" json:"video_type,omitempty"`
	Aid         uint64      `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	Cid         uint64      `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	DrmTechType DrmTechType `protobuf:"varint,4,opt,name=drm_tech_type,json=drmTechType,proto3,enum=bilibili.playershared.DrmTechType" json:"drm_tech_type,omitempty"`
}

func (x *PlayArc) Reset() {
	*x = PlayArc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayArc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayArc) ProtoMessage() {}

func (x *PlayArc) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayArc.ProtoReflect.Descriptor instead.
func (*PlayArc) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{20}
}

func (x *PlayArc) GetVideoType() VideoType {
	if x != nil {
		return x.VideoType
	}
	return VideoType_UNKNOWN
}

func (x *PlayArc) GetAid() uint64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *PlayArc) GetCid() uint64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *PlayArc) GetDrmTechType() DrmTechType {
	if x != nil {
		return x.DrmTechType
	}
	return DrmTechType_UNKNOWN_DRM
}

// 播放页信息-响应: PlayArcConf
type PlayArcConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArcConfs map[int32]*PlayArc `protobuf:"bytes,1,rep,name=arc_confs,json=arcConfs,proto3" json:"arc_confs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayArcConf) Reset() {
	*x = PlayArcConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayArcConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayArcConf) ProtoMessage() {}

func (x *PlayArcConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayArcConf.ProtoReflect.Descriptor instead.
func (*PlayArcConf) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{21}
}

func (x *PlayArcConf) GetArcConfs() map[int32]*PlayArc {
	if x != nil {
		return x.ArcConfs
	}
	return nil
}

// 高画质试看信息: 按钮
type QnTrialButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *QnTrialButton) Reset() {
	*x = QnTrialButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QnTrialButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QnTrialButton) ProtoMessage() {}

func (x *QnTrialButton) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QnTrialButton.ProtoReflect.Descriptor instead.
func (*QnTrialButton) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{22}
}

func (x *QnTrialButton) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *QnTrialButton) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// 播放页信息-响应: 高画质试看信息
type QnTrialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 能否试看高画质
	TrialAble         bool           `protobuf:"varint,1,opt,name=trial_able,json=trialAble,proto3" json:"trial_able,omitempty"`
	RemainingTimes    int32          `protobuf:"varint,2,opt,name=remaining_times,json=remainingTimes,proto3" json:"remaining_times,omitempty"`
	Start             int32          `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	TimeLength        int32          `protobuf:"varint,4,opt,name=time_length,json=timeLength,proto3" json:"time_length,omitempty"`
	StartToast        *QnTrialToast  `protobuf:"bytes,5,opt,name=start_toast,json=startToast,proto3" json:"start_toast,omitempty"`
	EndToast          *QnTrialToast  `protobuf:"bytes,6,opt,name=end_toast,json=endToast,proto3" json:"end_toast,omitempty"`
	QualityOpenTipBtn *QnTrialButton `protobuf:"bytes,8,opt,name=quality_open_tip_btn,json=qualityOpenTipBtn,proto3" json:"quality_open_tip_btn,omitempty"`
}

func (x *QnTrialInfo) Reset() {
	*x = QnTrialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QnTrialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QnTrialInfo) ProtoMessage() {}

func (x *QnTrialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QnTrialInfo.ProtoReflect.Descriptor instead.
func (*QnTrialInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{23}
}

func (x *QnTrialInfo) GetTrialAble() bool {
	if x != nil {
		return x.TrialAble
	}
	return false
}

func (x *QnTrialInfo) GetRemainingTimes() int32 {
	if x != nil {
		return x.RemainingTimes
	}
	return 0
}

func (x *QnTrialInfo) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *QnTrialInfo) GetTimeLength() int32 {
	if x != nil {
		return x.TimeLength
	}
	return 0
}

func (x *QnTrialInfo) GetStartToast() *QnTrialToast {
	if x != nil {
		return x.StartToast
	}
	return nil
}

func (x *QnTrialInfo) GetEndToast() *QnTrialToast {
	if x != nil {
		return x.EndToast
	}
	return nil
}

func (x *QnTrialInfo) GetQualityOpenTipBtn() *QnTrialButton {
	if x != nil {
		return x.QualityOpenTipBtn
	}
	return nil
}

// 高画质试看信息: Toast信息
type QnTrialToast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toast文案 老字段
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// toast按钮
	Button *QnTrialButton `protobuf:"bytes,2,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *QnTrialToast) Reset() {
	*x = QnTrialToast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QnTrialToast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QnTrialToast) ProtoMessage() {}

func (x *QnTrialToast) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QnTrialToast.ProtoReflect.Descriptor instead.
func (*QnTrialToast) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{24}
}

func (x *QnTrialToast) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *QnTrialToast) GetButton() *QnTrialButton {
	if x != nil {
		return x.Button
	}
	return nil
}

// 事件
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 震动
	Shake *Shake `protobuf:"bytes,1,opt,name=shake,proto3" json:"shake,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{25}
}

func (x *Event) GetShake() *Shake {
	if x != nil {
		return x.Shake
	}
	return nil
}

// 震动
type Shake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Shake) Reset() {
	*x = Shake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shake) ProtoMessage() {}

func (x *Shake) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shake.ProtoReflect.Descriptor instead.
func (*Shake) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{26}
}

func (x *Shake) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

var File_bilibili_playershared_playershared_proto protoreflect.FileDescriptor

var file_bilibili_playershared_playershared_proto_rawDesc = []byte{
	0x0a, 0x28, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x22, 0xb5, 0x01, 0x0a, 0x07, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x5a, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5f,
	0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x69, 0x64, 0x22,
	0xc2, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x72, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x72, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x73, 0x1a, 0x5e, 0x0a, 0x0d, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74,
	0x22, 0x29, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x48, 0x4f, 0x57, 0x5f, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0a, 0x64, 0x61,
	0x73, 0x68, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x4a, 0x0a,
	0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x04, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6e, 0x65, 0x65, 0x64, 0x56, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x78, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x78, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x70,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x70,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x72, 0x6d, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x73, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73, 0x73,
	0x68, 0x22, 0xcf, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x78, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x78, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x73, 0x73, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50,
	0x73, 0x73, 0x68, 0x22, 0x4c, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0x7c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x35, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x22, 0x47, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xad, 0x02,
	0x0a, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x71, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x71, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66,
	0x6e, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x72, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x72, 0x6b, 0x12, 0x4b, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xbe, 0x03,
	0x0a, 0x07, 0x56, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x12, 0x36, 0x0a, 0x05, 0x64, 0x6f, 0x6c, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x6f, 0x6c, 0x62, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x64, 0x6f, 0x6c, 0x62, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x73, 0x4c, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xa6,
	0x01, 0x0a, 0x09, 0x44, 0x6f, 0x6c, 0x62, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x44, 0x6f, 0x6c, 0x62, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x27,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x54, 0x4d, 0x4f, 0x53, 0x10, 0x02, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x73, 0x73,
	0x4c, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e,
	0x65, 0x65, 0x64, 0x56, 0x69, 0x70, 0x22, 0xfb, 0x01, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x64, 0x49, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x64, 0x4c, 0x72, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x54, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x70, 0x22, 0xb6, 0x01, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x12, 0x3f, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x61, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x72, 0x6d, 0x5f, 0x74, 0x65, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x6d, 0x54, 0x65, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x64, 0x72, 0x6d, 0x54, 0x65, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4d, 0x0a,
	0x09, 0x61, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x61, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x1a, 0x5b, 0x0a, 0x0d,
	0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x0d, 0x51, 0x6e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x22, 0xeb, 0x02, 0x0a, 0x0b, 0x51, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x62, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51,
	0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x6f, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x51, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x62, 0x74,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x51, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x11, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x70, 0x42, 0x74, 0x6e,
	0x22, 0x60, 0x0a, 0x0c, 0x51, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x61, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x6e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x22,
	0x1b, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x2a, 0x3d, 0x0a, 0x08,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45, 0x32, 0x36, 0x34, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45, 0x32, 0x36, 0x35, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45, 0x41, 0x56, 0x31, 0x10, 0x03, 0x2a, 0x9a, 0x04, 0x0a, 0x08,
	0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4c, 0x49, 0x50, 0x43, 0x4f, 0x4e, 0x46,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x53, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x55, 0x42, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x52, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x49, 0x4d, 0x45, 0x55, 0x50, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c,
	0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x43, 0x41, 0x4c, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x09, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53,
	0x4c, 0x49, 0x4b, 0x45, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x0c,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x4c, 0x45, 0x43, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x53,
	0x48, 0x4f, 0x54, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x43, 0x52,
	0x45, 0x45, 0x4e, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x58, 0x54, 0x10,
	0x15, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x44, 0x4d, 0x10, 0x16, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x17, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x44, 0x4d, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x44,
	0x4d, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x4e, 0x4f, 0x52, 0x41, 0x4d, 0x41, 0x10,
	0x1b, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x4f, 0x4c, 0x42, 0x59, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x1d, 0x12, 0x0c, 0x0a,
	0x08, 0x4c, 0x4f, 0x53, 0x53, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x52, 0x45, 0x59, 0x41, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x52, 0x45, 0x59, 0x41, 0x46, 0x55, 0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x20, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x4b, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x44, 0x10, 0x21, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x22, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x55, 0x42, 0x42, 0x49, 0x4e, 0x47, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x24, 0x2a, 0x4a, 0x0a, 0x0b, 0x44, 0x72, 0x6d, 0x54,
	0x65, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x44, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x49, 0x52,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x44, 0x45, 0x5f,
	0x56, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x4c, 0x49, 0x5f, 0x44,
	0x52, 0x4d, 0x10, 0x03, 0x2a, 0x31, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x69,
	0x74, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x0e, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x52, 0x45, 0x4d, 0x49, 0x45, 0x52, 0x45, 0x10, 0x01, 0x2a, 0x2a, 0x0a, 0x09, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x47, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x47, 0x43, 0x10, 0x02, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x58, 0x69, 0x61, 0x6f, 0x4d, 0x69, 0x6b, 0x75, 0x30, 0x31, 0x2f,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70,
	0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bilibili_playershared_playershared_proto_rawDescOnce sync.Once
	file_bilibili_playershared_playershared_proto_rawDescData = file_bilibili_playershared_playershared_proto_rawDesc
)

func file_bilibili_playershared_playershared_proto_rawDescGZIP() []byte {
	file_bilibili_playershared_playershared_proto_rawDescOnce.Do(func() {
		file_bilibili_playershared_playershared_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_playershared_playershared_proto_rawDescData)
	})
	return file_bilibili_playershared_playershared_proto_rawDescData
}

var file_bilibili_playershared_playershared_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_bilibili_playershared_playershared_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_bilibili_playershared_playershared_proto_goTypes = []interface{}{
	(CodeType)(0),          // 0: bilibili.playershared.CodeType
	(ConfType)(0),          // 1: bilibili.playershared.ConfType
	(DrmTechType)(0),       // 2: bilibili.playershared.DrmTechType
	(PlayErr)(0),           // 3: bilibili.playershared.PlayErr
	(UnsupportScene)(0),    // 4: bilibili.playershared.UnsupportScene
	(VideoType)(0),         // 5: bilibili.playershared.VideoType
	(Scheme_ActionType)(0), // 6: bilibili.playershared.Scheme.ActionType
	(DolbyItem_Type)(0),    // 7: bilibili.playershared.DolbyItem.Type
	(*ArcConf)(nil),        // 8: bilibili.playershared.ArcConf
	(*ConfValue)(nil),      // 9: bilibili.playershared.ConfValue
	(*DeviceConf)(nil),     // 10: bilibili.playershared.DeviceConf
	(*ExtraContent)(nil),   // 11: bilibili.playershared.ExtraContent
	(*History)(nil),        // 12: bilibili.playershared.History
	(*PlayDeviceConf)(nil), // 13: bilibili.playershared.PlayDeviceConf
	(*Scheme)(nil),         // 14: bilibili.playershared.Scheme
	(*Stream)(nil),         // 15: bilibili.playershared.Stream
	(*StreamInfo)(nil),     // 16: bilibili.playershared.StreamInfo
	(*DashItem)(nil),       // 17: bilibili.playershared.DashItem
	(*DashVideo)(nil),      // 18: bilibili.playershared.DashVideo
	(*SegmentVideo)(nil),   // 19: bilibili.playershared.SegmentVideo
	(*ResponseUrl)(nil),    // 20: bilibili.playershared.ResponseUrl
	(*ResponseDash)(nil),   // 21: bilibili.playershared.ResponseDash
	(*StreamLimit)(nil),    // 22: bilibili.playershared.StreamLimit
	(*VideoVod)(nil),       // 23: bilibili.playershared.VideoVod
	(*VodInfo)(nil),        // 24: bilibili.playershared.VodInfo
	(*DolbyItem)(nil),      // 25: bilibili.playershared.DolbyItem
	(*LossLessItem)(nil),   // 26: bilibili.playershared.LossLessItem
	(*VolumeInfo)(nil),     // 27: bilibili.playershared.VolumeInfo
	(*PlayArc)(nil),        // 28: bilibili.playershared.PlayArc
	(*PlayArcConf)(nil),    // 29: bilibili.playershared.PlayArcConf
	(*QnTrialButton)(nil),  // 30: bilibili.playershared.QnTrialButton
	(*QnTrialInfo)(nil),    // 31: bilibili.playershared.QnTrialInfo
	(*QnTrialToast)(nil),   // 32: bilibili.playershared.QnTrialToast
	(*Event)(nil),          // 33: bilibili.playershared.Event
	(*Shake)(nil),          // 34: bilibili.playershared.Shake
	nil,                    // 35: bilibili.playershared.PlayDeviceConf.ArcConfsEntry
	nil,                    // 36: bilibili.playershared.PlayArcConf.ArcConfsEntry
}
var file_bilibili_playershared_playershared_proto_depIdxs = []int32{
	11, // 0: bilibili.playershared.ArcConf.extra_connent:type_name -> bilibili.playershared.ExtraContent
	9,  // 1: bilibili.playershared.DeviceConf.conf_value:type_name -> bilibili.playershared.ConfValue
	35, // 2: bilibili.playershared.PlayDeviceConf.arc_confs:type_name -> bilibili.playershared.PlayDeviceConf.ArcConfsEntry
	6,  // 3: bilibili.playershared.Scheme.action_type:type_name -> bilibili.playershared.Scheme.ActionType
	16, // 4: bilibili.playershared.Stream.stream_info:type_name -> bilibili.playershared.StreamInfo
	18, // 5: bilibili.playershared.Stream.dash_video:type_name -> bilibili.playershared.DashVideo
	19, // 6: bilibili.playershared.Stream.segment_video:type_name -> bilibili.playershared.SegmentVideo
	22, // 7: bilibili.playershared.StreamInfo.limit:type_name -> bilibili.playershared.StreamLimit
	14, // 8: bilibili.playershared.StreamInfo.scheme:type_name -> bilibili.playershared.Scheme
	20, // 9: bilibili.playershared.SegmentVideo.segment:type_name -> bilibili.playershared.ResponseUrl
	17, // 10: bilibili.playershared.ResponseDash.video:type_name -> bilibili.playershared.DashItem
	17, // 11: bilibili.playershared.ResponseDash.audio:type_name -> bilibili.playershared.DashItem
	0,  // 12: bilibili.playershared.VideoVod.prefer_codec_type:type_name -> bilibili.playershared.CodeType
	15, // 13: bilibili.playershared.VodInfo.stream_list:type_name -> bilibili.playershared.Stream
	17, // 14: bilibili.playershared.VodInfo.dash_audio:type_name -> bilibili.playershared.DashItem
	25, // 15: bilibili.playershared.VodInfo.dolby:type_name -> bilibili.playershared.DolbyItem
	27, // 16: bilibili.playershared.VodInfo.volume:type_name -> bilibili.playershared.VolumeInfo
	26, // 17: bilibili.playershared.VodInfo.loss_less_item:type_name -> bilibili.playershared.LossLessItem
	7,  // 18: bilibili.playershared.DolbyItem.type:type_name -> bilibili.playershared.DolbyItem.Type
	17, // 19: bilibili.playershared.DolbyItem.audio:type_name -> bilibili.playershared.DashItem
	17, // 20: bilibili.playershared.LossLessItem.audio:type_name -> bilibili.playershared.DashItem
	5,  // 21: bilibili.playershared.PlayArc.video_type:type_name -> bilibili.playershared.VideoType
	2,  // 22: bilibili.playershared.PlayArc.drm_tech_type:type_name -> bilibili.playershared.DrmTechType
	36, // 23: bilibili.playershared.PlayArcConf.arc_confs:type_name -> bilibili.playershared.PlayArcConf.ArcConfsEntry
	32, // 24: bilibili.playershared.QnTrialInfo.start_toast:type_name -> bilibili.playershared.QnTrialToast
	32, // 25: bilibili.playershared.QnTrialInfo.end_toast:type_name -> bilibili.playershared.QnTrialToast
	30, // 26: bilibili.playershared.QnTrialInfo.quality_open_tip_btn:type_name -> bilibili.playershared.QnTrialButton
	30, // 27: bilibili.playershared.QnTrialToast.button:type_name -> bilibili.playershared.QnTrialButton
	34, // 28: bilibili.playershared.Event.shake:type_name -> bilibili.playershared.Shake
	10, // 29: bilibili.playershared.PlayDeviceConf.ArcConfsEntry.value:type_name -> bilibili.playershared.DeviceConf
	28, // 30: bilibili.playershared.PlayArcConf.ArcConfsEntry.value:type_name -> bilibili.playershared.PlayArc
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_bilibili_playershared_playershared_proto_init() }
func file_bilibili_playershared_playershared_proto_init() {
	if File_bilibili_playershared_playershared_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bilibili_playershared_playershared_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArcConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayDeviceConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoVod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DolbyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LossLessItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayArc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayArcConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QnTrialButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QnTrialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QnTrialToast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bilibili_playershared_playershared_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ConfValue_SwitchVal)(nil),
		(*ConfValue_SelectedVal)(nil),
	}
	file_bilibili_playershared_playershared_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Stream_DashVideo)(nil),
		(*Stream_SegmentVideo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_playershared_playershared_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bilibili_playershared_playershared_proto_goTypes,
		DependencyIndexes: file_bilibili_playershared_playershared_proto_depIdxs,
		EnumInfos:         file_bilibili_playershared_playershared_proto_enumTypes,
		MessageInfos:      file_bilibili_playershared_playershared_proto_msgTypes,
	}.Build()
	File_bilibili_playershared_playershared_proto = out.File
	file_bilibili_playershared_playershared_proto_rawDesc = nil
	file_bilibili_playershared_playershared_proto_goTypes = nil
	file_bilibili_playershared_playershared_proto_depIdxs = nil
}
