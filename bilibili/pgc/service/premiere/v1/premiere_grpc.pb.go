// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/pgc/service/premiere/v1/premiere.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Premiere_Status_FullMethodName = "/bilibili.pgc.service.premiere.v1.Premiere/Status"
)

// PremiereClient is the client API for Premiere service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PremiereClient interface {
	// 获取首播状态
	Status(ctx context.Context, in *PremiereStatusReq, opts ...grpc.CallOption) (*PremiereStatusReply, error)
}

type premiereClient struct {
	cc grpc.ClientConnInterface
}

func NewPremiereClient(cc grpc.ClientConnInterface) PremiereClient {
	return &premiereClient{cc}
}

func (c *premiereClient) Status(ctx context.Context, in *PremiereStatusReq, opts ...grpc.CallOption) (*PremiereStatusReply, error) {
	out := new(PremiereStatusReply)
	err := c.cc.Invoke(ctx, Premiere_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PremiereServer is the server API for Premiere service.
// All implementations must embed UnimplementedPremiereServer
// for forward compatibility
type PremiereServer interface {
	// 获取首播状态
	Status(context.Context, *PremiereStatusReq) (*PremiereStatusReply, error)
	mustEmbedUnimplementedPremiereServer()
}

// UnimplementedPremiereServer must be embedded to have forward compatible implementations.
type UnimplementedPremiereServer struct {
}

func (UnimplementedPremiereServer) Status(context.Context, *PremiereStatusReq) (*PremiereStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedPremiereServer) mustEmbedUnimplementedPremiereServer() {}

// UnsafePremiereServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PremiereServer will
// result in compilation errors.
type UnsafePremiereServer interface {
	mustEmbedUnimplementedPremiereServer()
}

func RegisterPremiereServer(s grpc.ServiceRegistrar, srv PremiereServer) {
	s.RegisterService(&Premiere_ServiceDesc, srv)
}

func _Premiere_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PremiereStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PremiereServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Premiere_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PremiereServer).Status(ctx, req.(*PremiereStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Premiere_ServiceDesc is the grpc.ServiceDesc for Premiere service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Premiere_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.pgc.service.premiere.v1.Premiere",
	HandlerType: (*PremiereServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Premiere_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/pgc/service/premiere/v1/premiere.proto",
}
