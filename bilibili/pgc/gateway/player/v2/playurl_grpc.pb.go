// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/pgc/gateway/player/v2/playurl.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlayURL_PlayView_FullMethodName      = "/bilibili.pgc.gateway.player.v2.PlayURL/PlayView"
	PlayURL_PlayViewComic_FullMethodName = "/bilibili.pgc.gateway.player.v2.PlayURL/PlayViewComic"
)

// PlayURLClient is the client API for PlayURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayURLClient interface {
	// 播放页信息
	PlayView(ctx context.Context, in *PlayViewReq, opts ...grpc.CallOption) (*PlayViewReply, error)
	PlayViewComic(ctx context.Context, in *PlayViewReq, opts ...grpc.CallOption) (*PlayViewReply, error)
}

type playURLClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayURLClient(cc grpc.ClientConnInterface) PlayURLClient {
	return &playURLClient{cc}
}

func (c *playURLClient) PlayView(ctx context.Context, in *PlayViewReq, opts ...grpc.CallOption) (*PlayViewReply, error) {
	out := new(PlayViewReply)
	err := c.cc.Invoke(ctx, PlayURL_PlayView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) PlayViewComic(ctx context.Context, in *PlayViewReq, opts ...grpc.CallOption) (*PlayViewReply, error) {
	out := new(PlayViewReply)
	err := c.cc.Invoke(ctx, PlayURL_PlayViewComic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayURLServer is the server API for PlayURL service.
// All implementations must embed UnimplementedPlayURLServer
// for forward compatibility
type PlayURLServer interface {
	// 播放页信息
	PlayView(context.Context, *PlayViewReq) (*PlayViewReply, error)
	PlayViewComic(context.Context, *PlayViewReq) (*PlayViewReply, error)
	mustEmbedUnimplementedPlayURLServer()
}

// UnimplementedPlayURLServer must be embedded to have forward compatible implementations.
type UnimplementedPlayURLServer struct {
}

func (UnimplementedPlayURLServer) PlayView(context.Context, *PlayViewReq) (*PlayViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayView not implemented")
}
func (UnimplementedPlayURLServer) PlayViewComic(context.Context, *PlayViewReq) (*PlayViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayViewComic not implemented")
}
func (UnimplementedPlayURLServer) mustEmbedUnimplementedPlayURLServer() {}

// UnsafePlayURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayURLServer will
// result in compilation errors.
type UnsafePlayURLServer interface {
	mustEmbedUnimplementedPlayURLServer()
}

func RegisterPlayURLServer(s grpc.ServiceRegistrar, srv PlayURLServer) {
	s.RegisterService(&PlayURL_ServiceDesc, srv)
}

func _PlayURL_PlayView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).PlayView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayURL_PlayView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).PlayView(ctx, req.(*PlayViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_PlayViewComic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).PlayViewComic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayURL_PlayViewComic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).PlayViewComic(ctx, req.(*PlayViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayURL_ServiceDesc is the grpc.ServiceDesc for PlayURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.pgc.gateway.player.v2.PlayURL",
	HandlerType: (*PlayURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayView",
			Handler:    _PlayURL_PlayView_Handler,
		},
		{
			MethodName: "PlayViewComic",
			Handler:    _PlayURL_PlayViewComic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/pgc/gateway/player/v2/playurl.proto",
}
