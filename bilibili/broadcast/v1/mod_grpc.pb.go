// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/broadcast/v1/mod.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModManager_WatchResource_FullMethodName = "/bilibili.broadcast.v1.ModManager/WatchResource"
)

// ModManagerClient is the client API for ModManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModManagerClient interface {
	WatchResource(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ModManager_WatchResourceClient, error)
}

type modManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewModManagerClient(cc grpc.ClientConnInterface) ModManagerClient {
	return &modManagerClient{cc}
}

func (c *modManagerClient) WatchResource(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ModManager_WatchResourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModManager_ServiceDesc.Streams[0], ModManager_WatchResource_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modManagerWatchResourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModManager_WatchResourceClient interface {
	Recv() (*ModResourceResp, error)
	grpc.ClientStream
}

type modManagerWatchResourceClient struct {
	grpc.ClientStream
}

func (x *modManagerWatchResourceClient) Recv() (*ModResourceResp, error) {
	m := new(ModResourceResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModManagerServer is the server API for ModManager service.
// All implementations must embed UnimplementedModManagerServer
// for forward compatibility
type ModManagerServer interface {
	WatchResource(*emptypb.Empty, ModManager_WatchResourceServer) error
	mustEmbedUnimplementedModManagerServer()
}

// UnimplementedModManagerServer must be embedded to have forward compatible implementations.
type UnimplementedModManagerServer struct {
}

func (UnimplementedModManagerServer) WatchResource(*emptypb.Empty, ModManager_WatchResourceServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchResource not implemented")
}
func (UnimplementedModManagerServer) mustEmbedUnimplementedModManagerServer() {}

// UnsafeModManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModManagerServer will
// result in compilation errors.
type UnsafeModManagerServer interface {
	mustEmbedUnimplementedModManagerServer()
}

func RegisterModManagerServer(s grpc.ServiceRegistrar, srv ModManagerServer) {
	s.RegisterService(&ModManager_ServiceDesc, srv)
}

func _ModManager_WatchResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModManagerServer).WatchResource(m, &modManagerWatchResourceServer{stream})
}

type ModManager_WatchResourceServer interface {
	Send(*ModResourceResp) error
	grpc.ServerStream
}

type modManagerWatchResourceServer struct {
	grpc.ServerStream
}

func (x *modManagerWatchResourceServer) Send(m *ModResourceResp) error {
	return x.ServerStream.SendMsg(m)
}

// ModManager_ServiceDesc is the grpc.ServiceDesc for ModManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.ModManager",
	HandlerType: (*ModManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchResource",
			Handler:       _ModManager_WatchResource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bilibili/broadcast/v1/mod.proto",
}
