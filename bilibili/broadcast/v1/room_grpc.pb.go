// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/broadcast/v1/room.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BroadcastRoom_Enter_FullMethodName = "/bilibili.broadcast.v1.BroadcastRoom/Enter"
)

// BroadcastRoomClient is the client API for BroadcastRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastRoomClient interface {
	Enter(ctx context.Context, opts ...grpc.CallOption) (BroadcastRoom_EnterClient, error)
}

type broadcastRoomClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastRoomClient(cc grpc.ClientConnInterface) BroadcastRoomClient {
	return &broadcastRoomClient{cc}
}

func (c *broadcastRoomClient) Enter(ctx context.Context, opts ...grpc.CallOption) (BroadcastRoom_EnterClient, error) {
	stream, err := c.cc.NewStream(ctx, &BroadcastRoom_ServiceDesc.Streams[0], BroadcastRoom_Enter_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &broadcastRoomEnterClient{stream}
	return x, nil
}

type BroadcastRoom_EnterClient interface {
	Send(*RoomReq) error
	Recv() (*RoomResp, error)
	grpc.ClientStream
}

type broadcastRoomEnterClient struct {
	grpc.ClientStream
}

func (x *broadcastRoomEnterClient) Send(m *RoomReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *broadcastRoomEnterClient) Recv() (*RoomResp, error) {
	m := new(RoomResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroadcastRoomServer is the server API for BroadcastRoom service.
// All implementations must embed UnimplementedBroadcastRoomServer
// for forward compatibility
type BroadcastRoomServer interface {
	Enter(BroadcastRoom_EnterServer) error
	mustEmbedUnimplementedBroadcastRoomServer()
}

// UnimplementedBroadcastRoomServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastRoomServer struct {
}

func (UnimplementedBroadcastRoomServer) Enter(BroadcastRoom_EnterServer) error {
	return status.Errorf(codes.Unimplemented, "method Enter not implemented")
}
func (UnimplementedBroadcastRoomServer) mustEmbedUnimplementedBroadcastRoomServer() {}

// UnsafeBroadcastRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastRoomServer will
// result in compilation errors.
type UnsafeBroadcastRoomServer interface {
	mustEmbedUnimplementedBroadcastRoomServer()
}

func RegisterBroadcastRoomServer(s grpc.ServiceRegistrar, srv BroadcastRoomServer) {
	s.RegisterService(&BroadcastRoom_ServiceDesc, srv)
}

func _BroadcastRoom_Enter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BroadcastRoomServer).Enter(&broadcastRoomEnterServer{stream})
}

type BroadcastRoom_EnterServer interface {
	Send(*RoomResp) error
	Recv() (*RoomReq, error)
	grpc.ServerStream
}

type broadcastRoomEnterServer struct {
	grpc.ServerStream
}

func (x *broadcastRoomEnterServer) Send(m *RoomResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *broadcastRoomEnterServer) Recv() (*RoomReq, error) {
	m := new(RoomReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroadcastRoom_ServiceDesc is the grpc.ServiceDesc for BroadcastRoom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastRoom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.BroadcastRoom",
	HandlerType: (*BroadcastRoomServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Enter",
			Handler:       _BroadcastRoom_Enter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bilibili/broadcast/v1/room.proto",
}
