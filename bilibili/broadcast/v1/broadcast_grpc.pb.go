// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/broadcast/v1/broadcast.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Broadcast_Auth_FullMethodName        = "/bilibili.broadcast.v1.Broadcast/Auth"
	Broadcast_Heartbeat_FullMethodName   = "/bilibili.broadcast.v1.Broadcast/Heartbeat"
	Broadcast_Subscribe_FullMethodName   = "/bilibili.broadcast.v1.Broadcast/Subscribe"
	Broadcast_Unsubscribe_FullMethodName = "/bilibili.broadcast.v1.Broadcast/Unsubscribe"
	Broadcast_MessageAck_FullMethodName  = "/bilibili.broadcast.v1.Broadcast/MessageAck"
)

// BroadcastClient is the client API for Broadcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastClient interface {
	// 用户鉴权
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
	// 心跳保活：成功心跳为4分45秒，重试心跳为30s，三次收不到进行重连（不超过5分45）
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error)
	// 订阅target_path
	Subscribe(ctx context.Context, in *TargetPath, opts ...grpc.CallOption) (*empty.Empty, error)
	// 取消订阅target_path
	Unsubscribe(ctx context.Context, in *TargetPath, opts ...grpc.CallOption) (*empty.Empty, error)
	// 消息回执
	MessageAck(ctx context.Context, in *MessageAckReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type broadcastClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastClient(cc grpc.ClientConnInterface) BroadcastClient {
	return &broadcastClient{cc}
}

func (c *broadcastClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := c.cc.Invoke(ctx, Broadcast_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error) {
	out := new(HeartbeatResp)
	err := c.cc.Invoke(ctx, Broadcast_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) Subscribe(ctx context.Context, in *TargetPath, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Broadcast_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) Unsubscribe(ctx context.Context, in *TargetPath, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Broadcast_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) MessageAck(ctx context.Context, in *MessageAckReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Broadcast_MessageAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastServer is the server API for Broadcast service.
// All implementations must embed UnimplementedBroadcastServer
// for forward compatibility
type BroadcastServer interface {
	// 用户鉴权
	Auth(context.Context, *AuthReq) (*AuthResp, error)
	// 心跳保活：成功心跳为4分45秒，重试心跳为30s，三次收不到进行重连（不超过5分45）
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error)
	// 订阅target_path
	Subscribe(context.Context, *TargetPath) (*empty.Empty, error)
	// 取消订阅target_path
	Unsubscribe(context.Context, *TargetPath) (*empty.Empty, error)
	// 消息回执
	MessageAck(context.Context, *MessageAckReq) (*empty.Empty, error)
	mustEmbedUnimplementedBroadcastServer()
}

// UnimplementedBroadcastServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServer struct {
}

func (UnimplementedBroadcastServer) Auth(context.Context, *AuthReq) (*AuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedBroadcastServer) Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedBroadcastServer) Subscribe(context.Context, *TargetPath) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBroadcastServer) Unsubscribe(context.Context, *TargetPath) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedBroadcastServer) MessageAck(context.Context, *MessageAckReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAck not implemented")
}
func (UnimplementedBroadcastServer) mustEmbedUnimplementedBroadcastServer() {}

// UnsafeBroadcastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServer will
// result in compilation errors.
type UnsafeBroadcastServer interface {
	mustEmbedUnimplementedBroadcastServer()
}

func RegisterBroadcastServer(s grpc.ServiceRegistrar, srv BroadcastServer) {
	s.RegisterService(&Broadcast_ServiceDesc, srv)
}

func _Broadcast_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcast_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcast_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcast_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).Subscribe(ctx, req.(*TargetPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcast_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).Unsubscribe(ctx, req.(*TargetPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_MessageAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).MessageAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcast_MessageAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).MessageAck(ctx, req.(*MessageAckReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Broadcast_ServiceDesc is the grpc.ServiceDesc for Broadcast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broadcast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.Broadcast",
	HandlerType: (*BroadcastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Broadcast_Auth_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Broadcast_Heartbeat_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Broadcast_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Broadcast_Unsubscribe_Handler,
		},
		{
			MethodName: "MessageAck",
			Handler:    _Broadcast_MessageAck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/broadcast/v1/broadcast.proto",
}

const (
	BroadcastTunnel_CreateTunnel_FullMethodName = "/bilibili.broadcast.v1.BroadcastTunnel/CreateTunnel"
)

// BroadcastTunnelClient is the client API for BroadcastTunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastTunnelClient interface {
	// 创建双向stream连接隧道
	CreateTunnel(ctx context.Context, opts ...grpc.CallOption) (BroadcastTunnel_CreateTunnelClient, error)
}

type broadcastTunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastTunnelClient(cc grpc.ClientConnInterface) BroadcastTunnelClient {
	return &broadcastTunnelClient{cc}
}

func (c *broadcastTunnelClient) CreateTunnel(ctx context.Context, opts ...grpc.CallOption) (BroadcastTunnel_CreateTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &BroadcastTunnel_ServiceDesc.Streams[0], BroadcastTunnel_CreateTunnel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &broadcastTunnelCreateTunnelClient{stream}
	return x, nil
}

type BroadcastTunnel_CreateTunnelClient interface {
	Send(*BroadcastFrame) error
	Recv() (*BroadcastFrame, error)
	grpc.ClientStream
}

type broadcastTunnelCreateTunnelClient struct {
	grpc.ClientStream
}

func (x *broadcastTunnelCreateTunnelClient) Send(m *BroadcastFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *broadcastTunnelCreateTunnelClient) Recv() (*BroadcastFrame, error) {
	m := new(BroadcastFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroadcastTunnelServer is the server API for BroadcastTunnel service.
// All implementations must embed UnimplementedBroadcastTunnelServer
// for forward compatibility
type BroadcastTunnelServer interface {
	// 创建双向stream连接隧道
	CreateTunnel(BroadcastTunnel_CreateTunnelServer) error
	mustEmbedUnimplementedBroadcastTunnelServer()
}

// UnimplementedBroadcastTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastTunnelServer struct {
}

func (UnimplementedBroadcastTunnelServer) CreateTunnel(BroadcastTunnel_CreateTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedBroadcastTunnelServer) mustEmbedUnimplementedBroadcastTunnelServer() {}

// UnsafeBroadcastTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastTunnelServer will
// result in compilation errors.
type UnsafeBroadcastTunnelServer interface {
	mustEmbedUnimplementedBroadcastTunnelServer()
}

func RegisterBroadcastTunnelServer(s grpc.ServiceRegistrar, srv BroadcastTunnelServer) {
	s.RegisterService(&BroadcastTunnel_ServiceDesc, srv)
}

func _BroadcastTunnel_CreateTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BroadcastTunnelServer).CreateTunnel(&broadcastTunnelCreateTunnelServer{stream})
}

type BroadcastTunnel_CreateTunnelServer interface {
	Send(*BroadcastFrame) error
	Recv() (*BroadcastFrame, error)
	grpc.ServerStream
}

type broadcastTunnelCreateTunnelServer struct {
	grpc.ServerStream
}

func (x *broadcastTunnelCreateTunnelServer) Send(m *BroadcastFrame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *broadcastTunnelCreateTunnelServer) Recv() (*BroadcastFrame, error) {
	m := new(BroadcastFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroadcastTunnel_ServiceDesc is the grpc.ServiceDesc for BroadcastTunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastTunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.BroadcastTunnel",
	HandlerType: (*BroadcastTunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTunnel",
			Handler:       _BroadcastTunnel_CreateTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bilibili/broadcast/v1/broadcast.proto",
}
