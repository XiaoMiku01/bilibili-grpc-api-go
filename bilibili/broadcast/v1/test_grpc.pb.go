// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/broadcast/v1/test.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Test_WatchTestEvent_FullMethodName = "/bilibili.broadcast.v1.Test/WatchTestEvent"
)

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	// 监听上报事件
	WatchTestEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Test_WatchTestEventClient, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) WatchTestEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Test_WatchTestEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], Test_WatchTestEvent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testWatchTestEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_WatchTestEventClient interface {
	Recv() (*TestResp, error)
	grpc.ClientStream
}

type testWatchTestEventClient struct {
	grpc.ClientStream
}

func (x *testWatchTestEventClient) Recv() (*TestResp, error) {
	m := new(TestResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	// 监听上报事件
	WatchTestEvent(*emptypb.Empty, Test_WatchTestEventServer) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) WatchTestEvent(*emptypb.Empty, Test_WatchTestEventServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTestEvent not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_WatchTestEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).WatchTestEvent(m, &testWatchTestEventServer{stream})
}

type Test_WatchTestEventServer interface {
	Send(*TestResp) error
	grpc.ServerStream
}

type testWatchTestEventServer struct {
	grpc.ServerStream
}

func (x *testWatchTestEventServer) Send(m *TestResp) error {
	return x.ServerStream.SendMsg(m)
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.Test",
	HandlerType: (*TestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTestEvent",
			Handler:       _Test_WatchTestEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bilibili/broadcast/v1/test.proto",
}

const (
	Test2_Test_FullMethodName = "/bilibili.broadcast.v1.Test2/Test"
)

// Test2Client is the client API for Test2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Test2Client interface {
	Test(ctx context.Context, in *AddParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type test2Client struct {
	cc grpc.ClientConnInterface
}

func NewTest2Client(cc grpc.ClientConnInterface) Test2Client {
	return &test2Client{cc}
}

func (c *test2Client) Test(ctx context.Context, in *AddParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Test2_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Test2Server is the server API for Test2 service.
// All implementations must embed UnimplementedTest2Server
// for forward compatibility
type Test2Server interface {
	Test(context.Context, *AddParams) (*emptypb.Empty, error)
	mustEmbedUnimplementedTest2Server()
}

// UnimplementedTest2Server must be embedded to have forward compatible implementations.
type UnimplementedTest2Server struct {
}

func (UnimplementedTest2Server) Test(context.Context, *AddParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedTest2Server) mustEmbedUnimplementedTest2Server() {}

// UnsafeTest2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Test2Server will
// result in compilation errors.
type UnsafeTest2Server interface {
	mustEmbedUnimplementedTest2Server()
}

func RegisterTest2Server(s grpc.ServiceRegistrar, srv Test2Server) {
	s.RegisterService(&Test2_ServiceDesc, srv)
}

func _Test2_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test2Server).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test2_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test2Server).Test(ctx, req.(*AddParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Test2_ServiceDesc is the grpc.ServiceDesc for Test2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.Test2",
	HandlerType: (*Test2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Test2_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/broadcast/v1/test.proto",
}
