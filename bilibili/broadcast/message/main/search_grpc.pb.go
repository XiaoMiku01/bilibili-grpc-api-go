// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/broadcast/message/main/search.proto

package main1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Search_ChatResultPush_FullMethodName = "/bilibili.broadcast.message.main.Search/ChatResultPush"
)

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchClient interface {
	ChatResultPush(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Search_ChatResultPushClient, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) ChatResultPush(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Search_ChatResultPushClient, error) {
	stream, err := c.cc.NewStream(ctx, &Search_ServiceDesc.Streams[0], Search_ChatResultPush_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &searchChatResultPushClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Search_ChatResultPushClient interface {
	Recv() (*ChatResult, error)
	grpc.ClientStream
}

type searchChatResultPushClient struct {
	grpc.ClientStream
}

func (x *searchChatResultPushClient) Recv() (*ChatResult, error) {
	m := new(ChatResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchServer is the server API for Search service.
// All implementations must embed UnimplementedSearchServer
// for forward compatibility
type SearchServer interface {
	ChatResultPush(*emptypb.Empty, Search_ChatResultPushServer) error
	mustEmbedUnimplementedSearchServer()
}

// UnimplementedSearchServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (UnimplementedSearchServer) ChatResultPush(*emptypb.Empty, Search_ChatResultPushServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatResultPush not implemented")
}
func (UnimplementedSearchServer) mustEmbedUnimplementedSearchServer() {}

// UnsafeSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServer will
// result in compilation errors.
type UnsafeSearchServer interface {
	mustEmbedUnimplementedSearchServer()
}

func RegisterSearchServer(s grpc.ServiceRegistrar, srv SearchServer) {
	s.RegisterService(&Search_ServiceDesc, srv)
}

func _Search_ChatResultPush_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServer).ChatResultPush(m, &searchChatResultPushServer{stream})
}

type Search_ChatResultPushServer interface {
	Send(*ChatResult) error
	grpc.ServerStream
}

type searchChatResultPushServer struct {
	grpc.ServerStream
}

func (x *searchChatResultPushServer) Send(m *ChatResult) error {
	return x.ServerStream.SendMsg(m)
}

// Search_ServiceDesc is the grpc.ServiceDesc for Search service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Search_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.message.main.Search",
	HandlerType: (*SearchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatResultPush",
			Handler:       _Search_ChatResultPush_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bilibili/broadcast/message/main/search.proto",
}
