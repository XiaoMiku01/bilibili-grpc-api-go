// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/broadcast/message/main/resource.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Resource_TopActivity_FullMethodName = "/bilibili.broadcast.message.main.Resource/TopActivity"
)

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceClient interface {
	TopActivity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Resource_TopActivityClient, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) TopActivity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Resource_TopActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &Resource_ServiceDesc.Streams[0], Resource_TopActivity_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceTopActivityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resource_TopActivityClient interface {
	Recv() (*TopActivityReply, error)
	grpc.ClientStream
}

type resourceTopActivityClient struct {
	grpc.ClientStream
}

func (x *resourceTopActivityClient) Recv() (*TopActivityReply, error) {
	m := new(TopActivityReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceServer is the server API for Resource service.
// All implementations must embed UnimplementedResourceServer
// for forward compatibility
type ResourceServer interface {
	TopActivity(*emptypb.Empty, Resource_TopActivityServer) error
	mustEmbedUnimplementedResourceServer()
}

// UnimplementedResourceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (UnimplementedResourceServer) TopActivity(*emptypb.Empty, Resource_TopActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method TopActivity not implemented")
}
func (UnimplementedResourceServer) mustEmbedUnimplementedResourceServer() {}

// UnsafeResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServer will
// result in compilation errors.
type UnsafeResourceServer interface {
	mustEmbedUnimplementedResourceServer()
}

func RegisterResourceServer(s grpc.ServiceRegistrar, srv ResourceServer) {
	s.RegisterService(&Resource_ServiceDesc, srv)
}

func _Resource_TopActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServer).TopActivity(m, &resourceTopActivityServer{stream})
}

type Resource_TopActivityServer interface {
	Send(*TopActivityReply) error
	grpc.ServerStream
}

type resourceTopActivityServer struct {
	grpc.ServerStream
}

func (x *resourceTopActivityServer) Send(m *TopActivityReply) error {
	return x.ServerStream.SendMsg(m)
}

// Resource_ServiceDesc is the grpc.ServiceDesc for Resource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.message.main.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TopActivity",
			Handler:       _Resource_TopActivity_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bilibili/broadcast/message/main/resource.proto",
}
