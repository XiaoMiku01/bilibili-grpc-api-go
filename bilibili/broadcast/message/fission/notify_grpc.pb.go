// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/broadcast/message/fission/notify.proto

package fission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Fission_GameNotify_FullMethodName = "/bilibili.broadcast.message.fission.Fission/GameNotify"
)

// FissionClient is the client API for Fission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FissionClient interface {
	GameNotify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Fission_GameNotifyClient, error)
}

type fissionClient struct {
	cc grpc.ClientConnInterface
}

func NewFissionClient(cc grpc.ClientConnInterface) FissionClient {
	return &fissionClient{cc}
}

func (c *fissionClient) GameNotify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Fission_GameNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fission_ServiceDesc.Streams[0], Fission_GameNotify_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fissionGameNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fission_GameNotifyClient interface {
	Recv() (*GameNotifyReply, error)
	grpc.ClientStream
}

type fissionGameNotifyClient struct {
	grpc.ClientStream
}

func (x *fissionGameNotifyClient) Recv() (*GameNotifyReply, error) {
	m := new(GameNotifyReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FissionServer is the server API for Fission service.
// All implementations must embed UnimplementedFissionServer
// for forward compatibility
type FissionServer interface {
	GameNotify(*emptypb.Empty, Fission_GameNotifyServer) error
	mustEmbedUnimplementedFissionServer()
}

// UnimplementedFissionServer must be embedded to have forward compatible implementations.
type UnimplementedFissionServer struct {
}

func (UnimplementedFissionServer) GameNotify(*emptypb.Empty, Fission_GameNotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method GameNotify not implemented")
}
func (UnimplementedFissionServer) mustEmbedUnimplementedFissionServer() {}

// UnsafeFissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FissionServer will
// result in compilation errors.
type UnsafeFissionServer interface {
	mustEmbedUnimplementedFissionServer()
}

func RegisterFissionServer(s grpc.ServiceRegistrar, srv FissionServer) {
	s.RegisterService(&Fission_ServiceDesc, srv)
}

func _Fission_GameNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FissionServer).GameNotify(m, &fissionGameNotifyServer{stream})
}

type Fission_GameNotifyServer interface {
	Send(*GameNotifyReply) error
	grpc.ServerStream
}

type fissionGameNotifyServer struct {
	grpc.ServerStream
}

func (x *fissionGameNotifyServer) Send(m *GameNotifyReply) error {
	return x.ServerStream.SendMsg(m)
}

// Fission_ServiceDesc is the grpc.ServiceDesc for Fission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.message.fission.Fission",
	HandlerType: (*FissionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GameNotify",
			Handler:       _Fission_GameNotify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bilibili/broadcast/message/fission/notify.proto",
}
