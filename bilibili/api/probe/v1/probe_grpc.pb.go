// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/api/probe/v1/probe.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Probe_TestCode_FullMethodName   = "/bilibili.api.probe.v1.Probe/TestCode"
	Probe_TestReq_FullMethodName    = "/bilibili.api.probe.v1.Probe/TestReq"
	Probe_TestStream_FullMethodName = "/bilibili.api.probe.v1.Probe/TestStream"
	Probe_TestSub_FullMethodName    = "/bilibili.api.probe.v1.Probe/TestSub"
)

// ProbeClient is the client API for Probe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProbeClient interface {
	TestCode(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeReply, error)
	TestReq(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeReply, error)
	TestStream(ctx context.Context, in *ProbeStreamReq, opts ...grpc.CallOption) (*ProbeStreamReply, error)
	TestSub(ctx context.Context, in *ProbeSubReq, opts ...grpc.CallOption) (*ProbeSubReply, error)
}

type probeClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeClient(cc grpc.ClientConnInterface) ProbeClient {
	return &probeClient{cc}
}

func (c *probeClient) TestCode(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, Probe_TestCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeClient) TestReq(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeReply, error) {
	out := new(ProbeReply)
	err := c.cc.Invoke(ctx, Probe_TestReq_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeClient) TestStream(ctx context.Context, in *ProbeStreamReq, opts ...grpc.CallOption) (*ProbeStreamReply, error) {
	out := new(ProbeStreamReply)
	err := c.cc.Invoke(ctx, Probe_TestStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeClient) TestSub(ctx context.Context, in *ProbeSubReq, opts ...grpc.CallOption) (*ProbeSubReply, error) {
	out := new(ProbeSubReply)
	err := c.cc.Invoke(ctx, Probe_TestSub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeServer is the server API for Probe service.
// All implementations must embed UnimplementedProbeServer
// for forward compatibility
type ProbeServer interface {
	TestCode(context.Context, *CodeReq) (*CodeReply, error)
	TestReq(context.Context, *ProbeReq) (*ProbeReply, error)
	TestStream(context.Context, *ProbeStreamReq) (*ProbeStreamReply, error)
	TestSub(context.Context, *ProbeSubReq) (*ProbeSubReply, error)
	mustEmbedUnimplementedProbeServer()
}

// UnimplementedProbeServer must be embedded to have forward compatible implementations.
type UnimplementedProbeServer struct {
}

func (UnimplementedProbeServer) TestCode(context.Context, *CodeReq) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCode not implemented")
}
func (UnimplementedProbeServer) TestReq(context.Context, *ProbeReq) (*ProbeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestReq not implemented")
}
func (UnimplementedProbeServer) TestStream(context.Context, *ProbeStreamReq) (*ProbeStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestStream not implemented")
}
func (UnimplementedProbeServer) TestSub(context.Context, *ProbeSubReq) (*ProbeSubReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSub not implemented")
}
func (UnimplementedProbeServer) mustEmbedUnimplementedProbeServer() {}

// UnsafeProbeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeServer will
// result in compilation errors.
type UnsafeProbeServer interface {
	mustEmbedUnimplementedProbeServer()
}

func RegisterProbeServer(s grpc.ServiceRegistrar, srv ProbeServer) {
	s.RegisterService(&Probe_ServiceDesc, srv)
}

func _Probe_TestCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServer).TestCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Probe_TestCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServer).TestCode(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Probe_TestReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServer).TestReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Probe_TestReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServer).TestReq(ctx, req.(*ProbeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Probe_TestStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServer).TestStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Probe_TestStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServer).TestStream(ctx, req.(*ProbeStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Probe_TestSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeSubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServer).TestSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Probe_TestSub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServer).TestSub(ctx, req.(*ProbeSubReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Probe_ServiceDesc is the grpc.ServiceDesc for Probe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Probe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.api.probe.v1.Probe",
	HandlerType: (*ProbeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestCode",
			Handler:    _Probe_TestCode_Handler,
		},
		{
			MethodName: "TestReq",
			Handler:    _Probe_TestReq_Handler,
		},
		{
			MethodName: "TestStream",
			Handler:    _Probe_TestStream_Handler,
		},
		{
			MethodName: "TestSub",
			Handler:    _Probe_TestSub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/api/probe/v1/probe.proto",
}
