// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/app/dynamic/v2/dynamic.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dynamic_DynVideo_FullMethodName                = "/bilibili.app.dynamic.v2.Dynamic/DynVideo"
	Dynamic_DynAll_FullMethodName                  = "/bilibili.app.dynamic.v2.Dynamic/DynAll"
	Dynamic_DynDetails_FullMethodName              = "/bilibili.app.dynamic.v2.Dynamic/DynDetails"
	Dynamic_DynVideoPersonal_FullMethodName        = "/bilibili.app.dynamic.v2.Dynamic/DynVideoPersonal"
	Dynamic_DynVideoUpdOffset_FullMethodName       = "/bilibili.app.dynamic.v2.Dynamic/DynVideoUpdOffset"
	Dynamic_DynAdditionCommonFollow_FullMethodName = "/bilibili.app.dynamic.v2.Dynamic/DynAdditionCommonFollow"
	Dynamic_DynThumb_FullMethodName                = "/bilibili.app.dynamic.v2.Dynamic/DynThumb"
	Dynamic_DynFakeCard_FullMethodName             = "/bilibili.app.dynamic.v2.Dynamic/DynFakeCard"
	Dynamic_DynRcmdUpExchange_FullMethodName       = "/bilibili.app.dynamic.v2.Dynamic/DynRcmdUpExchange"
	Dynamic_DynAllPersonal_FullMethodName          = "/bilibili.app.dynamic.v2.Dynamic/DynAllPersonal"
	Dynamic_DynAllUpdOffset_FullMethodName         = "/bilibili.app.dynamic.v2.Dynamic/DynAllUpdOffset"
	Dynamic_DynVote_FullMethodName                 = "/bilibili.app.dynamic.v2.Dynamic/DynVote"
	Dynamic_DynMixUpListViewMore_FullMethodName    = "/bilibili.app.dynamic.v2.Dynamic/DynMixUpListViewMore"
	Dynamic_DynLight_FullMethodName                = "/bilibili.app.dynamic.v2.Dynamic/DynLight"
	Dynamic_DynDetail_FullMethodName               = "/bilibili.app.dynamic.v2.Dynamic/DynDetail"
	Dynamic_LikeList_FullMethodName                = "/bilibili.app.dynamic.v2.Dynamic/LikeList"
	Dynamic_RepostList_FullMethodName              = "/bilibili.app.dynamic.v2.Dynamic/RepostList"
	Dynamic_ReactionList_FullMethodName            = "/bilibili.app.dynamic.v2.Dynamic/ReactionList"
	Dynamic_DynSpace_FullMethodName                = "/bilibili.app.dynamic.v2.Dynamic/DynSpace"
	Dynamic_DynUnLoginRcmd_FullMethodName          = "/bilibili.app.dynamic.v2.Dynamic/DynUnLoginRcmd"
	Dynamic_DynServerDetails_FullMethodName        = "/bilibili.app.dynamic.v2.Dynamic/DynServerDetails"
	Dynamic_DynSearch_FullMethodName               = "/bilibili.app.dynamic.v2.Dynamic/DynSearch"
	Dynamic_SetDecision_FullMethodName             = "/bilibili.app.dynamic.v2.Dynamic/SetDecision"
	Dynamic_AlumniDynamics_FullMethodName          = "/bilibili.app.dynamic.v2.Dynamic/AlumniDynamics"
	Dynamic_CampusRcmd_FullMethodName              = "/bilibili.app.dynamic.v2.Dynamic/CampusRcmd"
	Dynamic_SubscribeCampus_FullMethodName         = "/bilibili.app.dynamic.v2.Dynamic/SubscribeCampus"
	Dynamic_SetRecentCampus_FullMethodName         = "/bilibili.app.dynamic.v2.Dynamic/SetRecentCampus"
	Dynamic_DynTab_FullMethodName                  = "/bilibili.app.dynamic.v2.Dynamic/DynTab"
	Dynamic_SchoolSearch_FullMethodName            = "/bilibili.app.dynamic.v2.Dynamic/SchoolSearch"
	Dynamic_SchoolRecommend_FullMethodName         = "/bilibili.app.dynamic.v2.Dynamic/SchoolRecommend"
	Dynamic_DynSpaceSearchDetails_FullMethodName   = "/bilibili.app.dynamic.v2.Dynamic/DynSpaceSearchDetails"
	Dynamic_OfficialAccounts_FullMethodName        = "/bilibili.app.dynamic.v2.Dynamic/OfficialAccounts"
	Dynamic_OfficialDynamics_FullMethodName        = "/bilibili.app.dynamic.v2.Dynamic/OfficialDynamics"
	Dynamic_CampusRedDot_FullMethodName            = "/bilibili.app.dynamic.v2.Dynamic/CampusRedDot"
	Dynamic_CampusRcmdFeed_FullMethodName          = "/bilibili.app.dynamic.v2.Dynamic/CampusRcmdFeed"
	Dynamic_TopicSquare_FullMethodName             = "/bilibili.app.dynamic.v2.Dynamic/TopicSquare"
	Dynamic_TopicList_FullMethodName               = "/bilibili.app.dynamic.v2.Dynamic/TopicList"
	Dynamic_CampusMateLikeList_FullMethodName      = "/bilibili.app.dynamic.v2.Dynamic/CampusMateLikeList"
	Dynamic_CampusFeedback_FullMethodName          = "/bilibili.app.dynamic.v2.Dynamic/CampusFeedback"
	Dynamic_CampusBillboard_FullMethodName         = "/bilibili.app.dynamic.v2.Dynamic/CampusBillboard"
	Dynamic_CampusBillboardInternal_FullMethodName = "/bilibili.app.dynamic.v2.Dynamic/CampusBillboardInternal"
	Dynamic_CampusTopicRcmdFeed_FullMethodName     = "/bilibili.app.dynamic.v2.Dynamic/CampusTopicRcmdFeed"
)

// DynamicClient is the client API for Dynamic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicClient interface {
	// 动态视频页
	DynVideo(ctx context.Context, in *DynVideoReq, opts ...grpc.CallOption) (*DynVideoReply, error)
	// 动态综合页
	DynAll(ctx context.Context, in *DynAllReq, opts ...grpc.CallOption) (*DynAllReply, error)
	// 批量动态id获取动态详情
	DynDetails(ctx context.Context, in *DynDetailsReq, opts ...grpc.CallOption) (*DynDetailsReply, error)
	// 视频页最近访问 - 个人feed流
	DynVideoPersonal(ctx context.Context, in *DynVideoPersonalReq, opts ...grpc.CallOption) (*DynVideoPersonalReply, error)
	// 视频页最近访问 - 标记已读
	DynVideoUpdOffset(ctx context.Context, in *DynVideoUpdOffsetReq, opts ...grpc.CallOption) (*NoReply, error)
	// 动态通用附加卡-follow/取消follow
	DynAdditionCommonFollow(ctx context.Context, in *DynAdditionCommonFollowReq, opts ...grpc.CallOption) (*DynAdditionCommonFollowReply, error)
	// 动态点赞
	DynThumb(ctx context.Context, in *DynThumbReq, opts ...grpc.CallOption) (*NoReply, error)
	// 动态发布生成临时卡
	DynFakeCard(ctx context.Context, in *DynFakeCardReq, opts ...grpc.CallOption) (*DynFakeCardReply, error)
	// 关注推荐up主换一换
	DynRcmdUpExchange(ctx context.Context, in *DynRcmdUpExchangeReq, opts ...grpc.CallOption) (*DynRcmdUpExchangeReply, error)
	// 综合页最近访问 - 个人feed流
	DynAllPersonal(ctx context.Context, in *DynAllPersonalReq, opts ...grpc.CallOption) (*DynAllPersonalReply, error)
	// 综合页最近访问 - 标记已读
	DynAllUpdOffset(ctx context.Context, in *DynAllUpdOffsetReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票操作接口
	DynVote(ctx context.Context, in *DynVoteReq, opts ...grpc.CallOption) (*DynVoteReply, error)
	// 网关调用 - 查看更多-列表
	DynMixUpListViewMore(ctx context.Context, in *DynMixUpListViewMoreReq, opts ...grpc.CallOption) (*DynMixUpListViewMoreReply, error)
	// 轻浏览
	DynLight(ctx context.Context, in *DynLightReq, opts ...grpc.CallOption) (*DynLightReply, error)
	// 动态详情页
	DynDetail(ctx context.Context, in *DynDetailReq, opts ...grpc.CallOption) (*DynDetailReply, error)
	// 点赞列表
	LikeList(ctx context.Context, in *LikeListReq, opts ...grpc.CallOption) (*LikeListReply, error)
	// 转发列表
	RepostList(ctx context.Context, in *RepostListReq, opts ...grpc.CallOption) (*RepostListRsp, error)
	// 新版动态转发点赞列表
	ReactionList(ctx context.Context, in *ReactionListReq, opts ...grpc.CallOption) (*ReactionListReply, error)
	// 空间页动态
	DynSpace(ctx context.Context, in *DynSpaceReq, opts ...grpc.CallOption) (*DynSpaceRsp, error)
	// 未登录页分区UP主推荐
	DynUnLoginRcmd(ctx context.Context, in *DynRcmdReq, opts ...grpc.CallOption) (*DynRcmdReply, error)
	DynServerDetails(ctx context.Context, in *DynServerDetailsReq, opts ...grpc.CallOption) (*DynServerDetailsReply, error)
	DynSearch(ctx context.Context, in *DynSearchReq, opts ...grpc.CallOption) (*DynSearchReply, error)
	SetDecision(ctx context.Context, in *SetDecisionReq, opts ...grpc.CallOption) (*NoReply, error)
	AlumniDynamics(ctx context.Context, in *AlumniDynamicsReq, opts ...grpc.CallOption) (*AlumniDynamicsReply, error)
	CampusRcmd(ctx context.Context, in *CampusRcmdReq, opts ...grpc.CallOption) (*CampusRcmdReply, error)
	SubscribeCampus(ctx context.Context, in *SubscribeCampusReq, opts ...grpc.CallOption) (*NoReply, error)
	SetRecentCampus(ctx context.Context, in *SetRecentCampusReq, opts ...grpc.CallOption) (*NoReply, error)
	DynTab(ctx context.Context, in *DynTabReq, opts ...grpc.CallOption) (*DynTabReply, error)
	SchoolSearch(ctx context.Context, in *SchoolSearchReq, opts ...grpc.CallOption) (*SchoolSearchReply, error)
	SchoolRecommend(ctx context.Context, in *SchoolRecommendReq, opts ...grpc.CallOption) (*SchoolRecommendReply, error)
	DynSpaceSearchDetails(ctx context.Context, in *DynSpaceSearchDetailsReq, opts ...grpc.CallOption) (*DynSpaceSearchDetailsReply, error)
	OfficialAccounts(ctx context.Context, in *OfficialAccountsReq, opts ...grpc.CallOption) (*OfficialAccountsReply, error)
	OfficialDynamics(ctx context.Context, in *OfficialDynamicsReq, opts ...grpc.CallOption) (*OfficialDynamicsReply, error)
	CampusRedDot(ctx context.Context, in *CampusRedDotReq, opts ...grpc.CallOption) (*CampusRedDotReply, error)
	CampusRcmdFeed(ctx context.Context, in *CampusRcmdFeedReq, opts ...grpc.CallOption) (*CampusRcmdFeedReply, error)
	TopicSquare(ctx context.Context, in *TopicSquareReq, opts ...grpc.CallOption) (*TopicSquareReply, error)
	TopicList(ctx context.Context, in *TopicListReq, opts ...grpc.CallOption) (*TopicListReply, error)
	CampusMateLikeList(ctx context.Context, in *CampusMateLikeListReq, opts ...grpc.CallOption) (*CampusMateLikeListReply, error)
	CampusFeedback(ctx context.Context, in *CampusFeedbackReq, opts ...grpc.CallOption) (*CampusFeedbackReply, error)
	CampusBillboard(ctx context.Context, in *CampusBillBoardReq, opts ...grpc.CallOption) (*CampusBillBoardReply, error)
	CampusBillboardInternal(ctx context.Context, in *CampusBillboardInternalReq, opts ...grpc.CallOption) (*CampusBillBoardReply, error)
	CampusTopicRcmdFeed(ctx context.Context, in *CampusTopicRcmdFeedReq, opts ...grpc.CallOption) (*CampusTopicRcmdFeedReply, error)
}

type dynamicClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicClient(cc grpc.ClientConnInterface) DynamicClient {
	return &dynamicClient{cc}
}

func (c *dynamicClient) DynVideo(ctx context.Context, in *DynVideoReq, opts ...grpc.CallOption) (*DynVideoReply, error) {
	out := new(DynVideoReply)
	err := c.cc.Invoke(ctx, Dynamic_DynVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynAll(ctx context.Context, in *DynAllReq, opts ...grpc.CallOption) (*DynAllReply, error) {
	out := new(DynAllReply)
	err := c.cc.Invoke(ctx, Dynamic_DynAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynDetails(ctx context.Context, in *DynDetailsReq, opts ...grpc.CallOption) (*DynDetailsReply, error) {
	out := new(DynDetailsReply)
	err := c.cc.Invoke(ctx, Dynamic_DynDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynVideoPersonal(ctx context.Context, in *DynVideoPersonalReq, opts ...grpc.CallOption) (*DynVideoPersonalReply, error) {
	out := new(DynVideoPersonalReply)
	err := c.cc.Invoke(ctx, Dynamic_DynVideoPersonal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynVideoUpdOffset(ctx context.Context, in *DynVideoUpdOffsetReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, Dynamic_DynVideoUpdOffset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynAdditionCommonFollow(ctx context.Context, in *DynAdditionCommonFollowReq, opts ...grpc.CallOption) (*DynAdditionCommonFollowReply, error) {
	out := new(DynAdditionCommonFollowReply)
	err := c.cc.Invoke(ctx, Dynamic_DynAdditionCommonFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynThumb(ctx context.Context, in *DynThumbReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, Dynamic_DynThumb_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynFakeCard(ctx context.Context, in *DynFakeCardReq, opts ...grpc.CallOption) (*DynFakeCardReply, error) {
	out := new(DynFakeCardReply)
	err := c.cc.Invoke(ctx, Dynamic_DynFakeCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynRcmdUpExchange(ctx context.Context, in *DynRcmdUpExchangeReq, opts ...grpc.CallOption) (*DynRcmdUpExchangeReply, error) {
	out := new(DynRcmdUpExchangeReply)
	err := c.cc.Invoke(ctx, Dynamic_DynRcmdUpExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynAllPersonal(ctx context.Context, in *DynAllPersonalReq, opts ...grpc.CallOption) (*DynAllPersonalReply, error) {
	out := new(DynAllPersonalReply)
	err := c.cc.Invoke(ctx, Dynamic_DynAllPersonal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynAllUpdOffset(ctx context.Context, in *DynAllUpdOffsetReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, Dynamic_DynAllUpdOffset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynVote(ctx context.Context, in *DynVoteReq, opts ...grpc.CallOption) (*DynVoteReply, error) {
	out := new(DynVoteReply)
	err := c.cc.Invoke(ctx, Dynamic_DynVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynMixUpListViewMore(ctx context.Context, in *DynMixUpListViewMoreReq, opts ...grpc.CallOption) (*DynMixUpListViewMoreReply, error) {
	out := new(DynMixUpListViewMoreReply)
	err := c.cc.Invoke(ctx, Dynamic_DynMixUpListViewMore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynLight(ctx context.Context, in *DynLightReq, opts ...grpc.CallOption) (*DynLightReply, error) {
	out := new(DynLightReply)
	err := c.cc.Invoke(ctx, Dynamic_DynLight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynDetail(ctx context.Context, in *DynDetailReq, opts ...grpc.CallOption) (*DynDetailReply, error) {
	out := new(DynDetailReply)
	err := c.cc.Invoke(ctx, Dynamic_DynDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) LikeList(ctx context.Context, in *LikeListReq, opts ...grpc.CallOption) (*LikeListReply, error) {
	out := new(LikeListReply)
	err := c.cc.Invoke(ctx, Dynamic_LikeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) RepostList(ctx context.Context, in *RepostListReq, opts ...grpc.CallOption) (*RepostListRsp, error) {
	out := new(RepostListRsp)
	err := c.cc.Invoke(ctx, Dynamic_RepostList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) ReactionList(ctx context.Context, in *ReactionListReq, opts ...grpc.CallOption) (*ReactionListReply, error) {
	out := new(ReactionListReply)
	err := c.cc.Invoke(ctx, Dynamic_ReactionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynSpace(ctx context.Context, in *DynSpaceReq, opts ...grpc.CallOption) (*DynSpaceRsp, error) {
	out := new(DynSpaceRsp)
	err := c.cc.Invoke(ctx, Dynamic_DynSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynUnLoginRcmd(ctx context.Context, in *DynRcmdReq, opts ...grpc.CallOption) (*DynRcmdReply, error) {
	out := new(DynRcmdReply)
	err := c.cc.Invoke(ctx, Dynamic_DynUnLoginRcmd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynServerDetails(ctx context.Context, in *DynServerDetailsReq, opts ...grpc.CallOption) (*DynServerDetailsReply, error) {
	out := new(DynServerDetailsReply)
	err := c.cc.Invoke(ctx, Dynamic_DynServerDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynSearch(ctx context.Context, in *DynSearchReq, opts ...grpc.CallOption) (*DynSearchReply, error) {
	out := new(DynSearchReply)
	err := c.cc.Invoke(ctx, Dynamic_DynSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) SetDecision(ctx context.Context, in *SetDecisionReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, Dynamic_SetDecision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) AlumniDynamics(ctx context.Context, in *AlumniDynamicsReq, opts ...grpc.CallOption) (*AlumniDynamicsReply, error) {
	out := new(AlumniDynamicsReply)
	err := c.cc.Invoke(ctx, Dynamic_AlumniDynamics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) CampusRcmd(ctx context.Context, in *CampusRcmdReq, opts ...grpc.CallOption) (*CampusRcmdReply, error) {
	out := new(CampusRcmdReply)
	err := c.cc.Invoke(ctx, Dynamic_CampusRcmd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) SubscribeCampus(ctx context.Context, in *SubscribeCampusReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, Dynamic_SubscribeCampus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) SetRecentCampus(ctx context.Context, in *SetRecentCampusReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, Dynamic_SetRecentCampus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynTab(ctx context.Context, in *DynTabReq, opts ...grpc.CallOption) (*DynTabReply, error) {
	out := new(DynTabReply)
	err := c.cc.Invoke(ctx, Dynamic_DynTab_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) SchoolSearch(ctx context.Context, in *SchoolSearchReq, opts ...grpc.CallOption) (*SchoolSearchReply, error) {
	out := new(SchoolSearchReply)
	err := c.cc.Invoke(ctx, Dynamic_SchoolSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) SchoolRecommend(ctx context.Context, in *SchoolRecommendReq, opts ...grpc.CallOption) (*SchoolRecommendReply, error) {
	out := new(SchoolRecommendReply)
	err := c.cc.Invoke(ctx, Dynamic_SchoolRecommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynSpaceSearchDetails(ctx context.Context, in *DynSpaceSearchDetailsReq, opts ...grpc.CallOption) (*DynSpaceSearchDetailsReply, error) {
	out := new(DynSpaceSearchDetailsReply)
	err := c.cc.Invoke(ctx, Dynamic_DynSpaceSearchDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) OfficialAccounts(ctx context.Context, in *OfficialAccountsReq, opts ...grpc.CallOption) (*OfficialAccountsReply, error) {
	out := new(OfficialAccountsReply)
	err := c.cc.Invoke(ctx, Dynamic_OfficialAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) OfficialDynamics(ctx context.Context, in *OfficialDynamicsReq, opts ...grpc.CallOption) (*OfficialDynamicsReply, error) {
	out := new(OfficialDynamicsReply)
	err := c.cc.Invoke(ctx, Dynamic_OfficialDynamics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) CampusRedDot(ctx context.Context, in *CampusRedDotReq, opts ...grpc.CallOption) (*CampusRedDotReply, error) {
	out := new(CampusRedDotReply)
	err := c.cc.Invoke(ctx, Dynamic_CampusRedDot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) CampusRcmdFeed(ctx context.Context, in *CampusRcmdFeedReq, opts ...grpc.CallOption) (*CampusRcmdFeedReply, error) {
	out := new(CampusRcmdFeedReply)
	err := c.cc.Invoke(ctx, Dynamic_CampusRcmdFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) TopicSquare(ctx context.Context, in *TopicSquareReq, opts ...grpc.CallOption) (*TopicSquareReply, error) {
	out := new(TopicSquareReply)
	err := c.cc.Invoke(ctx, Dynamic_TopicSquare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) TopicList(ctx context.Context, in *TopicListReq, opts ...grpc.CallOption) (*TopicListReply, error) {
	out := new(TopicListReply)
	err := c.cc.Invoke(ctx, Dynamic_TopicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) CampusMateLikeList(ctx context.Context, in *CampusMateLikeListReq, opts ...grpc.CallOption) (*CampusMateLikeListReply, error) {
	out := new(CampusMateLikeListReply)
	err := c.cc.Invoke(ctx, Dynamic_CampusMateLikeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) CampusFeedback(ctx context.Context, in *CampusFeedbackReq, opts ...grpc.CallOption) (*CampusFeedbackReply, error) {
	out := new(CampusFeedbackReply)
	err := c.cc.Invoke(ctx, Dynamic_CampusFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) CampusBillboard(ctx context.Context, in *CampusBillBoardReq, opts ...grpc.CallOption) (*CampusBillBoardReply, error) {
	out := new(CampusBillBoardReply)
	err := c.cc.Invoke(ctx, Dynamic_CampusBillboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) CampusBillboardInternal(ctx context.Context, in *CampusBillboardInternalReq, opts ...grpc.CallOption) (*CampusBillBoardReply, error) {
	out := new(CampusBillBoardReply)
	err := c.cc.Invoke(ctx, Dynamic_CampusBillboardInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) CampusTopicRcmdFeed(ctx context.Context, in *CampusTopicRcmdFeedReq, opts ...grpc.CallOption) (*CampusTopicRcmdFeedReply, error) {
	out := new(CampusTopicRcmdFeedReply)
	err := c.cc.Invoke(ctx, Dynamic_CampusTopicRcmdFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicServer is the server API for Dynamic service.
// All implementations must embed UnimplementedDynamicServer
// for forward compatibility
type DynamicServer interface {
	// 动态视频页
	DynVideo(context.Context, *DynVideoReq) (*DynVideoReply, error)
	// 动态综合页
	DynAll(context.Context, *DynAllReq) (*DynAllReply, error)
	// 批量动态id获取动态详情
	DynDetails(context.Context, *DynDetailsReq) (*DynDetailsReply, error)
	// 视频页最近访问 - 个人feed流
	DynVideoPersonal(context.Context, *DynVideoPersonalReq) (*DynVideoPersonalReply, error)
	// 视频页最近访问 - 标记已读
	DynVideoUpdOffset(context.Context, *DynVideoUpdOffsetReq) (*NoReply, error)
	// 动态通用附加卡-follow/取消follow
	DynAdditionCommonFollow(context.Context, *DynAdditionCommonFollowReq) (*DynAdditionCommonFollowReply, error)
	// 动态点赞
	DynThumb(context.Context, *DynThumbReq) (*NoReply, error)
	// 动态发布生成临时卡
	DynFakeCard(context.Context, *DynFakeCardReq) (*DynFakeCardReply, error)
	// 关注推荐up主换一换
	DynRcmdUpExchange(context.Context, *DynRcmdUpExchangeReq) (*DynRcmdUpExchangeReply, error)
	// 综合页最近访问 - 个人feed流
	DynAllPersonal(context.Context, *DynAllPersonalReq) (*DynAllPersonalReply, error)
	// 综合页最近访问 - 标记已读
	DynAllUpdOffset(context.Context, *DynAllUpdOffsetReq) (*NoReply, error)
	// 投票操作接口
	DynVote(context.Context, *DynVoteReq) (*DynVoteReply, error)
	// 网关调用 - 查看更多-列表
	DynMixUpListViewMore(context.Context, *DynMixUpListViewMoreReq) (*DynMixUpListViewMoreReply, error)
	// 轻浏览
	DynLight(context.Context, *DynLightReq) (*DynLightReply, error)
	// 动态详情页
	DynDetail(context.Context, *DynDetailReq) (*DynDetailReply, error)
	// 点赞列表
	LikeList(context.Context, *LikeListReq) (*LikeListReply, error)
	// 转发列表
	RepostList(context.Context, *RepostListReq) (*RepostListRsp, error)
	// 新版动态转发点赞列表
	ReactionList(context.Context, *ReactionListReq) (*ReactionListReply, error)
	// 空间页动态
	DynSpace(context.Context, *DynSpaceReq) (*DynSpaceRsp, error)
	// 未登录页分区UP主推荐
	DynUnLoginRcmd(context.Context, *DynRcmdReq) (*DynRcmdReply, error)
	DynServerDetails(context.Context, *DynServerDetailsReq) (*DynServerDetailsReply, error)
	DynSearch(context.Context, *DynSearchReq) (*DynSearchReply, error)
	SetDecision(context.Context, *SetDecisionReq) (*NoReply, error)
	AlumniDynamics(context.Context, *AlumniDynamicsReq) (*AlumniDynamicsReply, error)
	CampusRcmd(context.Context, *CampusRcmdReq) (*CampusRcmdReply, error)
	SubscribeCampus(context.Context, *SubscribeCampusReq) (*NoReply, error)
	SetRecentCampus(context.Context, *SetRecentCampusReq) (*NoReply, error)
	DynTab(context.Context, *DynTabReq) (*DynTabReply, error)
	SchoolSearch(context.Context, *SchoolSearchReq) (*SchoolSearchReply, error)
	SchoolRecommend(context.Context, *SchoolRecommendReq) (*SchoolRecommendReply, error)
	DynSpaceSearchDetails(context.Context, *DynSpaceSearchDetailsReq) (*DynSpaceSearchDetailsReply, error)
	OfficialAccounts(context.Context, *OfficialAccountsReq) (*OfficialAccountsReply, error)
	OfficialDynamics(context.Context, *OfficialDynamicsReq) (*OfficialDynamicsReply, error)
	CampusRedDot(context.Context, *CampusRedDotReq) (*CampusRedDotReply, error)
	CampusRcmdFeed(context.Context, *CampusRcmdFeedReq) (*CampusRcmdFeedReply, error)
	TopicSquare(context.Context, *TopicSquareReq) (*TopicSquareReply, error)
	TopicList(context.Context, *TopicListReq) (*TopicListReply, error)
	CampusMateLikeList(context.Context, *CampusMateLikeListReq) (*CampusMateLikeListReply, error)
	CampusFeedback(context.Context, *CampusFeedbackReq) (*CampusFeedbackReply, error)
	CampusBillboard(context.Context, *CampusBillBoardReq) (*CampusBillBoardReply, error)
	CampusBillboardInternal(context.Context, *CampusBillboardInternalReq) (*CampusBillBoardReply, error)
	CampusTopicRcmdFeed(context.Context, *CampusTopicRcmdFeedReq) (*CampusTopicRcmdFeedReply, error)
	mustEmbedUnimplementedDynamicServer()
}

// UnimplementedDynamicServer must be embedded to have forward compatible implementations.
type UnimplementedDynamicServer struct {
}

func (UnimplementedDynamicServer) DynVideo(context.Context, *DynVideoReq) (*DynVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynVideo not implemented")
}
func (UnimplementedDynamicServer) DynAll(context.Context, *DynAllReq) (*DynAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynAll not implemented")
}
func (UnimplementedDynamicServer) DynDetails(context.Context, *DynDetailsReq) (*DynDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynDetails not implemented")
}
func (UnimplementedDynamicServer) DynVideoPersonal(context.Context, *DynVideoPersonalReq) (*DynVideoPersonalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynVideoPersonal not implemented")
}
func (UnimplementedDynamicServer) DynVideoUpdOffset(context.Context, *DynVideoUpdOffsetReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynVideoUpdOffset not implemented")
}
func (UnimplementedDynamicServer) DynAdditionCommonFollow(context.Context, *DynAdditionCommonFollowReq) (*DynAdditionCommonFollowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynAdditionCommonFollow not implemented")
}
func (UnimplementedDynamicServer) DynThumb(context.Context, *DynThumbReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynThumb not implemented")
}
func (UnimplementedDynamicServer) DynFakeCard(context.Context, *DynFakeCardReq) (*DynFakeCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynFakeCard not implemented")
}
func (UnimplementedDynamicServer) DynRcmdUpExchange(context.Context, *DynRcmdUpExchangeReq) (*DynRcmdUpExchangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynRcmdUpExchange not implemented")
}
func (UnimplementedDynamicServer) DynAllPersonal(context.Context, *DynAllPersonalReq) (*DynAllPersonalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynAllPersonal not implemented")
}
func (UnimplementedDynamicServer) DynAllUpdOffset(context.Context, *DynAllUpdOffsetReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynAllUpdOffset not implemented")
}
func (UnimplementedDynamicServer) DynVote(context.Context, *DynVoteReq) (*DynVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynVote not implemented")
}
func (UnimplementedDynamicServer) DynMixUpListViewMore(context.Context, *DynMixUpListViewMoreReq) (*DynMixUpListViewMoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynMixUpListViewMore not implemented")
}
func (UnimplementedDynamicServer) DynLight(context.Context, *DynLightReq) (*DynLightReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynLight not implemented")
}
func (UnimplementedDynamicServer) DynDetail(context.Context, *DynDetailReq) (*DynDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynDetail not implemented")
}
func (UnimplementedDynamicServer) LikeList(context.Context, *LikeListReq) (*LikeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeList not implemented")
}
func (UnimplementedDynamicServer) RepostList(context.Context, *RepostListReq) (*RepostListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepostList not implemented")
}
func (UnimplementedDynamicServer) ReactionList(context.Context, *ReactionListReq) (*ReactionListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactionList not implemented")
}
func (UnimplementedDynamicServer) DynSpace(context.Context, *DynSpaceReq) (*DynSpaceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynSpace not implemented")
}
func (UnimplementedDynamicServer) DynUnLoginRcmd(context.Context, *DynRcmdReq) (*DynRcmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynUnLoginRcmd not implemented")
}
func (UnimplementedDynamicServer) DynServerDetails(context.Context, *DynServerDetailsReq) (*DynServerDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynServerDetails not implemented")
}
func (UnimplementedDynamicServer) DynSearch(context.Context, *DynSearchReq) (*DynSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynSearch not implemented")
}
func (UnimplementedDynamicServer) SetDecision(context.Context, *SetDecisionReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDecision not implemented")
}
func (UnimplementedDynamicServer) AlumniDynamics(context.Context, *AlumniDynamicsReq) (*AlumniDynamicsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlumniDynamics not implemented")
}
func (UnimplementedDynamicServer) CampusRcmd(context.Context, *CampusRcmdReq) (*CampusRcmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampusRcmd not implemented")
}
func (UnimplementedDynamicServer) SubscribeCampus(context.Context, *SubscribeCampusReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeCampus not implemented")
}
func (UnimplementedDynamicServer) SetRecentCampus(context.Context, *SetRecentCampusReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecentCampus not implemented")
}
func (UnimplementedDynamicServer) DynTab(context.Context, *DynTabReq) (*DynTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynTab not implemented")
}
func (UnimplementedDynamicServer) SchoolSearch(context.Context, *SchoolSearchReq) (*SchoolSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchoolSearch not implemented")
}
func (UnimplementedDynamicServer) SchoolRecommend(context.Context, *SchoolRecommendReq) (*SchoolRecommendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchoolRecommend not implemented")
}
func (UnimplementedDynamicServer) DynSpaceSearchDetails(context.Context, *DynSpaceSearchDetailsReq) (*DynSpaceSearchDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynSpaceSearchDetails not implemented")
}
func (UnimplementedDynamicServer) OfficialAccounts(context.Context, *OfficialAccountsReq) (*OfficialAccountsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialAccounts not implemented")
}
func (UnimplementedDynamicServer) OfficialDynamics(context.Context, *OfficialDynamicsReq) (*OfficialDynamicsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialDynamics not implemented")
}
func (UnimplementedDynamicServer) CampusRedDot(context.Context, *CampusRedDotReq) (*CampusRedDotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampusRedDot not implemented")
}
func (UnimplementedDynamicServer) CampusRcmdFeed(context.Context, *CampusRcmdFeedReq) (*CampusRcmdFeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampusRcmdFeed not implemented")
}
func (UnimplementedDynamicServer) TopicSquare(context.Context, *TopicSquareReq) (*TopicSquareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicSquare not implemented")
}
func (UnimplementedDynamicServer) TopicList(context.Context, *TopicListReq) (*TopicListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicList not implemented")
}
func (UnimplementedDynamicServer) CampusMateLikeList(context.Context, *CampusMateLikeListReq) (*CampusMateLikeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampusMateLikeList not implemented")
}
func (UnimplementedDynamicServer) CampusFeedback(context.Context, *CampusFeedbackReq) (*CampusFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampusFeedback not implemented")
}
func (UnimplementedDynamicServer) CampusBillboard(context.Context, *CampusBillBoardReq) (*CampusBillBoardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampusBillboard not implemented")
}
func (UnimplementedDynamicServer) CampusBillboardInternal(context.Context, *CampusBillboardInternalReq) (*CampusBillBoardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampusBillboardInternal not implemented")
}
func (UnimplementedDynamicServer) CampusTopicRcmdFeed(context.Context, *CampusTopicRcmdFeedReq) (*CampusTopicRcmdFeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampusTopicRcmdFeed not implemented")
}
func (UnimplementedDynamicServer) mustEmbedUnimplementedDynamicServer() {}

// UnsafeDynamicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicServer will
// result in compilation errors.
type UnsafeDynamicServer interface {
	mustEmbedUnimplementedDynamicServer()
}

func RegisterDynamicServer(s grpc.ServiceRegistrar, srv DynamicServer) {
	s.RegisterService(&Dynamic_ServiceDesc, srv)
}

func _Dynamic_DynVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynVideo(ctx, req.(*DynVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynAll(ctx, req.(*DynAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynDetails(ctx, req.(*DynDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynVideoPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynVideoPersonalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynVideoPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynVideoPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynVideoPersonal(ctx, req.(*DynVideoPersonalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynVideoUpdOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynVideoUpdOffsetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynVideoUpdOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynVideoUpdOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynVideoUpdOffset(ctx, req.(*DynVideoUpdOffsetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynAdditionCommonFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynAdditionCommonFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynAdditionCommonFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynAdditionCommonFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynAdditionCommonFollow(ctx, req.(*DynAdditionCommonFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynThumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynThumbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynThumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynThumb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynThumb(ctx, req.(*DynThumbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynFakeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynFakeCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynFakeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynFakeCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynFakeCard(ctx, req.(*DynFakeCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynRcmdUpExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynRcmdUpExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynRcmdUpExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynRcmdUpExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynRcmdUpExchange(ctx, req.(*DynRcmdUpExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynAllPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynAllPersonalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynAllPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynAllPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynAllPersonal(ctx, req.(*DynAllPersonalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynAllUpdOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynAllUpdOffsetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynAllUpdOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynAllUpdOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynAllUpdOffset(ctx, req.(*DynAllUpdOffsetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynVote(ctx, req.(*DynVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynMixUpListViewMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynMixUpListViewMoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynMixUpListViewMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynMixUpListViewMore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynMixUpListViewMore(ctx, req.(*DynMixUpListViewMoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynLight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynLightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynLight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynLight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynLight(ctx, req.(*DynLightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynDetail(ctx, req.(*DynDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_LikeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).LikeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_LikeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).LikeList(ctx, req.(*LikeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_RepostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepostListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).RepostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_RepostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).RepostList(ctx, req.(*RepostListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_ReactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).ReactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_ReactionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).ReactionList(ctx, req.(*ReactionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynSpace(ctx, req.(*DynSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynUnLoginRcmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynRcmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynUnLoginRcmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynUnLoginRcmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynUnLoginRcmd(ctx, req.(*DynRcmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynServerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynServerDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynServerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynServerDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynServerDetails(ctx, req.(*DynServerDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynSearch(ctx, req.(*DynSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_SetDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDecisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).SetDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_SetDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).SetDecision(ctx, req.(*SetDecisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_AlumniDynamics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlumniDynamicsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).AlumniDynamics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_AlumniDynamics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).AlumniDynamics(ctx, req.(*AlumniDynamicsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_CampusRcmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusRcmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).CampusRcmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_CampusRcmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).CampusRcmd(ctx, req.(*CampusRcmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_SubscribeCampus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeCampusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).SubscribeCampus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_SubscribeCampus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).SubscribeCampus(ctx, req.(*SubscribeCampusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_SetRecentCampus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecentCampusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).SetRecentCampus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_SetRecentCampus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).SetRecentCampus(ctx, req.(*SetRecentCampusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynTab(ctx, req.(*DynTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_SchoolSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchoolSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).SchoolSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_SchoolSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).SchoolSearch(ctx, req.(*SchoolSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_SchoolRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchoolRecommendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).SchoolRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_SchoolRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).SchoolRecommend(ctx, req.(*SchoolRecommendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynSpaceSearchDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynSpaceSearchDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynSpaceSearchDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynSpaceSearchDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynSpaceSearchDetails(ctx, req.(*DynSpaceSearchDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_OfficialAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialAccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).OfficialAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_OfficialAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).OfficialAccounts(ctx, req.(*OfficialAccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_OfficialDynamics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialDynamicsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).OfficialDynamics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_OfficialDynamics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).OfficialDynamics(ctx, req.(*OfficialDynamicsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_CampusRedDot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusRedDotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).CampusRedDot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_CampusRedDot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).CampusRedDot(ctx, req.(*CampusRedDotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_CampusRcmdFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusRcmdFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).CampusRcmdFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_CampusRcmdFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).CampusRcmdFeed(ctx, req.(*CampusRcmdFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_TopicSquare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicSquareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).TopicSquare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_TopicSquare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).TopicSquare(ctx, req.(*TopicSquareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_TopicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).TopicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_TopicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).TopicList(ctx, req.(*TopicListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_CampusMateLikeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusMateLikeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).CampusMateLikeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_CampusMateLikeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).CampusMateLikeList(ctx, req.(*CampusMateLikeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_CampusFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusFeedbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).CampusFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_CampusFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).CampusFeedback(ctx, req.(*CampusFeedbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_CampusBillboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusBillBoardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).CampusBillboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_CampusBillboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).CampusBillboard(ctx, req.(*CampusBillBoardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_CampusBillboardInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusBillboardInternalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).CampusBillboardInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_CampusBillboardInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).CampusBillboardInternal(ctx, req.(*CampusBillboardInternalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_CampusTopicRcmdFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusTopicRcmdFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).CampusTopicRcmdFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_CampusTopicRcmdFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).CampusTopicRcmdFeed(ctx, req.(*CampusTopicRcmdFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dynamic_ServiceDesc is the grpc.ServiceDesc for Dynamic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dynamic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.dynamic.v2.Dynamic",
	HandlerType: (*DynamicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DynVideo",
			Handler:    _Dynamic_DynVideo_Handler,
		},
		{
			MethodName: "DynAll",
			Handler:    _Dynamic_DynAll_Handler,
		},
		{
			MethodName: "DynDetails",
			Handler:    _Dynamic_DynDetails_Handler,
		},
		{
			MethodName: "DynVideoPersonal",
			Handler:    _Dynamic_DynVideoPersonal_Handler,
		},
		{
			MethodName: "DynVideoUpdOffset",
			Handler:    _Dynamic_DynVideoUpdOffset_Handler,
		},
		{
			MethodName: "DynAdditionCommonFollow",
			Handler:    _Dynamic_DynAdditionCommonFollow_Handler,
		},
		{
			MethodName: "DynThumb",
			Handler:    _Dynamic_DynThumb_Handler,
		},
		{
			MethodName: "DynFakeCard",
			Handler:    _Dynamic_DynFakeCard_Handler,
		},
		{
			MethodName: "DynRcmdUpExchange",
			Handler:    _Dynamic_DynRcmdUpExchange_Handler,
		},
		{
			MethodName: "DynAllPersonal",
			Handler:    _Dynamic_DynAllPersonal_Handler,
		},
		{
			MethodName: "DynAllUpdOffset",
			Handler:    _Dynamic_DynAllUpdOffset_Handler,
		},
		{
			MethodName: "DynVote",
			Handler:    _Dynamic_DynVote_Handler,
		},
		{
			MethodName: "DynMixUpListViewMore",
			Handler:    _Dynamic_DynMixUpListViewMore_Handler,
		},
		{
			MethodName: "DynLight",
			Handler:    _Dynamic_DynLight_Handler,
		},
		{
			MethodName: "DynDetail",
			Handler:    _Dynamic_DynDetail_Handler,
		},
		{
			MethodName: "LikeList",
			Handler:    _Dynamic_LikeList_Handler,
		},
		{
			MethodName: "RepostList",
			Handler:    _Dynamic_RepostList_Handler,
		},
		{
			MethodName: "ReactionList",
			Handler:    _Dynamic_ReactionList_Handler,
		},
		{
			MethodName: "DynSpace",
			Handler:    _Dynamic_DynSpace_Handler,
		},
		{
			MethodName: "DynUnLoginRcmd",
			Handler:    _Dynamic_DynUnLoginRcmd_Handler,
		},
		{
			MethodName: "DynServerDetails",
			Handler:    _Dynamic_DynServerDetails_Handler,
		},
		{
			MethodName: "DynSearch",
			Handler:    _Dynamic_DynSearch_Handler,
		},
		{
			MethodName: "SetDecision",
			Handler:    _Dynamic_SetDecision_Handler,
		},
		{
			MethodName: "AlumniDynamics",
			Handler:    _Dynamic_AlumniDynamics_Handler,
		},
		{
			MethodName: "CampusRcmd",
			Handler:    _Dynamic_CampusRcmd_Handler,
		},
		{
			MethodName: "SubscribeCampus",
			Handler:    _Dynamic_SubscribeCampus_Handler,
		},
		{
			MethodName: "SetRecentCampus",
			Handler:    _Dynamic_SetRecentCampus_Handler,
		},
		{
			MethodName: "DynTab",
			Handler:    _Dynamic_DynTab_Handler,
		},
		{
			MethodName: "SchoolSearch",
			Handler:    _Dynamic_SchoolSearch_Handler,
		},
		{
			MethodName: "SchoolRecommend",
			Handler:    _Dynamic_SchoolRecommend_Handler,
		},
		{
			MethodName: "DynSpaceSearchDetails",
			Handler:    _Dynamic_DynSpaceSearchDetails_Handler,
		},
		{
			MethodName: "OfficialAccounts",
			Handler:    _Dynamic_OfficialAccounts_Handler,
		},
		{
			MethodName: "OfficialDynamics",
			Handler:    _Dynamic_OfficialDynamics_Handler,
		},
		{
			MethodName: "CampusRedDot",
			Handler:    _Dynamic_CampusRedDot_Handler,
		},
		{
			MethodName: "CampusRcmdFeed",
			Handler:    _Dynamic_CampusRcmdFeed_Handler,
		},
		{
			MethodName: "TopicSquare",
			Handler:    _Dynamic_TopicSquare_Handler,
		},
		{
			MethodName: "TopicList",
			Handler:    _Dynamic_TopicList_Handler,
		},
		{
			MethodName: "CampusMateLikeList",
			Handler:    _Dynamic_CampusMateLikeList_Handler,
		},
		{
			MethodName: "CampusFeedback",
			Handler:    _Dynamic_CampusFeedback_Handler,
		},
		{
			MethodName: "CampusBillboard",
			Handler:    _Dynamic_CampusBillboard_Handler,
		},
		{
			MethodName: "CampusBillboardInternal",
			Handler:    _Dynamic_CampusBillboardInternal_Handler,
		},
		{
			MethodName: "CampusTopicRcmdFeed",
			Handler:    _Dynamic_CampusTopicRcmdFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/app/dynamic/v2/dynamic.proto",
}
