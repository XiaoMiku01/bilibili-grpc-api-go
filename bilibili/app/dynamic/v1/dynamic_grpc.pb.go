// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: bilibili/app/dynamic/v1/dynamic.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dynamic_DynVideo_FullMethodName             = "/bilibili.app.dynamic.v1.Dynamic/DynVideo"
	Dynamic_DynDetails_FullMethodName           = "/bilibili.app.dynamic.v1.Dynamic/DynDetails"
	Dynamic_SVideo_FullMethodName               = "/bilibili.app.dynamic.v1.Dynamic/SVideo"
	Dynamic_DynTab_FullMethodName               = "/bilibili.app.dynamic.v1.Dynamic/DynTab"
	Dynamic_DynOurCitySwitch_FullMethodName     = "/bilibili.app.dynamic.v1.Dynamic/DynOurCitySwitch"
	Dynamic_DynOurCity_FullMethodName           = "/bilibili.app.dynamic.v1.Dynamic/DynOurCity"
	Dynamic_DynVideoPersonal_FullMethodName     = "/bilibili.app.dynamic.v1.Dynamic/DynVideoPersonal"
	Dynamic_DynUpdOffset_FullMethodName         = "/bilibili.app.dynamic.v1.Dynamic/DynUpdOffset"
	Dynamic_DynRed_FullMethodName               = "/bilibili.app.dynamic.v1.Dynamic/DynRed"
	Dynamic_DynMixUpListViewMore_FullMethodName = "/bilibili.app.dynamic.v1.Dynamic/DynMixUpListViewMore"
	Dynamic_DynMixUpListSearch_FullMethodName   = "/bilibili.app.dynamic.v1.Dynamic/DynMixUpListSearch"
	Dynamic_OurCityClickReport_FullMethodName   = "/bilibili.app.dynamic.v1.Dynamic/OurCityClickReport"
	Dynamic_GeoCoder_FullMethodName             = "/bilibili.app.dynamic.v1.Dynamic/GeoCoder"
)

// DynamicClient is the client API for Dynamic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicClient interface {
	// 动态视频页
	DynVideo(ctx context.Context, in *DynVideoReq, opts ...grpc.CallOption) (*DynVideoReqReply, error)
	// 批量动态id获取动态详情
	DynDetails(ctx context.Context, in *DynDetailsReq, opts ...grpc.CallOption) (*DynDetailsReply, error)
	// 小视频连播页
	SVideo(ctx context.Context, in *SVideoReq, opts ...grpc.CallOption) (*SVideoReply, error)
	// 动态tab页
	DynTab(ctx context.Context, in *DynTabReq, opts ...grpc.CallOption) (*DynTabReply, error)
	// 同城接口开关
	DynOurCitySwitch(ctx context.Context, in *DynOurCitySwitchReq, opts ...grpc.CallOption) (*NoReply, error)
	// 动态同城页
	DynOurCity(ctx context.Context, in *DynOurCityReq, opts ...grpc.CallOption) (*DynOurCityReply, error)
	// 最近访问-个人视频feed流
	DynVideoPersonal(ctx context.Context, in *DynVideoPersonalReq, opts ...grpc.CallOption) (*DynVideoPersonalReply, error)
	// 最近访问-标记已读
	DynUpdOffset(ctx context.Context, in *DynUpdOffsetReq, opts ...grpc.CallOption) (*NoReply, error)
	// 动态红点接口
	DynRed(ctx context.Context, in *DynRedReq, opts ...grpc.CallOption) (*DynRedReply, error)
	// 查看更多-列表
	DynMixUpListViewMore(ctx context.Context, in *NoReq, opts ...grpc.CallOption) (*DynMixUpListViewMoreReply, error)
	// 查看更多-搜索
	DynMixUpListSearch(ctx context.Context, in *DynMixUpListSearchReq, opts ...grpc.CallOption) (*DynMixUpListSearchReply, error)
	// 同城点击上报
	OurCityClickReport(ctx context.Context, in *OurCityClickReportReq, opts ...grpc.CallOption) (*OurCityClickReportReply, error)
	// 位置定位
	GeoCoder(ctx context.Context, in *GeoCoderReq, opts ...grpc.CallOption) (*GeoCoderReply, error)
}

type dynamicClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicClient(cc grpc.ClientConnInterface) DynamicClient {
	return &dynamicClient{cc}
}

func (c *dynamicClient) DynVideo(ctx context.Context, in *DynVideoReq, opts ...grpc.CallOption) (*DynVideoReqReply, error) {
	out := new(DynVideoReqReply)
	err := c.cc.Invoke(ctx, Dynamic_DynVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynDetails(ctx context.Context, in *DynDetailsReq, opts ...grpc.CallOption) (*DynDetailsReply, error) {
	out := new(DynDetailsReply)
	err := c.cc.Invoke(ctx, Dynamic_DynDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) SVideo(ctx context.Context, in *SVideoReq, opts ...grpc.CallOption) (*SVideoReply, error) {
	out := new(SVideoReply)
	err := c.cc.Invoke(ctx, Dynamic_SVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynTab(ctx context.Context, in *DynTabReq, opts ...grpc.CallOption) (*DynTabReply, error) {
	out := new(DynTabReply)
	err := c.cc.Invoke(ctx, Dynamic_DynTab_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynOurCitySwitch(ctx context.Context, in *DynOurCitySwitchReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, Dynamic_DynOurCitySwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynOurCity(ctx context.Context, in *DynOurCityReq, opts ...grpc.CallOption) (*DynOurCityReply, error) {
	out := new(DynOurCityReply)
	err := c.cc.Invoke(ctx, Dynamic_DynOurCity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynVideoPersonal(ctx context.Context, in *DynVideoPersonalReq, opts ...grpc.CallOption) (*DynVideoPersonalReply, error) {
	out := new(DynVideoPersonalReply)
	err := c.cc.Invoke(ctx, Dynamic_DynVideoPersonal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynUpdOffset(ctx context.Context, in *DynUpdOffsetReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, Dynamic_DynUpdOffset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynRed(ctx context.Context, in *DynRedReq, opts ...grpc.CallOption) (*DynRedReply, error) {
	out := new(DynRedReply)
	err := c.cc.Invoke(ctx, Dynamic_DynRed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynMixUpListViewMore(ctx context.Context, in *NoReq, opts ...grpc.CallOption) (*DynMixUpListViewMoreReply, error) {
	out := new(DynMixUpListViewMoreReply)
	err := c.cc.Invoke(ctx, Dynamic_DynMixUpListViewMore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynMixUpListSearch(ctx context.Context, in *DynMixUpListSearchReq, opts ...grpc.CallOption) (*DynMixUpListSearchReply, error) {
	out := new(DynMixUpListSearchReply)
	err := c.cc.Invoke(ctx, Dynamic_DynMixUpListSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) OurCityClickReport(ctx context.Context, in *OurCityClickReportReq, opts ...grpc.CallOption) (*OurCityClickReportReply, error) {
	out := new(OurCityClickReportReply)
	err := c.cc.Invoke(ctx, Dynamic_OurCityClickReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) GeoCoder(ctx context.Context, in *GeoCoderReq, opts ...grpc.CallOption) (*GeoCoderReply, error) {
	out := new(GeoCoderReply)
	err := c.cc.Invoke(ctx, Dynamic_GeoCoder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicServer is the server API for Dynamic service.
// All implementations must embed UnimplementedDynamicServer
// for forward compatibility
type DynamicServer interface {
	// 动态视频页
	DynVideo(context.Context, *DynVideoReq) (*DynVideoReqReply, error)
	// 批量动态id获取动态详情
	DynDetails(context.Context, *DynDetailsReq) (*DynDetailsReply, error)
	// 小视频连播页
	SVideo(context.Context, *SVideoReq) (*SVideoReply, error)
	// 动态tab页
	DynTab(context.Context, *DynTabReq) (*DynTabReply, error)
	// 同城接口开关
	DynOurCitySwitch(context.Context, *DynOurCitySwitchReq) (*NoReply, error)
	// 动态同城页
	DynOurCity(context.Context, *DynOurCityReq) (*DynOurCityReply, error)
	// 最近访问-个人视频feed流
	DynVideoPersonal(context.Context, *DynVideoPersonalReq) (*DynVideoPersonalReply, error)
	// 最近访问-标记已读
	DynUpdOffset(context.Context, *DynUpdOffsetReq) (*NoReply, error)
	// 动态红点接口
	DynRed(context.Context, *DynRedReq) (*DynRedReply, error)
	// 查看更多-列表
	DynMixUpListViewMore(context.Context, *NoReq) (*DynMixUpListViewMoreReply, error)
	// 查看更多-搜索
	DynMixUpListSearch(context.Context, *DynMixUpListSearchReq) (*DynMixUpListSearchReply, error)
	// 同城点击上报
	OurCityClickReport(context.Context, *OurCityClickReportReq) (*OurCityClickReportReply, error)
	// 位置定位
	GeoCoder(context.Context, *GeoCoderReq) (*GeoCoderReply, error)
	mustEmbedUnimplementedDynamicServer()
}

// UnimplementedDynamicServer must be embedded to have forward compatible implementations.
type UnimplementedDynamicServer struct {
}

func (UnimplementedDynamicServer) DynVideo(context.Context, *DynVideoReq) (*DynVideoReqReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynVideo not implemented")
}
func (UnimplementedDynamicServer) DynDetails(context.Context, *DynDetailsReq) (*DynDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynDetails not implemented")
}
func (UnimplementedDynamicServer) SVideo(context.Context, *SVideoReq) (*SVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SVideo not implemented")
}
func (UnimplementedDynamicServer) DynTab(context.Context, *DynTabReq) (*DynTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynTab not implemented")
}
func (UnimplementedDynamicServer) DynOurCitySwitch(context.Context, *DynOurCitySwitchReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynOurCitySwitch not implemented")
}
func (UnimplementedDynamicServer) DynOurCity(context.Context, *DynOurCityReq) (*DynOurCityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynOurCity not implemented")
}
func (UnimplementedDynamicServer) DynVideoPersonal(context.Context, *DynVideoPersonalReq) (*DynVideoPersonalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynVideoPersonal not implemented")
}
func (UnimplementedDynamicServer) DynUpdOffset(context.Context, *DynUpdOffsetReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynUpdOffset not implemented")
}
func (UnimplementedDynamicServer) DynRed(context.Context, *DynRedReq) (*DynRedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynRed not implemented")
}
func (UnimplementedDynamicServer) DynMixUpListViewMore(context.Context, *NoReq) (*DynMixUpListViewMoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynMixUpListViewMore not implemented")
}
func (UnimplementedDynamicServer) DynMixUpListSearch(context.Context, *DynMixUpListSearchReq) (*DynMixUpListSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynMixUpListSearch not implemented")
}
func (UnimplementedDynamicServer) OurCityClickReport(context.Context, *OurCityClickReportReq) (*OurCityClickReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OurCityClickReport not implemented")
}
func (UnimplementedDynamicServer) GeoCoder(context.Context, *GeoCoderReq) (*GeoCoderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoCoder not implemented")
}
func (UnimplementedDynamicServer) mustEmbedUnimplementedDynamicServer() {}

// UnsafeDynamicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicServer will
// result in compilation errors.
type UnsafeDynamicServer interface {
	mustEmbedUnimplementedDynamicServer()
}

func RegisterDynamicServer(s grpc.ServiceRegistrar, srv DynamicServer) {
	s.RegisterService(&Dynamic_ServiceDesc, srv)
}

func _Dynamic_DynVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynVideo(ctx, req.(*DynVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynDetails(ctx, req.(*DynDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_SVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).SVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_SVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).SVideo(ctx, req.(*SVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynTab(ctx, req.(*DynTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynOurCitySwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynOurCitySwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynOurCitySwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynOurCitySwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynOurCitySwitch(ctx, req.(*DynOurCitySwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynOurCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynOurCityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynOurCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynOurCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynOurCity(ctx, req.(*DynOurCityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynVideoPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynVideoPersonalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynVideoPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynVideoPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynVideoPersonal(ctx, req.(*DynVideoPersonalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynUpdOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynUpdOffsetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynUpdOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynUpdOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynUpdOffset(ctx, req.(*DynUpdOffsetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynRed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynRedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynRed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynRed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynRed(ctx, req.(*DynRedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynMixUpListViewMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynMixUpListViewMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynMixUpListViewMore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynMixUpListViewMore(ctx, req.(*NoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynMixUpListSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynMixUpListSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynMixUpListSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DynMixUpListSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynMixUpListSearch(ctx, req.(*DynMixUpListSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_OurCityClickReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OurCityClickReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).OurCityClickReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_OurCityClickReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).OurCityClickReport(ctx, req.(*OurCityClickReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_GeoCoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoCoderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).GeoCoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_GeoCoder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).GeoCoder(ctx, req.(*GeoCoderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dynamic_ServiceDesc is the grpc.ServiceDesc for Dynamic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dynamic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.dynamic.v1.Dynamic",
	HandlerType: (*DynamicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DynVideo",
			Handler:    _Dynamic_DynVideo_Handler,
		},
		{
			MethodName: "DynDetails",
			Handler:    _Dynamic_DynDetails_Handler,
		},
		{
			MethodName: "SVideo",
			Handler:    _Dynamic_SVideo_Handler,
		},
		{
			MethodName: "DynTab",
			Handler:    _Dynamic_DynTab_Handler,
		},
		{
			MethodName: "DynOurCitySwitch",
			Handler:    _Dynamic_DynOurCitySwitch_Handler,
		},
		{
			MethodName: "DynOurCity",
			Handler:    _Dynamic_DynOurCity_Handler,
		},
		{
			MethodName: "DynVideoPersonal",
			Handler:    _Dynamic_DynVideoPersonal_Handler,
		},
		{
			MethodName: "DynUpdOffset",
			Handler:    _Dynamic_DynUpdOffset_Handler,
		},
		{
			MethodName: "DynRed",
			Handler:    _Dynamic_DynRed_Handler,
		},
		{
			MethodName: "DynMixUpListViewMore",
			Handler:    _Dynamic_DynMixUpListViewMore_Handler,
		},
		{
			MethodName: "DynMixUpListSearch",
			Handler:    _Dynamic_DynMixUpListSearch_Handler,
		},
		{
			MethodName: "OurCityClickReport",
			Handler:    _Dynamic_OurCityClickReport_Handler,
		},
		{
			MethodName: "GeoCoder",
			Handler:    _Dynamic_GeoCoder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/app/dynamic/v1/dynamic.proto",
}
