// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/app/distribution/v1/distribution.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Distribution_GetUserPreference_FullMethodName = "/bilibili.app.distribution.v1.Distribution/GetUserPreference"
	Distribution_SetUserPreference_FullMethodName = "/bilibili.app.distribution.v1.Distribution/SetUserPreference"
	Distribution_UserPreference_FullMethodName    = "/bilibili.app.distribution.v1.Distribution/UserPreference"
)

// DistributionClient is the client API for Distribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionClient interface {
	// 获取云端储存的用户偏好
	GetUserPreference(ctx context.Context, in *GetUserPreferenceReq, opts ...grpc.CallOption) (*GetUserPreferenceReply, error)
	// 设定用户偏好
	SetUserPreference(ctx context.Context, in *SetUserPreferenceReq, opts ...grpc.CallOption) (*SetUserPreferenceReply, error)
	// 获取云控配置
	UserPreference(ctx context.Context, in *UserPreferenceReq, opts ...grpc.CallOption) (*UserPreferenceReply, error)
}

type distributionClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionClient(cc grpc.ClientConnInterface) DistributionClient {
	return &distributionClient{cc}
}

func (c *distributionClient) GetUserPreference(ctx context.Context, in *GetUserPreferenceReq, opts ...grpc.CallOption) (*GetUserPreferenceReply, error) {
	out := new(GetUserPreferenceReply)
	err := c.cc.Invoke(ctx, Distribution_GetUserPreference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) SetUserPreference(ctx context.Context, in *SetUserPreferenceReq, opts ...grpc.CallOption) (*SetUserPreferenceReply, error) {
	out := new(SetUserPreferenceReply)
	err := c.cc.Invoke(ctx, Distribution_SetUserPreference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) UserPreference(ctx context.Context, in *UserPreferenceReq, opts ...grpc.CallOption) (*UserPreferenceReply, error) {
	out := new(UserPreferenceReply)
	err := c.cc.Invoke(ctx, Distribution_UserPreference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionServer is the server API for Distribution service.
// All implementations must embed UnimplementedDistributionServer
// for forward compatibility
type DistributionServer interface {
	// 获取云端储存的用户偏好
	GetUserPreference(context.Context, *GetUserPreferenceReq) (*GetUserPreferenceReply, error)
	// 设定用户偏好
	SetUserPreference(context.Context, *SetUserPreferenceReq) (*SetUserPreferenceReply, error)
	// 获取云控配置
	UserPreference(context.Context, *UserPreferenceReq) (*UserPreferenceReply, error)
	mustEmbedUnimplementedDistributionServer()
}

// UnimplementedDistributionServer must be embedded to have forward compatible implementations.
type UnimplementedDistributionServer struct {
}

func (UnimplementedDistributionServer) GetUserPreference(context.Context, *GetUserPreferenceReq) (*GetUserPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreference not implemented")
}
func (UnimplementedDistributionServer) SetUserPreference(context.Context, *SetUserPreferenceReq) (*SetUserPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPreference not implemented")
}
func (UnimplementedDistributionServer) UserPreference(context.Context, *UserPreferenceReq) (*UserPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPreference not implemented")
}
func (UnimplementedDistributionServer) mustEmbedUnimplementedDistributionServer() {}

// UnsafeDistributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionServer will
// result in compilation errors.
type UnsafeDistributionServer interface {
	mustEmbedUnimplementedDistributionServer()
}

func RegisterDistributionServer(s grpc.ServiceRegistrar, srv DistributionServer) {
	s.RegisterService(&Distribution_ServiceDesc, srv)
}

func _Distribution_GetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPreferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).GetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_GetUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).GetUserPreference(ctx, req.(*GetUserPreferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_SetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPreferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).SetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_SetUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).SetUserPreference(ctx, req.(*SetUserPreferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_UserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPreferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).UserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_UserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).UserPreference(ctx, req.(*UserPreferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Distribution_ServiceDesc is the grpc.ServiceDesc for Distribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.distribution.v1.Distribution",
	HandlerType: (*DistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPreference",
			Handler:    _Distribution_GetUserPreference_Handler,
		},
		{
			MethodName: "SetUserPreference",
			Handler:    _Distribution_SetUserPreference_Handler,
		},
		{
			MethodName: "UserPreference",
			Handler:    _Distribution_UserPreference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/app/distribution/v1/distribution.proto",
}
