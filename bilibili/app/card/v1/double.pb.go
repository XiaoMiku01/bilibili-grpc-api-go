// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: bilibili/app/card/v1/double.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DoubleCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Card:
	//
	//	*DoubleCards_SmallCoverV2
	//	*DoubleCards_OnePicV2
	//	*DoubleCards_ThreePicV2
	Card isDoubleCards_Card `protobuf_oneof:"Card"`
}

func (x *DoubleCards) Reset() {
	*x = DoubleCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleCards) ProtoMessage() {}

func (x *DoubleCards) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleCards.ProtoReflect.Descriptor instead.
func (*DoubleCards) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{0}
}

func (m *DoubleCards) GetCard() isDoubleCards_Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (x *DoubleCards) GetSmallCoverV2() *SmallCoverV2 {
	if x, ok := x.GetCard().(*DoubleCards_SmallCoverV2); ok {
		return x.SmallCoverV2
	}
	return nil
}

func (x *DoubleCards) GetOnePicV2() *OnePicV2 {
	if x, ok := x.GetCard().(*DoubleCards_OnePicV2); ok {
		return x.OnePicV2
	}
	return nil
}

func (x *DoubleCards) GetThreePicV2() *ThreePicV2 {
	if x, ok := x.GetCard().(*DoubleCards_ThreePicV2); ok {
		return x.ThreePicV2
	}
	return nil
}

type isDoubleCards_Card interface {
	isDoubleCards_Card()
}

type DoubleCards_SmallCoverV2 struct {
	SmallCoverV2 *SmallCoverV2 `protobuf:"bytes,1,opt,name=small_cover_v2,json=smallCoverV2,proto3,oneof"`
}

type DoubleCards_OnePicV2 struct {
	OnePicV2 *OnePicV2 `protobuf:"bytes,2,opt,name=one_pic_v2,json=onePicV2,proto3,oneof"`
}

type DoubleCards_ThreePicV2 struct {
	ThreePicV2 *ThreePicV2 `protobuf:"bytes,3,opt,name=three_pic_v2,json=threePicV2,proto3,oneof"`
}

func (*DoubleCards_SmallCoverV2) isDoubleCards_Card() {}

func (*DoubleCards_OnePicV2) isDoubleCards_Card() {}

func (*DoubleCards_ThreePicV2) isDoubleCards_Card() {}

type SmallCoverV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverGif string `protobuf:"bytes,2,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	CoverBlur int32 `protobuf:"varint,3,opt,name=cover_blur,json=coverBlur,proto3" json:"cover_blur,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,4,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,5,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2 string `protobuf:"bytes,6,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2 int32 `protobuf:"varint,7,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3" json:"cover_left_icon_2,omitempty"`
	CoverRightText string `protobuf:"bytes,8,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon int32 `protobuf:"varint,9,opt,name=cover_right_icon,json=coverRightIcon,proto3" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string `protobuf:"bytes,10,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Subtitle string `protobuf:"bytes,11,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Badge string `protobuf:"bytes,12,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReason string `protobuf:"bytes,13,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Desc string `protobuf:"bytes,14,opt,name=desc,proto3" json:"desc,omitempty"`
	Avatar *Avatar `protobuf:"bytes,15,opt,name=avatar,proto3" json:"avatar,omitempty"`
	OfficialIcon int32 `protobuf:"varint,16,opt,name=official_icon,json=officialIcon,proto3" json:"official_icon,omitempty"`
	CanPlay int32 `protobuf:"varint,17,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,18,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	RcmdReasonStyleV2 *ReasonStyle `protobuf:"bytes,19,opt,name=rcmd_reason_style_v2,json=rcmdReasonStyleV2,proto3" json:"rcmd_reason_style_v2,omitempty"`
	LikeButton *LikeButton `protobuf:"bytes,20,opt,name=like_button,json=likeButton,proto3" json:"like_button,omitempty"`
}

func (x *SmallCoverV2) Reset() {
	*x = SmallCoverV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallCoverV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallCoverV2) ProtoMessage() {}

func (x *SmallCoverV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallCoverV2.ProtoReflect.Descriptor instead.
func (*SmallCoverV2) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{1}
}

func (x *SmallCoverV2) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmallCoverV2) GetCoverGif() string {
	if x != nil {
		return x.CoverGif
	}
	return ""
}

func (x *SmallCoverV2) GetCoverBlur() int32 {
	if x != nil {
		return x.CoverBlur
	}
	return 0
}

func (x *SmallCoverV2) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *SmallCoverV2) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *SmallCoverV2) GetCoverLeftText_2() string {
	if x != nil {
		return x.CoverLeftText_2
	}
	return ""
}

func (x *SmallCoverV2) GetCoverLeftIcon_2() int32 {
	if x != nil {
		return x.CoverLeftIcon_2
	}
	return 0
}

func (x *SmallCoverV2) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *SmallCoverV2) GetCoverRightIcon() int32 {
	if x != nil {
		return x.CoverRightIcon
	}
	return 0
}

func (x *SmallCoverV2) GetCoverRightBackgroundColor() string {
	if x != nil {
		return x.CoverRightBackgroundColor
	}
	return ""
}

func (x *SmallCoverV2) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *SmallCoverV2) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *SmallCoverV2) GetRcmdReason() string {
	if x != nil {
		return x.RcmdReason
	}
	return ""
}

func (x *SmallCoverV2) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SmallCoverV2) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *SmallCoverV2) GetOfficialIcon() int32 {
	if x != nil {
		return x.OfficialIcon
	}
	return 0
}

func (x *SmallCoverV2) GetCanPlay() int32 {
	if x != nil {
		return x.CanPlay
	}
	return 0
}

func (x *SmallCoverV2) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

func (x *SmallCoverV2) GetRcmdReasonStyleV2() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyleV2
	}
	return nil
}

func (x *SmallCoverV2) GetLikeButton() *LikeButton {
	if x != nil {
		return x.LikeButton
	}
	return nil
}

type SmallCoverV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Avatar *Avatar `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CoverLeftText string `protobuf:"bytes,3,opt,name=cover_left_text,json=coverLeftText,proto3" json:"cover_left_text,omitempty"`
	CoverRightButton *Button `protobuf:"bytes,4,opt,name=cover_right_button,json=coverRightButton,proto3" json:"cover_right_button,omitempty"`
	RcmdReason string `protobuf:"bytes,5,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	OfficialIcon int32 `protobuf:"varint,7,opt,name=official_icon,json=officialIcon,proto3" json:"official_icon,omitempty"`
	CanPlay int32 `protobuf:"varint,8,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,9,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
}

func (x *SmallCoverV3) Reset() {
	*x = SmallCoverV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallCoverV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallCoverV3) ProtoMessage() {}

func (x *SmallCoverV3) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallCoverV3.ProtoReflect.Descriptor instead.
func (*SmallCoverV3) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{2}
}

func (x *SmallCoverV3) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmallCoverV3) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *SmallCoverV3) GetCoverLeftText() string {
	if x != nil {
		return x.CoverLeftText
	}
	return ""
}

func (x *SmallCoverV3) GetCoverRightButton() *Button {
	if x != nil {
		return x.CoverRightButton
	}
	return nil
}

func (x *SmallCoverV3) GetRcmdReason() string {
	if x != nil {
		return x.RcmdReason
	}
	return ""
}

func (x *SmallCoverV3) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SmallCoverV3) GetOfficialIcon() int32 {
	if x != nil {
		return x.OfficialIcon
	}
	return 0
}

func (x *SmallCoverV3) GetCanPlay() int32 {
	if x != nil {
		return x.CanPlay
	}
	return 0
}

func (x *SmallCoverV3) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

type MiddleCoverV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Ratio int32 `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Badge string `protobuf:"bytes,4,opt,name=badge,proto3" json:"badge,omitempty"`
}

func (x *MiddleCoverV2) Reset() {
	*x = MiddleCoverV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddleCoverV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddleCoverV2) ProtoMessage() {}

func (x *MiddleCoverV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddleCoverV2.ProtoReflect.Descriptor instead.
func (*MiddleCoverV2) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{3}
}

func (x *MiddleCoverV2) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MiddleCoverV2) GetRatio() int32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *MiddleCoverV2) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *MiddleCoverV2) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

type LargeCoverV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Avatar *Avatar `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Badge string `protobuf:"bytes,3,opt,name=badge,proto3" json:"badge,omitempty"`
	CoverRightButton *Button `protobuf:"bytes,4,opt,name=cover_right_button,json=coverRightButton,proto3" json:"cover_right_button,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,5,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,6,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2 string `protobuf:"bytes,7,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2 int32 `protobuf:"varint,8,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3" json:"cover_left_icon_2,omitempty"`
	RcmdReason string `protobuf:"bytes,9,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	OfficialIcon int32 `protobuf:"varint,10,opt,name=official_icon,json=officialIcon,proto3" json:"official_icon,omitempty"`
	CanPlay int32 `protobuf:"varint,11,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,12,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	ShowTop int32 `protobuf:"varint,13,opt,name=show_top,json=showTop,proto3" json:"show_top,omitempty"`
	ShowBottom int32 `protobuf:"varint,14,opt,name=show_bottom,json=showBottom,proto3" json:"show_bottom,omitempty"`
}

func (x *LargeCoverV2) Reset() {
	*x = LargeCoverV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LargeCoverV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LargeCoverV2) ProtoMessage() {}

func (x *LargeCoverV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LargeCoverV2.ProtoReflect.Descriptor instead.
func (*LargeCoverV2) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{4}
}

func (x *LargeCoverV2) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LargeCoverV2) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *LargeCoverV2) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *LargeCoverV2) GetCoverRightButton() *Button {
	if x != nil {
		return x.CoverRightButton
	}
	return nil
}

func (x *LargeCoverV2) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *LargeCoverV2) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *LargeCoverV2) GetCoverLeftText_2() string {
	if x != nil {
		return x.CoverLeftText_2
	}
	return ""
}

func (x *LargeCoverV2) GetCoverLeftIcon_2() int32 {
	if x != nil {
		return x.CoverLeftIcon_2
	}
	return 0
}

func (x *LargeCoverV2) GetRcmdReason() string {
	if x != nil {
		return x.RcmdReason
	}
	return ""
}

func (x *LargeCoverV2) GetOfficialIcon() int32 {
	if x != nil {
		return x.OfficialIcon
	}
	return 0
}

func (x *LargeCoverV2) GetCanPlay() int32 {
	if x != nil {
		return x.CanPlay
	}
	return 0
}

func (x *LargeCoverV2) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

func (x *LargeCoverV2) GetShowTop() int32 {
	if x != nil {
		return x.ShowTop
	}
	return 0
}

func (x *LargeCoverV2) GetShowBottom() int32 {
	if x != nil {
		return x.ShowBottom
	}
	return 0
}

type ThreeItemV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	TitleIcon int32 `protobuf:"varint,2,opt,name=title_icon,json=titleIcon,proto3" json:"title_icon,omitempty"`
	MoreUri string `protobuf:"bytes,3,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	MoreText string `protobuf:"bytes,4,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	Items []*ThreeItemV2Item `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ThreeItemV2) Reset() {
	*x = ThreeItemV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreeItemV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreeItemV2) ProtoMessage() {}

func (x *ThreeItemV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreeItemV2.ProtoReflect.Descriptor instead.
func (*ThreeItemV2) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{5}
}

func (x *ThreeItemV2) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ThreeItemV2) GetTitleIcon() int32 {
	if x != nil {
		return x.TitleIcon
	}
	return 0
}

func (x *ThreeItemV2) GetMoreUri() string {
	if x != nil {
		return x.MoreUri
	}
	return ""
}

func (x *ThreeItemV2) GetMoreText() string {
	if x != nil {
		return x.MoreText
	}
	return ""
}

func (x *ThreeItemV2) GetItems() []*ThreeItemV2Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type ThreeItemV2Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverLeftIcon int32 `protobuf:"varint,2,opt,name=cover_left_icon,json=coverLeftIcon,proto3" json:"cover_left_icon,omitempty"`
	DescText_1 string `protobuf:"bytes,3,opt,name=desc_text_1,json=descText1,proto3" json:"desc_text_1,omitempty"`
	DescIcon_1 int32 `protobuf:"varint,4,opt,name=desc_icon_1,json=descIcon1,proto3" json:"desc_icon_1,omitempty"`
	DescText_2 string `protobuf:"bytes,5,opt,name=desc_text_2,json=descText2,proto3" json:"desc_text_2,omitempty"`
	DescIcon_2 int32 `protobuf:"varint,6,opt,name=desc_icon_2,json=descIcon2,proto3" json:"desc_icon_2,omitempty"`
	Badge string `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
}

func (x *ThreeItemV2Item) Reset() {
	*x = ThreeItemV2Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreeItemV2Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreeItemV2Item) ProtoMessage() {}

func (x *ThreeItemV2Item) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreeItemV2Item.ProtoReflect.Descriptor instead.
func (*ThreeItemV2Item) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{6}
}

func (x *ThreeItemV2Item) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ThreeItemV2Item) GetCoverLeftIcon() int32 {
	if x != nil {
		return x.CoverLeftIcon
	}
	return 0
}

func (x *ThreeItemV2Item) GetDescText_1() string {
	if x != nil {
		return x.DescText_1
	}
	return ""
}

func (x *ThreeItemV2Item) GetDescIcon_1() int32 {
	if x != nil {
		return x.DescIcon_1
	}
	return 0
}

func (x *ThreeItemV2Item) GetDescText_2() string {
	if x != nil {
		return x.DescText_2
	}
	return ""
}

func (x *ThreeItemV2Item) GetDescIcon_2() int32 {
	if x != nil {
		return x.DescIcon_2
	}
	return 0
}

func (x *ThreeItemV2Item) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

type SmallCoverV4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverBadge string `protobuf:"bytes,2,opt,name=cover_badge,json=coverBadge,proto3" json:"cover_badge,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	TitleRightText string `protobuf:"bytes,4,opt,name=title_right_text,json=titleRightText,proto3" json:"title_right_text,omitempty"`
	TitleRightPic int32 `protobuf:"varint,5,opt,name=title_right_pic,json=titleRightPic,proto3" json:"title_right_pic,omitempty"`
}

func (x *SmallCoverV4) Reset() {
	*x = SmallCoverV4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallCoverV4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallCoverV4) ProtoMessage() {}

func (x *SmallCoverV4) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallCoverV4.ProtoReflect.Descriptor instead.
func (*SmallCoverV4) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{7}
}

func (x *SmallCoverV4) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmallCoverV4) GetCoverBadge() string {
	if x != nil {
		return x.CoverBadge
	}
	return ""
}

func (x *SmallCoverV4) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SmallCoverV4) GetTitleRightText() string {
	if x != nil {
		return x.TitleRightText
	}
	return ""
}

func (x *SmallCoverV4) GetTitleRightPic() int32 {
	if x != nil {
		return x.TitleRightPic
	}
	return 0
}

type TwoItemV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Items []*TwoItemV2Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TwoItemV2) Reset() {
	*x = TwoItemV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoItemV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoItemV2) ProtoMessage() {}

func (x *TwoItemV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoItemV2.ProtoReflect.Descriptor instead.
func (*TwoItemV2) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{8}
}

func (x *TwoItemV2) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TwoItemV2) GetItems() []*TwoItemV2Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type TwoItemV2Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Badge string `protobuf:"bytes,2,opt,name=badge,proto3" json:"badge,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,3,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,4,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
}

func (x *TwoItemV2Item) Reset() {
	*x = TwoItemV2Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoItemV2Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoItemV2Item) ProtoMessage() {}

func (x *TwoItemV2Item) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoItemV2Item.ProtoReflect.Descriptor instead.
func (*TwoItemV2Item) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{9}
}

func (x *TwoItemV2Item) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TwoItemV2Item) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *TwoItemV2Item) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *TwoItemV2Item) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

type MultiItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	MoreUri string `protobuf:"bytes,2,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	MoreText string `protobuf:"bytes,3,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	Items []*DoubleCards `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MultiItem) Reset() {
	*x = MultiItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiItem) ProtoMessage() {}

func (x *MultiItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiItem.ProtoReflect.Descriptor instead.
func (*MultiItem) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{10}
}

func (x *MultiItem) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MultiItem) GetMoreUri() string {
	if x != nil {
		return x.MoreUri
	}
	return ""
}

func (x *MultiItem) GetMoreText() string {
	if x != nil {
		return x.MoreText
	}
	return ""
}

func (x *MultiItem) GetItems() []*DoubleCards {
	if x != nil {
		return x.Items
	}
	return nil
}

type ThreePicV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	LeftCover string `protobuf:"bytes,2,opt,name=left_cover,json=leftCover,proto3" json:"left_cover,omitempty"`
	RightCover_1 string `protobuf:"bytes,3,opt,name=right_cover_1,json=rightCover1,proto3" json:"right_cover_1,omitempty"`
	RightCover_2 string `protobuf:"bytes,4,opt,name=right_cover_2,json=rightCover2,proto3" json:"right_cover_2,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,5,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,6,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2 string `protobuf:"bytes,7,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2 int32 `protobuf:"varint,8,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3" json:"cover_left_icon_2,omitempty"`
	CoverRightText string `protobuf:"bytes,9,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon int32 `protobuf:"varint,10,opt,name=cover_right_icon,json=coverRightIcon,proto3" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string `protobuf:"bytes,11,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Badge string `protobuf:"bytes,12,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReason string `protobuf:"bytes,13,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Desc string `protobuf:"bytes,14,opt,name=desc,proto3" json:"desc,omitempty"`
	Avatar *Avatar `protobuf:"bytes,15,opt,name=avatar,proto3" json:"avatar,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,16,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
}

func (x *ThreePicV2) Reset() {
	*x = ThreePicV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreePicV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreePicV2) ProtoMessage() {}

func (x *ThreePicV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreePicV2.ProtoReflect.Descriptor instead.
func (*ThreePicV2) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{11}
}

func (x *ThreePicV2) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ThreePicV2) GetLeftCover() string {
	if x != nil {
		return x.LeftCover
	}
	return ""
}

func (x *ThreePicV2) GetRightCover_1() string {
	if x != nil {
		return x.RightCover_1
	}
	return ""
}

func (x *ThreePicV2) GetRightCover_2() string {
	if x != nil {
		return x.RightCover_2
	}
	return ""
}

func (x *ThreePicV2) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *ThreePicV2) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *ThreePicV2) GetCoverLeftText_2() string {
	if x != nil {
		return x.CoverLeftText_2
	}
	return ""
}

func (x *ThreePicV2) GetCoverLeftIcon_2() int32 {
	if x != nil {
		return x.CoverLeftIcon_2
	}
	return 0
}

func (x *ThreePicV2) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *ThreePicV2) GetCoverRightIcon() int32 {
	if x != nil {
		return x.CoverRightIcon
	}
	return 0
}

func (x *ThreePicV2) GetCoverRightBackgroundColor() string {
	if x != nil {
		return x.CoverRightBackgroundColor
	}
	return ""
}

func (x *ThreePicV2) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *ThreePicV2) GetRcmdReason() string {
	if x != nil {
		return x.RcmdReason
	}
	return ""
}

func (x *ThreePicV2) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ThreePicV2) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *ThreePicV2) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

type OnePicV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,2,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2 string `protobuf:"bytes,3,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverRightText string `protobuf:"bytes,4,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon int32 `protobuf:"varint,5,opt,name=cover_right_icon,json=coverRightIcon,proto3" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string `protobuf:"bytes,6,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Badge string `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReason string `protobuf:"bytes,8,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Avatar *Avatar `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,10,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
}

func (x *OnePicV2) Reset() {
	*x = OnePicV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnePicV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnePicV2) ProtoMessage() {}

func (x *OnePicV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnePicV2.ProtoReflect.Descriptor instead.
func (*OnePicV2) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{12}
}

func (x *OnePicV2) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OnePicV2) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *OnePicV2) GetCoverLeftText_2() string {
	if x != nil {
		return x.CoverLeftText_2
	}
	return ""
}

func (x *OnePicV2) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *OnePicV2) GetCoverRightIcon() int32 {
	if x != nil {
		return x.CoverRightIcon
	}
	return 0
}

func (x *OnePicV2) GetCoverRightBackgroundColor() string {
	if x != nil {
		return x.CoverRightBackgroundColor
	}
	return ""
}

func (x *OnePicV2) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *OnePicV2) GetRcmdReason() string {
	if x != nil {
		return x.RcmdReason
	}
	return ""
}

func (x *OnePicV2) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *OnePicV2) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

type LargeCoverV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverGif string `protobuf:"bytes,2,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	Avatar *Avatar `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	TopRcmdReasonStyle *ReasonStyle `protobuf:"bytes,4,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	BottomRcmdReasonStyle *ReasonStyle `protobuf:"bytes,5,opt,name=bottom_rcmd_reason_style,json=bottomRcmdReasonStyle,proto3" json:"bottom_rcmd_reason_style,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,6,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,7,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2 string `protobuf:"bytes,8,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2 int32 `protobuf:"varint,9,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3" json:"cover_left_icon_2,omitempty"`
	CoverRightText string `protobuf:"bytes,10,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	Desc string `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	OfficialIcon int32 `protobuf:"varint,12,opt,name=official_icon,json=officialIcon,proto3" json:"official_icon,omitempty"`
}

func (x *LargeCoverV3) Reset() {
	*x = LargeCoverV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LargeCoverV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LargeCoverV3) ProtoMessage() {}

func (x *LargeCoverV3) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LargeCoverV3.ProtoReflect.Descriptor instead.
func (*LargeCoverV3) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{13}
}

func (x *LargeCoverV3) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LargeCoverV3) GetCoverGif() string {
	if x != nil {
		return x.CoverGif
	}
	return ""
}

func (x *LargeCoverV3) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *LargeCoverV3) GetTopRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.TopRcmdReasonStyle
	}
	return nil
}

func (x *LargeCoverV3) GetBottomRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.BottomRcmdReasonStyle
	}
	return nil
}

func (x *LargeCoverV3) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *LargeCoverV3) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *LargeCoverV3) GetCoverLeftText_2() string {
	if x != nil {
		return x.CoverLeftText_2
	}
	return ""
}

func (x *LargeCoverV3) GetCoverLeftIcon_2() int32 {
	if x != nil {
		return x.CoverLeftIcon_2
	}
	return 0
}

func (x *LargeCoverV3) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *LargeCoverV3) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *LargeCoverV3) GetOfficialIcon() int32 {
	if x != nil {
		return x.OfficialIcon
	}
	return 0
}

type ThreePicV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	LeftCover string `protobuf:"bytes,2,opt,name=left_cover,json=leftCover,proto3" json:"left_cover,omitempty"`
	RightCover_1 string `protobuf:"bytes,3,opt,name=right_cover_1,json=rightCover1,proto3" json:"right_cover_1,omitempty"`
	RightCover_2 string `protobuf:"bytes,4,opt,name=right_cover_2,json=rightCover2,proto3" json:"right_cover_2,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,5,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,6,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2 string `protobuf:"bytes,7,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2 int32 `protobuf:"varint,8,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3" json:"cover_left_icon_2,omitempty"`
	CoverRightText string `protobuf:"bytes,9,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon int32 `protobuf:"varint,10,opt,name=cover_right_icon,json=coverRightIcon,proto3" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string `protobuf:"bytes,11,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Badge string `protobuf:"bytes,12,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,13,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
}

func (x *ThreePicV3) Reset() {
	*x = ThreePicV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreePicV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreePicV3) ProtoMessage() {}

func (x *ThreePicV3) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreePicV3.ProtoReflect.Descriptor instead.
func (*ThreePicV3) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{14}
}

func (x *ThreePicV3) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ThreePicV3) GetLeftCover() string {
	if x != nil {
		return x.LeftCover
	}
	return ""
}

func (x *ThreePicV3) GetRightCover_1() string {
	if x != nil {
		return x.RightCover_1
	}
	return ""
}

func (x *ThreePicV3) GetRightCover_2() string {
	if x != nil {
		return x.RightCover_2
	}
	return ""
}

func (x *ThreePicV3) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *ThreePicV3) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *ThreePicV3) GetCoverLeftText_2() string {
	if x != nil {
		return x.CoverLeftText_2
	}
	return ""
}

func (x *ThreePicV3) GetCoverLeftIcon_2() int32 {
	if x != nil {
		return x.CoverLeftIcon_2
	}
	return 0
}

func (x *ThreePicV3) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *ThreePicV3) GetCoverRightIcon() int32 {
	if x != nil {
		return x.CoverRightIcon
	}
	return 0
}

func (x *ThreePicV3) GetCoverRightBackgroundColor() string {
	if x != nil {
		return x.CoverRightBackgroundColor
	}
	return ""
}

func (x *ThreePicV3) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *ThreePicV3) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

type OnePicV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverRightText string `protobuf:"bytes,4,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon int32 `protobuf:"varint,5,opt,name=cover_right_icon,json=coverRightIcon,proto3" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string `protobuf:"bytes,6,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Badge string `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,8,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
}

func (x *OnePicV3) Reset() {
	*x = OnePicV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnePicV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnePicV3) ProtoMessage() {}

func (x *OnePicV3) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnePicV3.ProtoReflect.Descriptor instead.
func (*OnePicV3) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{15}
}

func (x *OnePicV3) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OnePicV3) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *OnePicV3) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *OnePicV3) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *OnePicV3) GetCoverRightIcon() int32 {
	if x != nil {
		return x.CoverRightIcon
	}
	return 0
}

func (x *OnePicV3) GetCoverRightBackgroundColor() string {
	if x != nil {
		return x.CoverRightBackgroundColor
	}
	return ""
}

func (x *OnePicV3) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *OnePicV3) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

type SmallCoverV7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *SmallCoverV7) Reset() {
	*x = SmallCoverV7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallCoverV7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallCoverV7) ProtoMessage() {}

func (x *SmallCoverV7) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallCoverV7.ProtoReflect.Descriptor instead.
func (*SmallCoverV7) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{16}
}

func (x *SmallCoverV7) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmallCoverV7) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type SmallCoverV9 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2 string `protobuf:"bytes,4,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2 int32 `protobuf:"varint,5,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3" json:"cover_left_icon_2,omitempty"`
	CoverRightText string `protobuf:"bytes,6,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon int32 `protobuf:"varint,7,opt,name=cover_right_icon,json=coverRightIcon,proto3" json:"cover_right_icon,omitempty"`
	CanPlay int32 `protobuf:"varint,8,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,9,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	Up *Up `protobuf:"bytes,10,opt,name=up,proto3" json:"up,omitempty"`
	LeftCoverBadgeStyle *ReasonStyle `protobuf:"bytes,11,opt,name=left_cover_badge_style,json=leftCoverBadgeStyle,proto3" json:"left_cover_badge_style,omitempty"`
	LeftBottomRcmdReasonStyle *ReasonStyle `protobuf:"bytes,12,opt,name=left_bottom_rcmd_reason_style,json=leftBottomRcmdReasonStyle,proto3" json:"left_bottom_rcmd_reason_style,omitempty"`
}

func (x *SmallCoverV9) Reset() {
	*x = SmallCoverV9{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallCoverV9) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallCoverV9) ProtoMessage() {}

func (x *SmallCoverV9) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallCoverV9.ProtoReflect.Descriptor instead.
func (*SmallCoverV9) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{17}
}

func (x *SmallCoverV9) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmallCoverV9) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *SmallCoverV9) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *SmallCoverV9) GetCoverLeftText_2() string {
	if x != nil {
		return x.CoverLeftText_2
	}
	return ""
}

func (x *SmallCoverV9) GetCoverLeftIcon_2() int32 {
	if x != nil {
		return x.CoverLeftIcon_2
	}
	return 0
}

func (x *SmallCoverV9) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *SmallCoverV9) GetCoverRightIcon() int32 {
	if x != nil {
		return x.CoverRightIcon
	}
	return 0
}

func (x *SmallCoverV9) GetCanPlay() int32 {
	if x != nil {
		return x.CanPlay
	}
	return 0
}

func (x *SmallCoverV9) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

func (x *SmallCoverV9) GetUp() *Up {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *SmallCoverV9) GetLeftCoverBadgeStyle() *ReasonStyle {
	if x != nil {
		return x.LeftCoverBadgeStyle
	}
	return nil
}

func (x *SmallCoverV9) GetLeftBottomRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.LeftBottomRcmdReasonStyle
	}
	return nil
}

type SmallCoverConvergeV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverLeftText_1 string `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1 int32 `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2 string `protobuf:"bytes,4,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2 int32 `protobuf:"varint,5,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3" json:"cover_left_icon_2,omitempty"`
	CoverRightText string `protobuf:"bytes,6,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightTopText string `protobuf:"bytes,7,opt,name=cover_right_top_text,json=coverRightTopText,proto3" json:"cover_right_top_text,omitempty"`
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,8,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	RcmdReasonStyleV2 *ReasonStyle `protobuf:"bytes,9,opt,name=rcmd_reason_style_v2,json=rcmdReasonStyleV2,proto3" json:"rcmd_reason_style_v2,omitempty"`
}

func (x *SmallCoverConvergeV2) Reset() {
	*x = SmallCoverConvergeV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallCoverConvergeV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallCoverConvergeV2) ProtoMessage() {}

func (x *SmallCoverConvergeV2) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallCoverConvergeV2.ProtoReflect.Descriptor instead.
func (*SmallCoverConvergeV2) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{18}
}

func (x *SmallCoverConvergeV2) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmallCoverConvergeV2) GetCoverLeftText_1() string {
	if x != nil {
		return x.CoverLeftText_1
	}
	return ""
}

func (x *SmallCoverConvergeV2) GetCoverLeftIcon_1() int32 {
	if x != nil {
		return x.CoverLeftIcon_1
	}
	return 0
}

func (x *SmallCoverConvergeV2) GetCoverLeftText_2() string {
	if x != nil {
		return x.CoverLeftText_2
	}
	return ""
}

func (x *SmallCoverConvergeV2) GetCoverLeftIcon_2() int32 {
	if x != nil {
		return x.CoverLeftIcon_2
	}
	return 0
}

func (x *SmallCoverConvergeV2) GetCoverRightText() string {
	if x != nil {
		return x.CoverRightText
	}
	return ""
}

func (x *SmallCoverConvergeV2) GetCoverRightTopText() string {
	if x != nil {
		return x.CoverRightTopText
	}
	return ""
}

func (x *SmallCoverConvergeV2) GetRcmdReasonStyle() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle
	}
	return nil
}

func (x *SmallCoverConvergeV2) GetRcmdReasonStyleV2() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyleV2
	}
	return nil
}

type SmallChannelSpecial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *Base `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	BgCover string `protobuf:"bytes,2,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	Desc_1 string `protobuf:"bytes,3,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	Desc_2 string `protobuf:"bytes,4,opt,name=desc_2,json=desc2,proto3" json:"desc_2,omitempty"`
	Badge string `protobuf:"bytes,5,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReasonStyle_2 *ReasonStyle `protobuf:"bytes,6,opt,name=rcmd_reason_style_2,json=rcmdReasonStyle2,proto3" json:"rcmd_reason_style_2,omitempty"`
}

func (x *SmallChannelSpecial) Reset() {
	*x = SmallChannelSpecial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_card_v1_double_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallChannelSpecial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallChannelSpecial) ProtoMessage() {}

func (x *SmallChannelSpecial) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_card_v1_double_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallChannelSpecial.ProtoReflect.Descriptor instead.
func (*SmallChannelSpecial) Descriptor() ([]byte, []int) {
	return file_bilibili_app_card_v1_double_proto_rawDescGZIP(), []int{19}
}

func (x *SmallChannelSpecial) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmallChannelSpecial) GetBgCover() string {
	if x != nil {
		return x.BgCover
	}
	return ""
}

func (x *SmallChannelSpecial) GetDesc_1() string {
	if x != nil {
		return x.Desc_1
	}
	return ""
}

func (x *SmallChannelSpecial) GetDesc_2() string {
	if x != nil {
		return x.Desc_2
	}
	return ""
}

func (x *SmallChannelSpecial) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *SmallChannelSpecial) GetRcmdReasonStyle_2() *ReasonStyle {
	if x != nil {
		return x.RcmdReasonStyle_2
	}
	return nil
}

var File_bilibili_app_card_v1_double_proto protoreflect.FileDescriptor

var file_bilibili_app_card_v1_double_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63,
	0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a,
	0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0e,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x32, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x5f,
	0x70, 0x69, 0x63, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x50, 0x69, 0x63, 0x56, 0x32, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x6e, 0x65, 0x50, 0x69, 0x63, 0x56, 0x32, 0x12, 0x44, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65,
	0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x69, 0x63, 0x56, 0x32,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x50, 0x69, 0x63, 0x56, 0x32, 0x42, 0x06,
	0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0xfe, 0x06, 0x0a, 0x0c, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x67, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x47, 0x69, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x6c,
	0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x6c, 0x75, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x29,
	0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x32, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x63, 0x6d,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x52, 0x0a, 0x14, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x11, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x56, 0x32, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0a, 0x6c, 0x69, 0x6b,
	0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0xac, 0x03, 0x0a, 0x0c, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x33, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x63, 0x6d, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x22, 0xee, 0x04, 0x0a, 0x0c, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x10,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x31,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66,
	0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x32, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x4d, 0x0a,
	0x11, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x22, 0xd1, 0x01, 0x0a, 0x0b, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x72, 0x65, 0x55,
	0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x3b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x32, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xff, 0x01, 0x0a,
	0x0f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x32, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x73, 0x63, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x65, 0x73, 0x63, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x73, 0x63, 0x54, 0x65, 0x78, 0x74, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x65, 0x73, 0x63, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x22, 0xc5,
	0x01, 0x0a, 0x0c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x34, 0x12,
	0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x69, 0x63, 0x22, 0x76, 0x0a, 0x09, 0x54, 0x77, 0x6f, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x77, 0x6f, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xab,
	0x01, 0x0a, 0x0d, 0x54, 0x77, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x32, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x22, 0xac, 0x01, 0x0a,
	0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x72, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb4, 0x05, 0x0a, 0x0a,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x69, 0x63, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x32, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x29, 0x0a, 0x11,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x32, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x63, 0x6d, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x08, 0x4f, 0x6e, 0x65, 0x50, 0x69, 0x63, 0x56, 0x32, 0x12,
	0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x63, 0x6d, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xd2, 0x04, 0x0a, 0x0c, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x33, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x67, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x47, 0x69, 0x66, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x54, 0x0a, 0x15, 0x74, 0x6f,
	0x70, 0x5f, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x12, 0x74, 0x6f,
	0x70, 0x52, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x5a, 0x0a, 0x18, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x63, 0x6d, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x15, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x63, 0x6d,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x11,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f,
	0x6e, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x32, 0x12, 0x29, 0x0a,
	0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c,
	0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0xc9, 0x04, 0x0a, 0x0a,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x69, 0x63, 0x56, 0x33, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x32, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x29, 0x0a, 0x11,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x32, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x63, 0x6d, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x08, 0x4f, 0x6e, 0x65, 0x50,
	0x69, 0x63, 0x56, 0x33, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12,
	0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x1c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x0c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x56, 0x37, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x8f, 0x05, 0x0a, 0x0c, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x39, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12,
	0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x32, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x32, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74,
	0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x52, 0x02, 0x75, 0x70, 0x12, 0x56, 0x0a,
	0x16, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x1d, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x19, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x63, 0x6d, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xf0, 0x03, 0x0a, 0x14, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67,
	0x65, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x29,
	0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x32, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x63,
	0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x72, 0x63, 0x6d,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x76,
	0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x11, 0x72, 0x63, 0x6d, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x56, 0x32, 0x22, 0xf6, 0x01,
	0x0a, 0x13, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x65, 0x73, 0x63, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x63, 0x5f,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x73, 0x63, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x72, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x10, 0x72, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x32, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x58, 0x69, 0x61, 0x6f, 0x4d, 0x69, 0x6b, 0x75, 0x30, 0x31, 0x2f,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70,
	0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bilibili_app_card_v1_double_proto_rawDescOnce sync.Once
	file_bilibili_app_card_v1_double_proto_rawDescData = file_bilibili_app_card_v1_double_proto_rawDesc
)

func file_bilibili_app_card_v1_double_proto_rawDescGZIP() []byte {
	file_bilibili_app_card_v1_double_proto_rawDescOnce.Do(func() {
		file_bilibili_app_card_v1_double_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_app_card_v1_double_proto_rawDescData)
	})
	return file_bilibili_app_card_v1_double_proto_rawDescData
}

var file_bilibili_app_card_v1_double_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_bilibili_app_card_v1_double_proto_goTypes = []interface{}{
	(*DoubleCards)(nil),          // 0: bilibili.app.card.v1.DoubleCards
	(*SmallCoverV2)(nil),         // 1: bilibili.app.card.v1.SmallCoverV2
	(*SmallCoverV3)(nil),         // 2: bilibili.app.card.v1.SmallCoverV3
	(*MiddleCoverV2)(nil),        // 3: bilibili.app.card.v1.MiddleCoverV2
	(*LargeCoverV2)(nil),         // 4: bilibili.app.card.v1.LargeCoverV2
	(*ThreeItemV2)(nil),          // 5: bilibili.app.card.v1.ThreeItemV2
	(*ThreeItemV2Item)(nil),      // 6: bilibili.app.card.v1.ThreeItemV2Item
	(*SmallCoverV4)(nil),         // 7: bilibili.app.card.v1.SmallCoverV4
	(*TwoItemV2)(nil),            // 8: bilibili.app.card.v1.TwoItemV2
	(*TwoItemV2Item)(nil),        // 9: bilibili.app.card.v1.TwoItemV2Item
	(*MultiItem)(nil),            // 10: bilibili.app.card.v1.MultiItem
	(*ThreePicV2)(nil),           // 11: bilibili.app.card.v1.ThreePicV2
	(*OnePicV2)(nil),             // 12: bilibili.app.card.v1.OnePicV2
	(*LargeCoverV3)(nil),         // 13: bilibili.app.card.v1.LargeCoverV3
	(*ThreePicV3)(nil),           // 14: bilibili.app.card.v1.ThreePicV3
	(*OnePicV3)(nil),             // 15: bilibili.app.card.v1.OnePicV3
	(*SmallCoverV7)(nil),         // 16: bilibili.app.card.v1.SmallCoverV7
	(*SmallCoverV9)(nil),         // 17: bilibili.app.card.v1.SmallCoverV9
	(*SmallCoverConvergeV2)(nil), // 18: bilibili.app.card.v1.SmallCoverConvergeV2
	(*SmallChannelSpecial)(nil),  // 19: bilibili.app.card.v1.SmallChannelSpecial
	(*Base)(nil),                 // 20: bilibili.app.card.v1.Base
	(*Avatar)(nil),               // 21: bilibili.app.card.v1.Avatar
	(*ReasonStyle)(nil),          // 22: bilibili.app.card.v1.ReasonStyle
	(*LikeButton)(nil),           // 23: bilibili.app.card.v1.LikeButton
	(*Button)(nil),               // 24: bilibili.app.card.v1.Button
	(*Up)(nil),                   // 25: bilibili.app.card.v1.Up
}
var file_bilibili_app_card_v1_double_proto_depIdxs = []int32{
	1,  // 0: bilibili.app.card.v1.DoubleCards.small_cover_v2:type_name -> bilibili.app.card.v1.SmallCoverV2
	12, // 1: bilibili.app.card.v1.DoubleCards.one_pic_v2:type_name -> bilibili.app.card.v1.OnePicV2
	11, // 2: bilibili.app.card.v1.DoubleCards.three_pic_v2:type_name -> bilibili.app.card.v1.ThreePicV2
	20, // 3: bilibili.app.card.v1.SmallCoverV2.base:type_name -> bilibili.app.card.v1.Base
	21, // 4: bilibili.app.card.v1.SmallCoverV2.avatar:type_name -> bilibili.app.card.v1.Avatar
	22, // 5: bilibili.app.card.v1.SmallCoverV2.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	22, // 6: bilibili.app.card.v1.SmallCoverV2.rcmd_reason_style_v2:type_name -> bilibili.app.card.v1.ReasonStyle
	23, // 7: bilibili.app.card.v1.SmallCoverV2.like_button:type_name -> bilibili.app.card.v1.LikeButton
	20, // 8: bilibili.app.card.v1.SmallCoverV3.base:type_name -> bilibili.app.card.v1.Base
	21, // 9: bilibili.app.card.v1.SmallCoverV3.avatar:type_name -> bilibili.app.card.v1.Avatar
	24, // 10: bilibili.app.card.v1.SmallCoverV3.cover_right_button:type_name -> bilibili.app.card.v1.Button
	22, // 11: bilibili.app.card.v1.SmallCoverV3.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 12: bilibili.app.card.v1.MiddleCoverV2.base:type_name -> bilibili.app.card.v1.Base
	20, // 13: bilibili.app.card.v1.LargeCoverV2.base:type_name -> bilibili.app.card.v1.Base
	21, // 14: bilibili.app.card.v1.LargeCoverV2.avatar:type_name -> bilibili.app.card.v1.Avatar
	24, // 15: bilibili.app.card.v1.LargeCoverV2.cover_right_button:type_name -> bilibili.app.card.v1.Button
	22, // 16: bilibili.app.card.v1.LargeCoverV2.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 17: bilibili.app.card.v1.ThreeItemV2.base:type_name -> bilibili.app.card.v1.Base
	6,  // 18: bilibili.app.card.v1.ThreeItemV2.items:type_name -> bilibili.app.card.v1.ThreeItemV2Item
	20, // 19: bilibili.app.card.v1.ThreeItemV2Item.base:type_name -> bilibili.app.card.v1.Base
	20, // 20: bilibili.app.card.v1.SmallCoverV4.base:type_name -> bilibili.app.card.v1.Base
	20, // 21: bilibili.app.card.v1.TwoItemV2.base:type_name -> bilibili.app.card.v1.Base
	9,  // 22: bilibili.app.card.v1.TwoItemV2.items:type_name -> bilibili.app.card.v1.TwoItemV2Item
	20, // 23: bilibili.app.card.v1.TwoItemV2Item.base:type_name -> bilibili.app.card.v1.Base
	20, // 24: bilibili.app.card.v1.MultiItem.base:type_name -> bilibili.app.card.v1.Base
	0,  // 25: bilibili.app.card.v1.MultiItem.items:type_name -> bilibili.app.card.v1.DoubleCards
	20, // 26: bilibili.app.card.v1.ThreePicV2.base:type_name -> bilibili.app.card.v1.Base
	21, // 27: bilibili.app.card.v1.ThreePicV2.avatar:type_name -> bilibili.app.card.v1.Avatar
	22, // 28: bilibili.app.card.v1.ThreePicV2.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 29: bilibili.app.card.v1.OnePicV2.base:type_name -> bilibili.app.card.v1.Base
	21, // 30: bilibili.app.card.v1.OnePicV2.avatar:type_name -> bilibili.app.card.v1.Avatar
	22, // 31: bilibili.app.card.v1.OnePicV2.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 32: bilibili.app.card.v1.LargeCoverV3.base:type_name -> bilibili.app.card.v1.Base
	21, // 33: bilibili.app.card.v1.LargeCoverV3.avatar:type_name -> bilibili.app.card.v1.Avatar
	22, // 34: bilibili.app.card.v1.LargeCoverV3.top_rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	22, // 35: bilibili.app.card.v1.LargeCoverV3.bottom_rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 36: bilibili.app.card.v1.ThreePicV3.base:type_name -> bilibili.app.card.v1.Base
	22, // 37: bilibili.app.card.v1.ThreePicV3.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 38: bilibili.app.card.v1.OnePicV3.base:type_name -> bilibili.app.card.v1.Base
	22, // 39: bilibili.app.card.v1.OnePicV3.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 40: bilibili.app.card.v1.SmallCoverV7.base:type_name -> bilibili.app.card.v1.Base
	20, // 41: bilibili.app.card.v1.SmallCoverV9.base:type_name -> bilibili.app.card.v1.Base
	22, // 42: bilibili.app.card.v1.SmallCoverV9.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	25, // 43: bilibili.app.card.v1.SmallCoverV9.up:type_name -> bilibili.app.card.v1.Up
	22, // 44: bilibili.app.card.v1.SmallCoverV9.left_cover_badge_style:type_name -> bilibili.app.card.v1.ReasonStyle
	22, // 45: bilibili.app.card.v1.SmallCoverV9.left_bottom_rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 46: bilibili.app.card.v1.SmallCoverConvergeV2.base:type_name -> bilibili.app.card.v1.Base
	22, // 47: bilibili.app.card.v1.SmallCoverConvergeV2.rcmd_reason_style:type_name -> bilibili.app.card.v1.ReasonStyle
	22, // 48: bilibili.app.card.v1.SmallCoverConvergeV2.rcmd_reason_style_v2:type_name -> bilibili.app.card.v1.ReasonStyle
	20, // 49: bilibili.app.card.v1.SmallChannelSpecial.base:type_name -> bilibili.app.card.v1.Base
	22, // 50: bilibili.app.card.v1.SmallChannelSpecial.rcmd_reason_style_2:type_name -> bilibili.app.card.v1.ReasonStyle
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_bilibili_app_card_v1_double_proto_init() }
func file_bilibili_app_card_v1_double_proto_init() {
	if File_bilibili_app_card_v1_double_proto != nil {
		return
	}
	file_bilibili_app_card_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bilibili_app_card_v1_double_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallCoverV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallCoverV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddleCoverV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LargeCoverV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreeItemV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreeItemV2Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallCoverV4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoItemV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoItemV2Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreePicV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnePicV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LargeCoverV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreePicV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnePicV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallCoverV7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallCoverV9); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallCoverConvergeV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_card_v1_double_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallChannelSpecial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bilibili_app_card_v1_double_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DoubleCards_SmallCoverV2)(nil),
		(*DoubleCards_OnePicV2)(nil),
		(*DoubleCards_ThreePicV2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_app_card_v1_double_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bilibili_app_card_v1_double_proto_goTypes,
		DependencyIndexes: file_bilibili_app_card_v1_double_proto_depIdxs,
		MessageInfos:      file_bilibili_app_card_v1_double_proto_msgTypes,
	}.Build()
	File_bilibili_app_card_v1_double_proto = out.File
	file_bilibili_app_card_v1_double_proto_rawDesc = nil
	file_bilibili_app_card_v1_double_proto_goTypes = nil
	file_bilibili_app_card_v1_double_proto_depIdxs = nil
}
