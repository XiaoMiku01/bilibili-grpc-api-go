// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/app/listener/v1/listener.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Listener_Ping_FullMethodName                = "/bilibili.app.listener.v1.Listener/Ping"
	Listener_PlayUrl_FullMethodName             = "/bilibili.app.listener.v1.Listener/PlayUrl"
	Listener_BkarcDetails_FullMethodName        = "/bilibili.app.listener.v1.Listener/BkarcDetails"
	Listener_Playlist_FullMethodName            = "/bilibili.app.listener.v1.Listener/Playlist"
	Listener_PlaylistAdd_FullMethodName         = "/bilibili.app.listener.v1.Listener/PlaylistAdd"
	Listener_PlaylistDel_FullMethodName         = "/bilibili.app.listener.v1.Listener/PlaylistDel"
	Listener_RcmdPlaylist_FullMethodName        = "/bilibili.app.listener.v1.Listener/RcmdPlaylist"
	Listener_PlayHistory_FullMethodName         = "/bilibili.app.listener.v1.Listener/PlayHistory"
	Listener_PlayHistoryAdd_FullMethodName      = "/bilibili.app.listener.v1.Listener/PlayHistoryAdd"
	Listener_PlayHistoryDel_FullMethodName      = "/bilibili.app.listener.v1.Listener/PlayHistoryDel"
	Listener_PlayActionReport_FullMethodName    = "/bilibili.app.listener.v1.Listener/PlayActionReport"
	Listener_TripleLike_FullMethodName          = "/bilibili.app.listener.v1.Listener/TripleLike"
	Listener_ThumbUp_FullMethodName             = "/bilibili.app.listener.v1.Listener/ThumbUp"
	Listener_CoinAdd_FullMethodName             = "/bilibili.app.listener.v1.Listener/CoinAdd"
	Listener_FavItemAdd_FullMethodName          = "/bilibili.app.listener.v1.Listener/FavItemAdd"
	Listener_FavItemDel_FullMethodName          = "/bilibili.app.listener.v1.Listener/FavItemDel"
	Listener_FavItemBatch_FullMethodName        = "/bilibili.app.listener.v1.Listener/FavItemBatch"
	Listener_FavoredInAnyFolders_FullMethodName = "/bilibili.app.listener.v1.Listener/FavoredInAnyFolders"
	Listener_FavFolderList_FullMethodName       = "/bilibili.app.listener.v1.Listener/FavFolderList"
	Listener_FavFolderDetail_FullMethodName     = "/bilibili.app.listener.v1.Listener/FavFolderDetail"
	Listener_FavFolderCreate_FullMethodName     = "/bilibili.app.listener.v1.Listener/FavFolderCreate"
	Listener_FavFolderDelete_FullMethodName     = "/bilibili.app.listener.v1.Listener/FavFolderDelete"
	Listener_PickFeed_FullMethodName            = "/bilibili.app.listener.v1.Listener/PickFeed"
	Listener_PickCardDetail_FullMethodName      = "/bilibili.app.listener.v1.Listener/PickCardDetail"
	Listener_Medialist_FullMethodName           = "/bilibili.app.listener.v1.Listener/Medialist"
	Listener_Event_FullMethodName               = "/bilibili.app.listener.v1.Listener/Event"
)

// ListenerClient is the client API for Listener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListenerClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// 获取音频URL
	PlayUrl(ctx context.Context, in *PlayURLReq, opts ...grpc.CallOption) (*PlayURLResp, error)
	BkarcDetails(ctx context.Context, in *BKArcDetailsReq, opts ...grpc.CallOption) (*BKArcDetailsResp, error)
	Playlist(ctx context.Context, in *PlaylistReq, opts ...grpc.CallOption) (*PlaylistResp, error)
	PlaylistAdd(ctx context.Context, in *PlaylistAddReq, opts ...grpc.CallOption) (*empty.Empty, error)
	PlaylistDel(ctx context.Context, in *PlaylistDelReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 推荐列表
	RcmdPlaylist(ctx context.Context, in *RcmdPlaylistReq, opts ...grpc.CallOption) (*RcmdPlaylistResp, error)
	PlayHistory(ctx context.Context, in *PlayHistoryReq, opts ...grpc.CallOption) (*PlayHistoryResp, error)
	// 添加历史记录
	PlayHistoryAdd(ctx context.Context, in *PlayHistoryAddReq, opts ...grpc.CallOption) (*empty.Empty, error)
	PlayHistoryDel(ctx context.Context, in *PlayHistoryDelReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 播放上报
	PlayActionReport(ctx context.Context, in *PlayActionReportReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 三联
	TripleLike(ctx context.Context, in *TripleLikeReq, opts ...grpc.CallOption) (*TripleLikeResp, error)
	// 点赞
	ThumbUp(ctx context.Context, in *ThumbUpReq, opts ...grpc.CallOption) (*ThumbUpResp, error)
	// 投币
	CoinAdd(ctx context.Context, in *CoinAddReq, opts ...grpc.CallOption) (*CoinAddResp, error)
	FavItemAdd(ctx context.Context, in *FavItemAddReq, opts ...grpc.CallOption) (*FavItemAddResp, error)
	FavItemDel(ctx context.Context, in *FavItemDelReq, opts ...grpc.CallOption) (*FavItemDelResp, error)
	// 批量处理收藏
	FavItemBatch(ctx context.Context, in *FavItemBatchReq, opts ...grpc.CallOption) (*FavItemBatchResp, error)
	FavoredInAnyFolders(ctx context.Context, in *FavoredInAnyFoldersReq, opts ...grpc.CallOption) (*FavoredInAnyFoldersResp, error)
	// 用户收藏夹列表
	FavFolderList(ctx context.Context, in *FavFolderListReq, opts ...grpc.CallOption) (*FavFolderListResp, error)
	// 收藏夹详细信息
	FavFolderDetail(ctx context.Context, in *FavFolderDetailReq, opts ...grpc.CallOption) (*FavFolderDetailResp, error)
	// 创建收藏夹
	FavFolderCreate(ctx context.Context, in *FavFolderCreateReq, opts ...grpc.CallOption) (*FavFolderCreateResp, error)
	FavFolderDelete(ctx context.Context, in *FavFolderDeleteReq, opts ...grpc.CallOption) (*FavFolderDeleteResp, error)
	// 每日播单列表
	PickFeed(ctx context.Context, in *PickFeedReq, opts ...grpc.CallOption) (*PickFeedResp, error)
	// 每日播单详情
	PickCardDetail(ctx context.Context, in *PickCardDetailReq, opts ...grpc.CallOption) (*PickCardDetailResp, error)
	Medialist(ctx context.Context, in *MedialistReq, opts ...grpc.CallOption) (*MedialistResp, error)
	Event(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (*EventResp, error)
}

type listenerClient struct {
	cc grpc.ClientConnInterface
}

func NewListenerClient(cc grpc.ClientConnInterface) ListenerClient {
	return &listenerClient{cc}
}

func (c *listenerClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Listener_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayUrl(ctx context.Context, in *PlayURLReq, opts ...grpc.CallOption) (*PlayURLResp, error) {
	out := new(PlayURLResp)
	err := c.cc.Invoke(ctx, Listener_PlayUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) BkarcDetails(ctx context.Context, in *BKArcDetailsReq, opts ...grpc.CallOption) (*BKArcDetailsResp, error) {
	out := new(BKArcDetailsResp)
	err := c.cc.Invoke(ctx, Listener_BkarcDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) Playlist(ctx context.Context, in *PlaylistReq, opts ...grpc.CallOption) (*PlaylistResp, error) {
	out := new(PlaylistResp)
	err := c.cc.Invoke(ctx, Listener_Playlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlaylistAdd(ctx context.Context, in *PlaylistAddReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Listener_PlaylistAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlaylistDel(ctx context.Context, in *PlaylistDelReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Listener_PlaylistDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) RcmdPlaylist(ctx context.Context, in *RcmdPlaylistReq, opts ...grpc.CallOption) (*RcmdPlaylistResp, error) {
	out := new(RcmdPlaylistResp)
	err := c.cc.Invoke(ctx, Listener_RcmdPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayHistory(ctx context.Context, in *PlayHistoryReq, opts ...grpc.CallOption) (*PlayHistoryResp, error) {
	out := new(PlayHistoryResp)
	err := c.cc.Invoke(ctx, Listener_PlayHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayHistoryAdd(ctx context.Context, in *PlayHistoryAddReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Listener_PlayHistoryAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayHistoryDel(ctx context.Context, in *PlayHistoryDelReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Listener_PlayHistoryDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayActionReport(ctx context.Context, in *PlayActionReportReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Listener_PlayActionReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) TripleLike(ctx context.Context, in *TripleLikeReq, opts ...grpc.CallOption) (*TripleLikeResp, error) {
	out := new(TripleLikeResp)
	err := c.cc.Invoke(ctx, Listener_TripleLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) ThumbUp(ctx context.Context, in *ThumbUpReq, opts ...grpc.CallOption) (*ThumbUpResp, error) {
	out := new(ThumbUpResp)
	err := c.cc.Invoke(ctx, Listener_ThumbUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) CoinAdd(ctx context.Context, in *CoinAddReq, opts ...grpc.CallOption) (*CoinAddResp, error) {
	out := new(CoinAddResp)
	err := c.cc.Invoke(ctx, Listener_CoinAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavItemAdd(ctx context.Context, in *FavItemAddReq, opts ...grpc.CallOption) (*FavItemAddResp, error) {
	out := new(FavItemAddResp)
	err := c.cc.Invoke(ctx, Listener_FavItemAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavItemDel(ctx context.Context, in *FavItemDelReq, opts ...grpc.CallOption) (*FavItemDelResp, error) {
	out := new(FavItemDelResp)
	err := c.cc.Invoke(ctx, Listener_FavItemDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavItemBatch(ctx context.Context, in *FavItemBatchReq, opts ...grpc.CallOption) (*FavItemBatchResp, error) {
	out := new(FavItemBatchResp)
	err := c.cc.Invoke(ctx, Listener_FavItemBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavoredInAnyFolders(ctx context.Context, in *FavoredInAnyFoldersReq, opts ...grpc.CallOption) (*FavoredInAnyFoldersResp, error) {
	out := new(FavoredInAnyFoldersResp)
	err := c.cc.Invoke(ctx, Listener_FavoredInAnyFolders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavFolderList(ctx context.Context, in *FavFolderListReq, opts ...grpc.CallOption) (*FavFolderListResp, error) {
	out := new(FavFolderListResp)
	err := c.cc.Invoke(ctx, Listener_FavFolderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavFolderDetail(ctx context.Context, in *FavFolderDetailReq, opts ...grpc.CallOption) (*FavFolderDetailResp, error) {
	out := new(FavFolderDetailResp)
	err := c.cc.Invoke(ctx, Listener_FavFolderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavFolderCreate(ctx context.Context, in *FavFolderCreateReq, opts ...grpc.CallOption) (*FavFolderCreateResp, error) {
	out := new(FavFolderCreateResp)
	err := c.cc.Invoke(ctx, Listener_FavFolderCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavFolderDelete(ctx context.Context, in *FavFolderDeleteReq, opts ...grpc.CallOption) (*FavFolderDeleteResp, error) {
	out := new(FavFolderDeleteResp)
	err := c.cc.Invoke(ctx, Listener_FavFolderDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PickFeed(ctx context.Context, in *PickFeedReq, opts ...grpc.CallOption) (*PickFeedResp, error) {
	out := new(PickFeedResp)
	err := c.cc.Invoke(ctx, Listener_PickFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PickCardDetail(ctx context.Context, in *PickCardDetailReq, opts ...grpc.CallOption) (*PickCardDetailResp, error) {
	out := new(PickCardDetailResp)
	err := c.cc.Invoke(ctx, Listener_PickCardDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) Medialist(ctx context.Context, in *MedialistReq, opts ...grpc.CallOption) (*MedialistResp, error) {
	out := new(MedialistResp)
	err := c.cc.Invoke(ctx, Listener_Medialist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) Event(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (*EventResp, error) {
	out := new(EventResp)
	err := c.cc.Invoke(ctx, Listener_Event_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerServer is the server API for Listener service.
// All implementations must embed UnimplementedListenerServer
// for forward compatibility
type ListenerServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// 获取音频URL
	PlayUrl(context.Context, *PlayURLReq) (*PlayURLResp, error)
	BkarcDetails(context.Context, *BKArcDetailsReq) (*BKArcDetailsResp, error)
	Playlist(context.Context, *PlaylistReq) (*PlaylistResp, error)
	PlaylistAdd(context.Context, *PlaylistAddReq) (*empty.Empty, error)
	PlaylistDel(context.Context, *PlaylistDelReq) (*empty.Empty, error)
	// 推荐列表
	RcmdPlaylist(context.Context, *RcmdPlaylistReq) (*RcmdPlaylistResp, error)
	PlayHistory(context.Context, *PlayHistoryReq) (*PlayHistoryResp, error)
	// 添加历史记录
	PlayHistoryAdd(context.Context, *PlayHistoryAddReq) (*empty.Empty, error)
	PlayHistoryDel(context.Context, *PlayHistoryDelReq) (*empty.Empty, error)
	// 播放上报
	PlayActionReport(context.Context, *PlayActionReportReq) (*empty.Empty, error)
	// 三联
	TripleLike(context.Context, *TripleLikeReq) (*TripleLikeResp, error)
	// 点赞
	ThumbUp(context.Context, *ThumbUpReq) (*ThumbUpResp, error)
	// 投币
	CoinAdd(context.Context, *CoinAddReq) (*CoinAddResp, error)
	FavItemAdd(context.Context, *FavItemAddReq) (*FavItemAddResp, error)
	FavItemDel(context.Context, *FavItemDelReq) (*FavItemDelResp, error)
	// 批量处理收藏
	FavItemBatch(context.Context, *FavItemBatchReq) (*FavItemBatchResp, error)
	FavoredInAnyFolders(context.Context, *FavoredInAnyFoldersReq) (*FavoredInAnyFoldersResp, error)
	// 用户收藏夹列表
	FavFolderList(context.Context, *FavFolderListReq) (*FavFolderListResp, error)
	// 收藏夹详细信息
	FavFolderDetail(context.Context, *FavFolderDetailReq) (*FavFolderDetailResp, error)
	// 创建收藏夹
	FavFolderCreate(context.Context, *FavFolderCreateReq) (*FavFolderCreateResp, error)
	FavFolderDelete(context.Context, *FavFolderDeleteReq) (*FavFolderDeleteResp, error)
	// 每日播单列表
	PickFeed(context.Context, *PickFeedReq) (*PickFeedResp, error)
	// 每日播单详情
	PickCardDetail(context.Context, *PickCardDetailReq) (*PickCardDetailResp, error)
	Medialist(context.Context, *MedialistReq) (*MedialistResp, error)
	Event(context.Context, *EventReq) (*EventResp, error)
	mustEmbedUnimplementedListenerServer()
}

// UnimplementedListenerServer must be embedded to have forward compatible implementations.
type UnimplementedListenerServer struct {
}

func (UnimplementedListenerServer) Ping(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedListenerServer) PlayUrl(context.Context, *PlayURLReq) (*PlayURLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayUrl not implemented")
}
func (UnimplementedListenerServer) BkarcDetails(context.Context, *BKArcDetailsReq) (*BKArcDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BkarcDetails not implemented")
}
func (UnimplementedListenerServer) Playlist(context.Context, *PlaylistReq) (*PlaylistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Playlist not implemented")
}
func (UnimplementedListenerServer) PlaylistAdd(context.Context, *PlaylistAddReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaylistAdd not implemented")
}
func (UnimplementedListenerServer) PlaylistDel(context.Context, *PlaylistDelReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaylistDel not implemented")
}
func (UnimplementedListenerServer) RcmdPlaylist(context.Context, *RcmdPlaylistReq) (*RcmdPlaylistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RcmdPlaylist not implemented")
}
func (UnimplementedListenerServer) PlayHistory(context.Context, *PlayHistoryReq) (*PlayHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayHistory not implemented")
}
func (UnimplementedListenerServer) PlayHistoryAdd(context.Context, *PlayHistoryAddReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayHistoryAdd not implemented")
}
func (UnimplementedListenerServer) PlayHistoryDel(context.Context, *PlayHistoryDelReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayHistoryDel not implemented")
}
func (UnimplementedListenerServer) PlayActionReport(context.Context, *PlayActionReportReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayActionReport not implemented")
}
func (UnimplementedListenerServer) TripleLike(context.Context, *TripleLikeReq) (*TripleLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TripleLike not implemented")
}
func (UnimplementedListenerServer) ThumbUp(context.Context, *ThumbUpReq) (*ThumbUpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThumbUp not implemented")
}
func (UnimplementedListenerServer) CoinAdd(context.Context, *CoinAddReq) (*CoinAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinAdd not implemented")
}
func (UnimplementedListenerServer) FavItemAdd(context.Context, *FavItemAddReq) (*FavItemAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavItemAdd not implemented")
}
func (UnimplementedListenerServer) FavItemDel(context.Context, *FavItemDelReq) (*FavItemDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavItemDel not implemented")
}
func (UnimplementedListenerServer) FavItemBatch(context.Context, *FavItemBatchReq) (*FavItemBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavItemBatch not implemented")
}
func (UnimplementedListenerServer) FavoredInAnyFolders(context.Context, *FavoredInAnyFoldersReq) (*FavoredInAnyFoldersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoredInAnyFolders not implemented")
}
func (UnimplementedListenerServer) FavFolderList(context.Context, *FavFolderListReq) (*FavFolderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavFolderList not implemented")
}
func (UnimplementedListenerServer) FavFolderDetail(context.Context, *FavFolderDetailReq) (*FavFolderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavFolderDetail not implemented")
}
func (UnimplementedListenerServer) FavFolderCreate(context.Context, *FavFolderCreateReq) (*FavFolderCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavFolderCreate not implemented")
}
func (UnimplementedListenerServer) FavFolderDelete(context.Context, *FavFolderDeleteReq) (*FavFolderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavFolderDelete not implemented")
}
func (UnimplementedListenerServer) PickFeed(context.Context, *PickFeedReq) (*PickFeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickFeed not implemented")
}
func (UnimplementedListenerServer) PickCardDetail(context.Context, *PickCardDetailReq) (*PickCardDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickCardDetail not implemented")
}
func (UnimplementedListenerServer) Medialist(context.Context, *MedialistReq) (*MedialistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Medialist not implemented")
}
func (UnimplementedListenerServer) Event(context.Context, *EventReq) (*EventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedListenerServer) mustEmbedUnimplementedListenerServer() {}

// UnsafeListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenerServer will
// result in compilation errors.
type UnsafeListenerServer interface {
	mustEmbedUnimplementedListenerServer()
}

func RegisterListenerServer(s grpc.ServiceRegistrar, srv ListenerServer) {
	s.RegisterService(&Listener_ServiceDesc, srv)
}

func _Listener_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PlayUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayUrl(ctx, req.(*PlayURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_BkarcDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BKArcDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).BkarcDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_BkarcDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).BkarcDetails(ctx, req.(*BKArcDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_Playlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Playlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_Playlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Playlist(ctx, req.(*PlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlaylistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlaylistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PlaylistAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlaylistAdd(ctx, req.(*PlaylistAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlaylistDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlaylistDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PlaylistDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlaylistDel(ctx, req.(*PlaylistDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_RcmdPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RcmdPlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).RcmdPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_RcmdPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).RcmdPlaylist(ctx, req.(*RcmdPlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PlayHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayHistory(ctx, req.(*PlayHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayHistoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayHistoryAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayHistoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PlayHistoryAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayHistoryAdd(ctx, req.(*PlayHistoryAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayHistoryDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayHistoryDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayHistoryDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PlayHistoryDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayHistoryDel(ctx, req.(*PlayHistoryDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayActionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayActionReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayActionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PlayActionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayActionReport(ctx, req.(*PlayActionReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_TripleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripleLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).TripleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_TripleLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).TripleLike(ctx, req.(*TripleLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_ThumbUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).ThumbUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_ThumbUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).ThumbUp(ctx, req.(*ThumbUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_CoinAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).CoinAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_CoinAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).CoinAdd(ctx, req.(*CoinAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavItemAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavItemAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavItemAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_FavItemAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavItemAdd(ctx, req.(*FavItemAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavItemDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavItemDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavItemDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_FavItemDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavItemDel(ctx, req.(*FavItemDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavItemBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavItemBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavItemBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_FavItemBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavItemBatch(ctx, req.(*FavItemBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavoredInAnyFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoredInAnyFoldersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavoredInAnyFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_FavoredInAnyFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavoredInAnyFolders(ctx, req.(*FavoredInAnyFoldersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavFolderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavFolderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavFolderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_FavFolderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavFolderList(ctx, req.(*FavFolderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavFolderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavFolderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavFolderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_FavFolderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavFolderDetail(ctx, req.(*FavFolderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavFolderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavFolderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavFolderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_FavFolderCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavFolderCreate(ctx, req.(*FavFolderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavFolderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavFolderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavFolderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_FavFolderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavFolderDelete(ctx, req.(*FavFolderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PickFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PickFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PickFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PickFeed(ctx, req.(*PickFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PickCardDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickCardDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PickCardDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_PickCardDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PickCardDetail(ctx, req.(*PickCardDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_Medialist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedialistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Medialist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_Medialist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Medialist(ctx, req.(*MedialistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Listener_Event_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Event(ctx, req.(*EventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Listener_ServiceDesc is the grpc.ServiceDesc for Listener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Listener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.listener.v1.Listener",
	HandlerType: (*ListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Listener_Ping_Handler,
		},
		{
			MethodName: "PlayUrl",
			Handler:    _Listener_PlayUrl_Handler,
		},
		{
			MethodName: "BkarcDetails",
			Handler:    _Listener_BkarcDetails_Handler,
		},
		{
			MethodName: "Playlist",
			Handler:    _Listener_Playlist_Handler,
		},
		{
			MethodName: "PlaylistAdd",
			Handler:    _Listener_PlaylistAdd_Handler,
		},
		{
			MethodName: "PlaylistDel",
			Handler:    _Listener_PlaylistDel_Handler,
		},
		{
			MethodName: "RcmdPlaylist",
			Handler:    _Listener_RcmdPlaylist_Handler,
		},
		{
			MethodName: "PlayHistory",
			Handler:    _Listener_PlayHistory_Handler,
		},
		{
			MethodName: "PlayHistoryAdd",
			Handler:    _Listener_PlayHistoryAdd_Handler,
		},
		{
			MethodName: "PlayHistoryDel",
			Handler:    _Listener_PlayHistoryDel_Handler,
		},
		{
			MethodName: "PlayActionReport",
			Handler:    _Listener_PlayActionReport_Handler,
		},
		{
			MethodName: "TripleLike",
			Handler:    _Listener_TripleLike_Handler,
		},
		{
			MethodName: "ThumbUp",
			Handler:    _Listener_ThumbUp_Handler,
		},
		{
			MethodName: "CoinAdd",
			Handler:    _Listener_CoinAdd_Handler,
		},
		{
			MethodName: "FavItemAdd",
			Handler:    _Listener_FavItemAdd_Handler,
		},
		{
			MethodName: "FavItemDel",
			Handler:    _Listener_FavItemDel_Handler,
		},
		{
			MethodName: "FavItemBatch",
			Handler:    _Listener_FavItemBatch_Handler,
		},
		{
			MethodName: "FavoredInAnyFolders",
			Handler:    _Listener_FavoredInAnyFolders_Handler,
		},
		{
			MethodName: "FavFolderList",
			Handler:    _Listener_FavFolderList_Handler,
		},
		{
			MethodName: "FavFolderDetail",
			Handler:    _Listener_FavFolderDetail_Handler,
		},
		{
			MethodName: "FavFolderCreate",
			Handler:    _Listener_FavFolderCreate_Handler,
		},
		{
			MethodName: "FavFolderDelete",
			Handler:    _Listener_FavFolderDelete_Handler,
		},
		{
			MethodName: "PickFeed",
			Handler:    _Listener_PickFeed_Handler,
		},
		{
			MethodName: "PickCardDetail",
			Handler:    _Listener_PickCardDetail_Handler,
		},
		{
			MethodName: "Medialist",
			Handler:    _Listener_Medialist_Handler,
		},
		{
			MethodName: "Event",
			Handler:    _Listener_Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/app/listener/v1/listener.proto",
}

const (
	Music_FavTabShow_FullMethodName             = "/bilibili.app.listener.v1.Music/FavTabShow"
	Music_MainFavMusicSubTabList_FullMethodName = "/bilibili.app.listener.v1.Music/MainFavMusicSubTabList"
	Music_MainFavMusicMenuList_FullMethodName   = "/bilibili.app.listener.v1.Music/MainFavMusicMenuList"
	Music_MenuEdit_FullMethodName               = "/bilibili.app.listener.v1.Music/MenuEdit"
	Music_MenuDelete_FullMethodName             = "/bilibili.app.listener.v1.Music/MenuDelete"
	Music_MenuSubscribe_FullMethodName          = "/bilibili.app.listener.v1.Music/MenuSubscribe"
	Music_Click_FullMethodName                  = "/bilibili.app.listener.v1.Music/Click"
)

// MusicClient is the client API for Music service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicClient interface {
	FavTabShow(ctx context.Context, in *FavTabShowReq, opts ...grpc.CallOption) (*FavTabShowResp, error)
	MainFavMusicSubTabList(ctx context.Context, in *MainFavMusicSubTabListReq, opts ...grpc.CallOption) (*MainFavMusicSubTabListResp, error)
	MainFavMusicMenuList(ctx context.Context, in *MainFavMusicMenuListReq, opts ...grpc.CallOption) (*MainFavMusicMenuListResp, error)
	MenuEdit(ctx context.Context, in *MenuEditReq, opts ...grpc.CallOption) (*MenuEditResp, error)
	MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*MenuDeleteResp, error)
	MenuSubscribe(ctx context.Context, in *MenuSubscribeReq, opts ...grpc.CallOption) (*MenuSubscribeResp, error)
	Click(ctx context.Context, in *ClickReq, opts ...grpc.CallOption) (*ClickResp, error)
}

type musicClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicClient(cc grpc.ClientConnInterface) MusicClient {
	return &musicClient{cc}
}

func (c *musicClient) FavTabShow(ctx context.Context, in *FavTabShowReq, opts ...grpc.CallOption) (*FavTabShowResp, error) {
	out := new(FavTabShowResp)
	err := c.cc.Invoke(ctx, Music_FavTabShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MainFavMusicSubTabList(ctx context.Context, in *MainFavMusicSubTabListReq, opts ...grpc.CallOption) (*MainFavMusicSubTabListResp, error) {
	out := new(MainFavMusicSubTabListResp)
	err := c.cc.Invoke(ctx, Music_MainFavMusicSubTabList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MainFavMusicMenuList(ctx context.Context, in *MainFavMusicMenuListReq, opts ...grpc.CallOption) (*MainFavMusicMenuListResp, error) {
	out := new(MainFavMusicMenuListResp)
	err := c.cc.Invoke(ctx, Music_MainFavMusicMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MenuEdit(ctx context.Context, in *MenuEditReq, opts ...grpc.CallOption) (*MenuEditResp, error) {
	out := new(MenuEditResp)
	err := c.cc.Invoke(ctx, Music_MenuEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*MenuDeleteResp, error) {
	out := new(MenuDeleteResp)
	err := c.cc.Invoke(ctx, Music_MenuDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MenuSubscribe(ctx context.Context, in *MenuSubscribeReq, opts ...grpc.CallOption) (*MenuSubscribeResp, error) {
	out := new(MenuSubscribeResp)
	err := c.cc.Invoke(ctx, Music_MenuSubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) Click(ctx context.Context, in *ClickReq, opts ...grpc.CallOption) (*ClickResp, error) {
	out := new(ClickResp)
	err := c.cc.Invoke(ctx, Music_Click_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServer is the server API for Music service.
// All implementations must embed UnimplementedMusicServer
// for forward compatibility
type MusicServer interface {
	FavTabShow(context.Context, *FavTabShowReq) (*FavTabShowResp, error)
	MainFavMusicSubTabList(context.Context, *MainFavMusicSubTabListReq) (*MainFavMusicSubTabListResp, error)
	MainFavMusicMenuList(context.Context, *MainFavMusicMenuListReq) (*MainFavMusicMenuListResp, error)
	MenuEdit(context.Context, *MenuEditReq) (*MenuEditResp, error)
	MenuDelete(context.Context, *MenuDeleteReq) (*MenuDeleteResp, error)
	MenuSubscribe(context.Context, *MenuSubscribeReq) (*MenuSubscribeResp, error)
	Click(context.Context, *ClickReq) (*ClickResp, error)
	mustEmbedUnimplementedMusicServer()
}

// UnimplementedMusicServer must be embedded to have forward compatible implementations.
type UnimplementedMusicServer struct {
}

func (UnimplementedMusicServer) FavTabShow(context.Context, *FavTabShowReq) (*FavTabShowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavTabShow not implemented")
}
func (UnimplementedMusicServer) MainFavMusicSubTabList(context.Context, *MainFavMusicSubTabListReq) (*MainFavMusicSubTabListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainFavMusicSubTabList not implemented")
}
func (UnimplementedMusicServer) MainFavMusicMenuList(context.Context, *MainFavMusicMenuListReq) (*MainFavMusicMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainFavMusicMenuList not implemented")
}
func (UnimplementedMusicServer) MenuEdit(context.Context, *MenuEditReq) (*MenuEditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuEdit not implemented")
}
func (UnimplementedMusicServer) MenuDelete(context.Context, *MenuDeleteReq) (*MenuDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDelete not implemented")
}
func (UnimplementedMusicServer) MenuSubscribe(context.Context, *MenuSubscribeReq) (*MenuSubscribeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuSubscribe not implemented")
}
func (UnimplementedMusicServer) Click(context.Context, *ClickReq) (*ClickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Click not implemented")
}
func (UnimplementedMusicServer) mustEmbedUnimplementedMusicServer() {}

// UnsafeMusicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServer will
// result in compilation errors.
type UnsafeMusicServer interface {
	mustEmbedUnimplementedMusicServer()
}

func RegisterMusicServer(s grpc.ServiceRegistrar, srv MusicServer) {
	s.RegisterService(&Music_ServiceDesc, srv)
}

func _Music_FavTabShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavTabShowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).FavTabShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_FavTabShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).FavTabShow(ctx, req.(*FavTabShowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MainFavMusicSubTabList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainFavMusicSubTabListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MainFavMusicSubTabList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_MainFavMusicSubTabList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MainFavMusicSubTabList(ctx, req.(*MainFavMusicSubTabListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MainFavMusicMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainFavMusicMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MainFavMusicMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_MainFavMusicMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MainFavMusicMenuList(ctx, req.(*MainFavMusicMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MenuEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MenuEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_MenuEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MenuEdit(ctx, req.(*MenuEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_MenuDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MenuDelete(ctx, req.(*MenuDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MenuSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuSubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MenuSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_MenuSubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MenuSubscribe(ctx, req.(*MenuSubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_Click_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).Click(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_Click_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).Click(ctx, req.(*ClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Music_ServiceDesc is the grpc.ServiceDesc for Music service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Music_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.listener.v1.Music",
	HandlerType: (*MusicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavTabShow",
			Handler:    _Music_FavTabShow_Handler,
		},
		{
			MethodName: "MainFavMusicSubTabList",
			Handler:    _Music_MainFavMusicSubTabList_Handler,
		},
		{
			MethodName: "MainFavMusicMenuList",
			Handler:    _Music_MainFavMusicMenuList_Handler,
		},
		{
			MethodName: "MenuEdit",
			Handler:    _Music_MenuEdit_Handler,
		},
		{
			MethodName: "MenuDelete",
			Handler:    _Music_MenuDelete_Handler,
		},
		{
			MethodName: "MenuSubscribe",
			Handler:    _Music_MenuSubscribe_Handler,
		},
		{
			MethodName: "Click",
			Handler:    _Music_Click_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/app/listener/v1/listener.proto",
}
