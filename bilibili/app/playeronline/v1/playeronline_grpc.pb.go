// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/app/playeronline/v1/playeronline.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlayerOnline_PlayerOnline_FullMethodName = "/bilibili.app.playeronline.v1.PlayerOnline/PlayerOnline"
	PlayerOnline_PremiereInfo_FullMethodName = "/bilibili.app.playeronline.v1.PlayerOnline/PremiereInfo"
	PlayerOnline_ReportWatch_FullMethodName  = "/bilibili.app.playeronline.v1.PlayerOnline/ReportWatch"
)

// PlayerOnlineClient is the client API for PlayerOnline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerOnlineClient interface {
	// 获取在线人数
	PlayerOnline(ctx context.Context, in *PlayerOnlineReq, opts ...grpc.CallOption) (*PlayerOnlineReply, error)
	PremiereInfo(ctx context.Context, in *PremiereInfoReq, opts ...grpc.CallOption) (*PremiereInfoReply, error)
	ReportWatch(ctx context.Context, in *ReportWatchReq, opts ...grpc.CallOption) (*NoReply, error)
}

type playerOnlineClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerOnlineClient(cc grpc.ClientConnInterface) PlayerOnlineClient {
	return &playerOnlineClient{cc}
}

func (c *playerOnlineClient) PlayerOnline(ctx context.Context, in *PlayerOnlineReq, opts ...grpc.CallOption) (*PlayerOnlineReply, error) {
	out := new(PlayerOnlineReply)
	err := c.cc.Invoke(ctx, PlayerOnline_PlayerOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerOnlineClient) PremiereInfo(ctx context.Context, in *PremiereInfoReq, opts ...grpc.CallOption) (*PremiereInfoReply, error) {
	out := new(PremiereInfoReply)
	err := c.cc.Invoke(ctx, PlayerOnline_PremiereInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerOnlineClient) ReportWatch(ctx context.Context, in *ReportWatchReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, PlayerOnline_ReportWatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerOnlineServer is the server API for PlayerOnline service.
// All implementations must embed UnimplementedPlayerOnlineServer
// for forward compatibility
type PlayerOnlineServer interface {
	// 获取在线人数
	PlayerOnline(context.Context, *PlayerOnlineReq) (*PlayerOnlineReply, error)
	PremiereInfo(context.Context, *PremiereInfoReq) (*PremiereInfoReply, error)
	ReportWatch(context.Context, *ReportWatchReq) (*NoReply, error)
	mustEmbedUnimplementedPlayerOnlineServer()
}

// UnimplementedPlayerOnlineServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerOnlineServer struct {
}

func (UnimplementedPlayerOnlineServer) PlayerOnline(context.Context, *PlayerOnlineReq) (*PlayerOnlineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerOnline not implemented")
}
func (UnimplementedPlayerOnlineServer) PremiereInfo(context.Context, *PremiereInfoReq) (*PremiereInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiereInfo not implemented")
}
func (UnimplementedPlayerOnlineServer) ReportWatch(context.Context, *ReportWatchReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWatch not implemented")
}
func (UnimplementedPlayerOnlineServer) mustEmbedUnimplementedPlayerOnlineServer() {}

// UnsafePlayerOnlineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerOnlineServer will
// result in compilation errors.
type UnsafePlayerOnlineServer interface {
	mustEmbedUnimplementedPlayerOnlineServer()
}

func RegisterPlayerOnlineServer(s grpc.ServiceRegistrar, srv PlayerOnlineServer) {
	s.RegisterService(&PlayerOnline_ServiceDesc, srv)
}

func _PlayerOnline_PlayerOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerOnlineServer).PlayerOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerOnline_PlayerOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerOnlineServer).PlayerOnline(ctx, req.(*PlayerOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerOnline_PremiereInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PremiereInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerOnlineServer).PremiereInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerOnline_PremiereInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerOnlineServer).PremiereInfo(ctx, req.(*PremiereInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerOnline_ReportWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerOnlineServer).ReportWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerOnline_ReportWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerOnlineServer).ReportWatch(ctx, req.(*ReportWatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerOnline_ServiceDesc is the grpc.ServiceDesc for PlayerOnline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerOnline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.playeronline.v1.PlayerOnline",
	HandlerType: (*PlayerOnlineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayerOnline",
			Handler:    _PlayerOnline_PlayerOnline_Handler,
		},
		{
			MethodName: "PremiereInfo",
			Handler:    _PlayerOnline_PremiereInfo_Handler,
		},
		{
			MethodName: "ReportWatch",
			Handler:    _PlayerOnline_ReportWatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/app/playeronline/v1/playeronline.proto",
}
