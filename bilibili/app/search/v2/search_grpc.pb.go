// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/app/search/v2/search.proto

package v2

import (
	context "context"
	main1 "github.com/XiaoMiku01/bilibili-grpc-api-go/bilibili/broadcast/message/main"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Search_CancelChatTask_FullMethodName = "/bilibili.app.search.v2.Search/CancelChatTask"
	Search_GetChatResult_FullMethodName  = "/bilibili.app.search.v2.Search/GetChatResult"
	Search_SearchEgg_FullMethodName      = "/bilibili.app.search.v2.Search/SearchEgg"
	Search_SubmitChatTask_FullMethodName = "/bilibili.app.search.v2.Search/SubmitChatTask"
)

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchClient interface {
	CancelChatTask(ctx context.Context, in *CancelChatTaskReq, opts ...grpc.CallOption) (*CancelChatTaskReply, error)
	GetChatResult(ctx context.Context, in *GetChatResultReq, opts ...grpc.CallOption) (*main1.ChatResult, error)
	SearchEgg(ctx context.Context, in *SearchEggReq, opts ...grpc.CallOption) (*SearchEggReply, error)
	SubmitChatTask(ctx context.Context, in *SubmitChatTaskReq, opts ...grpc.CallOption) (*SubmitChatTaskReply, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) CancelChatTask(ctx context.Context, in *CancelChatTaskReq, opts ...grpc.CallOption) (*CancelChatTaskReply, error) {
	out := new(CancelChatTaskReply)
	err := c.cc.Invoke(ctx, Search_CancelChatTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetChatResult(ctx context.Context, in *GetChatResultReq, opts ...grpc.CallOption) (*main1.ChatResult, error) {
	out := new(main1.ChatResult)
	err := c.cc.Invoke(ctx, Search_GetChatResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SearchEgg(ctx context.Context, in *SearchEggReq, opts ...grpc.CallOption) (*SearchEggReply, error) {
	out := new(SearchEggReply)
	err := c.cc.Invoke(ctx, Search_SearchEgg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SubmitChatTask(ctx context.Context, in *SubmitChatTaskReq, opts ...grpc.CallOption) (*SubmitChatTaskReply, error) {
	out := new(SubmitChatTaskReply)
	err := c.cc.Invoke(ctx, Search_SubmitChatTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
// All implementations must embed UnimplementedSearchServer
// for forward compatibility
type SearchServer interface {
	CancelChatTask(context.Context, *CancelChatTaskReq) (*CancelChatTaskReply, error)
	GetChatResult(context.Context, *GetChatResultReq) (*main1.ChatResult, error)
	SearchEgg(context.Context, *SearchEggReq) (*SearchEggReply, error)
	SubmitChatTask(context.Context, *SubmitChatTaskReq) (*SubmitChatTaskReply, error)
	mustEmbedUnimplementedSearchServer()
}

// UnimplementedSearchServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (UnimplementedSearchServer) CancelChatTask(context.Context, *CancelChatTaskReq) (*CancelChatTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelChatTask not implemented")
}
func (UnimplementedSearchServer) GetChatResult(context.Context, *GetChatResultReq) (*main1.ChatResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatResult not implemented")
}
func (UnimplementedSearchServer) SearchEgg(context.Context, *SearchEggReq) (*SearchEggReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEgg not implemented")
}
func (UnimplementedSearchServer) SubmitChatTask(context.Context, *SubmitChatTaskReq) (*SubmitChatTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitChatTask not implemented")
}
func (UnimplementedSearchServer) mustEmbedUnimplementedSearchServer() {}

// UnsafeSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServer will
// result in compilation errors.
type UnsafeSearchServer interface {
	mustEmbedUnimplementedSearchServer()
}

func RegisterSearchServer(s grpc.ServiceRegistrar, srv SearchServer) {
	s.RegisterService(&Search_ServiceDesc, srv)
}

func _Search_CancelChatTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelChatTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).CancelChatTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_CancelChatTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).CancelChatTask(ctx, req.(*CancelChatTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetChatResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetChatResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_GetChatResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetChatResult(ctx, req.(*GetChatResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SearchEgg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEggReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SearchEgg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_SearchEgg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SearchEgg(ctx, req.(*SearchEggReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SubmitChatTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitChatTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SubmitChatTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_SubmitChatTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SubmitChatTask(ctx, req.(*SubmitChatTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Search_ServiceDesc is the grpc.ServiceDesc for Search service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Search_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.search.v2.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelChatTask",
			Handler:    _Search_CancelChatTask_Handler,
		},
		{
			MethodName: "GetChatResult",
			Handler:    _Search_GetChatResult_Handler,
		},
		{
			MethodName: "SearchEgg",
			Handler:    _Search_SearchEgg_Handler,
		},
		{
			MethodName: "SubmitChatTask",
			Handler:    _Search_SubmitChatTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/app/search/v2/search.proto",
}
