// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.0
// source: bilibili/app/playurl/v1/playurl.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 业务类型
type Business int32

const (
	Business_UNKNOWN Business = 0 // 未知类型
	Business_STORY   Business = 1 // story业务
)

// Enum value maps for Business.
var (
	Business_name = map[int32]string{
		0: "UNKNOWN",
		1: "STORY",
	}
	Business_value = map[string]int32{
		"UNKNOWN": 0,
		"STORY":   1,
	}
)

func (x Business) Enum() *Business {
	p := new(Business)
	*p = x
	return p
}

func (x Business) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Business) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_app_playurl_v1_playurl_proto_enumTypes[0].Descriptor()
}

func (Business) Type() protoreflect.EnumType {
	return &file_bilibili_app_playurl_v1_playurl_proto_enumTypes[0]
}

func (x Business) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Business.Descriptor instead.
func (Business) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{0}
}

// 编码类型
type CodeType int32

const (
	CodeType_NOCODE  CodeType = 0 // 默认
	CodeType_CODE264 CodeType = 1 // H.264
	CodeType_CODE265 CodeType = 2 // H.265
	CodeType_CODEAV1 CodeType = 3 // av1
)

// Enum value maps for CodeType.
var (
	CodeType_name = map[int32]string{
		0: "NOCODE",
		1: "CODE264",
		2: "CODE265",
		3: "CODEAV1",
	}
	CodeType_value = map[string]int32{
		"NOCODE":  0,
		"CODE264": 1,
		"CODE265": 2,
		"CODEAV1": 3,
	}
)

func (x CodeType) Enum() *CodeType {
	p := new(CodeType)
	*p = x
	return p
}

func (x CodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_app_playurl_v1_playurl_proto_enumTypes[1].Descriptor()
}

func (CodeType) Type() protoreflect.EnumType {
	return &file_bilibili_app_playurl_v1_playurl_proto_enumTypes[1]
}

func (x CodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeType.Descriptor instead.
func (CodeType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{1}
}

// 设置类型
type ConfType int32

const (
	ConfType_NoType         ConfType = 0  //
	ConfType_FLIPCONF       ConfType = 1  // 镜像反转
	ConfType_CASTCONF       ConfType = 2  // 视频投屏
	ConfType_FEEDBACK       ConfType = 3  // 反馈
	ConfType_SUBTITLE       ConfType = 4  // 字幕
	ConfType_PLAYBACKRATE   ConfType = 5  // 播放速度
	ConfType_TIMEUP         ConfType = 6  // 定时停止播放
	ConfType_PLAYBACKMODE   ConfType = 7  // 播放方式
	ConfType_SCALEMODE      ConfType = 8  // 画面尺寸
	ConfType_BACKGROUNDPLAY ConfType = 9  // 后台播放
	ConfType_LIKE           ConfType = 10 // 顶
	ConfType_DISLIKE        ConfType = 11 // 踩
	ConfType_COIN           ConfType = 12 // 投币
	ConfType_ELEC           ConfType = 13 // 充电
	ConfType_SHARE          ConfType = 14 // 分享
	ConfType_SCREENSHOT     ConfType = 15 // 截图
	ConfType_LOCKSCREEN     ConfType = 16 // 锁屏
	ConfType_RECOMMEND      ConfType = 17 // 推荐
	ConfType_PLAYBACKSPEED  ConfType = 18 // 倍速
	ConfType_DEFINITION     ConfType = 19 // 清晰度
	ConfType_SELECTIONS     ConfType = 20 // 选集
	ConfType_NEXT           ConfType = 21 // 下一集
	ConfType_EDITDM         ConfType = 22 // 编辑弹幕
	ConfType_SMALLWINDOW    ConfType = 23 // 小窗
	ConfType_SHAKE          ConfType = 24 // 播放震动
	ConfType_OUTERDM        ConfType = 25 // 外层面板弹幕设置
	ConfType_INNERDM        ConfType = 26 // 三点内弹幕设置
	ConfType_PANORAMA       ConfType = 27 // 全景
	ConfType_DOLBY          ConfType = 28 // 杜比
	ConfType_COLORFILTER    ConfType = 29 // 颜色滤镜
)

// Enum value maps for ConfType.
var (
	ConfType_name = map[int32]string{
		0:  "NoType",
		1:  "FLIPCONF",
		2:  "CASTCONF",
		3:  "FEEDBACK",
		4:  "SUBTITLE",
		5:  "PLAYBACKRATE",
		6:  "TIMEUP",
		7:  "PLAYBACKMODE",
		8:  "SCALEMODE",
		9:  "BACKGROUNDPLAY",
		10: "LIKE",
		11: "DISLIKE",
		12: "COIN",
		13: "ELEC",
		14: "SHARE",
		15: "SCREENSHOT",
		16: "LOCKSCREEN",
		17: "RECOMMEND",
		18: "PLAYBACKSPEED",
		19: "DEFINITION",
		20: "SELECTIONS",
		21: "NEXT",
		22: "EDITDM",
		23: "SMALLWINDOW",
		24: "SHAKE",
		25: "OUTERDM",
		26: "INNERDM",
		27: "PANORAMA",
		28: "DOLBY",
		29: "COLORFILTER",
	}
	ConfType_value = map[string]int32{
		"NoType":         0,
		"FLIPCONF":       1,
		"CASTCONF":       2,
		"FEEDBACK":       3,
		"SUBTITLE":       4,
		"PLAYBACKRATE":   5,
		"TIMEUP":         6,
		"PLAYBACKMODE":   7,
		"SCALEMODE":      8,
		"BACKGROUNDPLAY": 9,
		"LIKE":           10,
		"DISLIKE":        11,
		"COIN":           12,
		"ELEC":           13,
		"SHARE":          14,
		"SCREENSHOT":     15,
		"LOCKSCREEN":     16,
		"RECOMMEND":      17,
		"PLAYBACKSPEED":  18,
		"DEFINITION":     19,
		"SELECTIONS":     20,
		"NEXT":           21,
		"EDITDM":         22,
		"SMALLWINDOW":    23,
		"SHAKE":          24,
		"OUTERDM":        25,
		"INNERDM":        26,
		"PANORAMA":       27,
		"DOLBY":          28,
		"COLORFILTER":    29,
	}
)

func (x ConfType) Enum() *ConfType {
	p := new(ConfType)
	*p = x
	return p
}

func (x ConfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_app_playurl_v1_playurl_proto_enumTypes[2].Descriptor()
}

func (ConfType) Type() protoreflect.EnumType {
	return &file_bilibili_app_playurl_v1_playurl_proto_enumTypes[2]
}

func (x ConfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfType.Descriptor instead.
func (ConfType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{2}
}

type Group int32

const (
	Group_UnknownGroup Group = 0 //
	Group_A            Group = 1 //
	Group_B            Group = 2 //
	Group_C            Group = 3 //
)

// Enum value maps for Group.
var (
	Group_name = map[int32]string{
		0: "UnknownGroup",
		1: "A",
		2: "B",
		3: "C",
	}
	Group_value = map[string]int32{
		"UnknownGroup": 0,
		"A":            1,
		"B":            2,
		"C":            3,
	}
)

func (x Group) Enum() *Group {
	p := new(Group)
	*p = x
	return p
}

func (x Group) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Group) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_app_playurl_v1_playurl_proto_enumTypes[3].Descriptor()
}

func (Group) Type() protoreflect.EnumType {
	return &file_bilibili_app_playurl_v1_playurl_proto_enumTypes[3]
}

func (x Group) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Group.Descriptor instead.
func (Group) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{3}
}

// 错误码
type PlayErr int32

const (
	PlayErr_NoErr                   PlayErr = 0 //
	PlayErr_WithMultiDeviceLoginErr PlayErr = 1 // 管控类型的错误码
)

// Enum value maps for PlayErr.
var (
	PlayErr_name = map[int32]string{
		0: "NoErr",
		1: "WithMultiDeviceLoginErr",
	}
	PlayErr_value = map[string]int32{
		"NoErr":                   0,
		"WithMultiDeviceLoginErr": 1,
	}
)

func (x PlayErr) Enum() *PlayErr {
	p := new(PlayErr)
	*p = x
	return p
}

func (x PlayErr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayErr) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_app_playurl_v1_playurl_proto_enumTypes[4].Descriptor()
}

func (PlayErr) Type() protoreflect.EnumType {
	return &file_bilibili_app_playurl_v1_playurl_proto_enumTypes[4]
}

func (x PlayErr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayErr.Descriptor instead.
func (PlayErr) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{4}
}

type PlayLimitCode int32

const (
	PlayLimitCode_PLCUnkown      PlayLimitCode = 0 //
	PlayLimitCode_PLCUgcNotPayed PlayLimitCode = 1 //
)

// Enum value maps for PlayLimitCode.
var (
	PlayLimitCode_name = map[int32]string{
		0: "PLCUnkown",
		1: "PLCUgcNotPayed",
	}
	PlayLimitCode_value = map[string]int32{
		"PLCUnkown":      0,
		"PLCUgcNotPayed": 1,
	}
)

func (x PlayLimitCode) Enum() *PlayLimitCode {
	p := new(PlayLimitCode)
	*p = x
	return p
}

func (x PlayLimitCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayLimitCode) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_app_playurl_v1_playurl_proto_enumTypes[5].Descriptor()
}

func (PlayLimitCode) Type() protoreflect.EnumType {
	return &file_bilibili_app_playurl_v1_playurl_proto_enumTypes[5]
}

func (x PlayLimitCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayLimitCode.Descriptor instead.
func (PlayLimitCode) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{5}
}

// 视频类型
type VideoType int32

const (
	VideoType_Unknown_VALUE VideoType = 0 //
	VideoType_FLV_VALUE     VideoType = 1 // flv格式
	VideoType_DASH_VALUE    VideoType = 2 // dash格式
	VideoType_MP4_VALUE     VideoType = 3 // mp4格式
)

// Enum value maps for VideoType.
var (
	VideoType_name = map[int32]string{
		0: "Unknown_VALUE",
		1: "FLV_VALUE",
		2: "DASH_VALUE",
		3: "MP4_VALUE",
	}
	VideoType_value = map[string]int32{
		"Unknown_VALUE": 0,
		"FLV_VALUE":     1,
		"DASH_VALUE":    2,
		"MP4_VALUE":     3,
	}
)

func (x VideoType) Enum() *VideoType {
	p := new(VideoType)
	*p = x
	return p
}

func (x VideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_app_playurl_v1_playurl_proto_enumTypes[6].Descriptor()
}

func (VideoType) Type() protoreflect.EnumType {
	return &file_bilibili_app_playurl_v1_playurl_proto_enumTypes[6]
}

func (x VideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoType.Descriptor instead.
func (VideoType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{6}
}

type DolbyItem_Type int32

const (
	DolbyItem_NONE   DolbyItem_Type = 0 // NONE
	DolbyItem_COMMON DolbyItem_Type = 1 // 普通杜比音效
	DolbyItem_ATMOS  DolbyItem_Type = 2 // 全景杜比音效
)

// Enum value maps for DolbyItem_Type.
var (
	DolbyItem_Type_name = map[int32]string{
		0: "NONE",
		1: "COMMON",
		2: "ATMOS",
	}
	DolbyItem_Type_value = map[string]int32{
		"NONE":   0,
		"COMMON": 1,
		"ATMOS":  2,
	}
)

func (x DolbyItem_Type) Enum() *DolbyItem_Type {
	p := new(DolbyItem_Type)
	*p = x
	return p
}

func (x DolbyItem_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DolbyItem_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_app_playurl_v1_playurl_proto_enumTypes[7].Descriptor()
}

func (DolbyItem_Type) Type() protoreflect.EnumType {
	return &file_bilibili_app_playurl_v1_playurl_proto_enumTypes[7]
}

func (x DolbyItem_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DolbyItem_Type.Descriptor instead.
func (DolbyItem_Type) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{8, 0}
}

type AB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Glance *Glance `protobuf:"bytes,1,opt,name=glance,proto3" json:"glance,omitempty"`
	Group  int32   `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *AB) Reset() {
	*x = AB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AB) ProtoMessage() {}

func (x *AB) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AB.ProtoReflect.Descriptor instead.
func (*AB) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{0}
}

func (x *AB) GetGlance() *Glance {
	if x != nil {
		return x.Glance
	}
	return nil
}

func (x *AB) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

// 配置项
type ArcConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否支持
	IsSupport    bool          `protobuf:"varint,1,opt,name=is_support,json=isSupport,proto3" json:"is_support,omitempty"`
	Disabled     bool          `protobuf:"varint,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
	ExtraContent *ExtraContent `protobuf:"bytes,3,opt,name=extra_content,json=extraContent,proto3" json:"extra_content,omitempty"`
}

func (x *ArcConf) Reset() {
	*x = ArcConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArcConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArcConf) ProtoMessage() {}

func (x *ArcConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArcConf.ProtoReflect.Descriptor instead.
func (*ArcConf) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{1}
}

func (x *ArcConf) GetIsSupport() bool {
	if x != nil {
		return x.IsSupport
	}
	return false
}

func (x *ArcConf) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ArcConf) GetExtraContent() *ExtraContent {
	if x != nil {
		return x.ExtraContent
	}
	return nil
}

// Chronos灰度管理
type Chronos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源md5
	Md5 string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
	// 资源文件
	File string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Chronos) Reset() {
	*x = Chronos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chronos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chronos) ProtoMessage() {}

func (x *Chronos) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chronos.ProtoReflect.Descriptor instead.
func (*Chronos) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{2}
}

func (x *Chronos) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *Chronos) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type ButtonStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	BgColor   string `protobuf:"bytes,3,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	JumpLink  string `protobuf:"bytes,4,opt,name=jump_link,json=jumpLink,proto3" json:"jump_link,omitempty"`
}

func (x *ButtonStyle) Reset() {
	*x = ButtonStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonStyle) ProtoMessage() {}

func (x *ButtonStyle) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonStyle.ProtoReflect.Descriptor instead.
func (*ButtonStyle) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{3}
}

func (x *ButtonStyle) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ButtonStyle) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *ButtonStyle) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *ButtonStyle) GetJumpLink() string {
	if x != nil {
		return x.JumpLink
	}
	return ""
}

type CloudConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否展示功能
	Show bool `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	// 设置类型
	ConfType   ConfType    `protobuf:"varint,2,opt,name=conf_type,json=confType,proto3,enum=bilibili.app.playurl.v1.ConfType" json:"conf_type,omitempty"`
	FieldValue *FieldValue `protobuf:"bytes,3,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	ConfValue  *ConfValue  `protobuf:"bytes,4,opt,name=conf_value,json=confValue,proto3" json:"conf_value,omitempty"`
}

func (x *CloudConf) Reset() {
	*x = CloudConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudConf) ProtoMessage() {}

func (x *CloudConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudConf.ProtoReflect.Descriptor instead.
func (*CloudConf) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{4}
}

func (x *CloudConf) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *CloudConf) GetConfType() ConfType {
	if x != nil {
		return x.ConfType
	}
	return ConfType_NoType
}

func (x *CloudConf) GetFieldValue() *FieldValue {
	if x != nil {
		return x.FieldValue
	}
	return nil
}

func (x *CloudConf) GetConfValue() *ConfValue {
	if x != nil {
		return x.ConfValue
	}
	return nil
}

type ConfValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ConfValue_SwitchVal
	//	*ConfValue_SelectedVal
	Value isConfValue_Value `protobuf_oneof:"value"`
}

func (x *ConfValue) Reset() {
	*x = ConfValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfValue) ProtoMessage() {}

func (x *ConfValue) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfValue.ProtoReflect.Descriptor instead.
func (*ConfValue) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{5}
}

func (m *ConfValue) GetValue() isConfValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConfValue) GetSwitchVal() bool {
	if x, ok := x.GetValue().(*ConfValue_SwitchVal); ok {
		return x.SwitchVal
	}
	return false
}

func (x *ConfValue) GetSelectedVal() int64 {
	if x, ok := x.GetValue().(*ConfValue_SelectedVal); ok {
		return x.SelectedVal
	}
	return 0
}

type isConfValue_Value interface {
	isConfValue_Value()
}

type ConfValue_SwitchVal struct {
	SwitchVal bool `protobuf:"varint,1,opt,name=switch_val,json=switchVal,proto3,oneof"`
}

type ConfValue_SelectedVal struct {
	SelectedVal int64 `protobuf:"varint,2,opt,name=selected_val,json=selectedVal,proto3,oneof"`
}

func (*ConfValue_SwitchVal) isConfValue_Value() {}

func (*ConfValue_SelectedVal) isConfValue_Value() {}

// dash条目
type DashItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清晰度
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 主线流
	BaseUrl string `protobuf:"bytes,2,opt,name=baseUrl,proto3" json:"baseUrl,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,3,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// 带宽
	Bandwidth uint32 `protobuf:"varint,4,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// 编码id
	Codecid uint32 `protobuf:"varint,5,opt,name=codecid,proto3" json:"codecid,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	// 大小
	Size uint64 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	// 帧率
	FrameRate    string `protobuf:"bytes,8,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	WidevinePssh string `protobuf:"bytes,9,opt,name=widevine_pssh,json=widevinePssh,proto3" json:"widevine_pssh,omitempty"`
}

func (x *DashItem) Reset() {
	*x = DashItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashItem) ProtoMessage() {}

func (x *DashItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashItem.ProtoReflect.Descriptor instead.
func (*DashItem) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{6}
}

func (x *DashItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DashItem) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *DashItem) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *DashItem) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *DashItem) GetCodecid() uint32 {
	if x != nil {
		return x.Codecid
	}
	return 0
}

func (x *DashItem) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *DashItem) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DashItem) GetFrameRate() string {
	if x != nil {
		return x.FrameRate
	}
	return ""
}

func (x *DashItem) GetWidevinePssh() string {
	if x != nil {
		return x.WidevinePssh
	}
	return ""
}

// dash视频流
type DashVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主线流
	BaseUrl string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,2,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// 带宽
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// 编码id
	Codecid uint32 `protobuf:"varint,4,opt,name=codecid,proto3" json:"codecid,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,5,opt,name=md5,proto3" json:"md5,omitempty"`
	// 大小
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// 伴音质量id
	AudioId uint32 `protobuf:"varint,7,opt,name=audioId,proto3" json:"audioId,omitempty"`
	// 是否非全二压
	NoRexcode bool `protobuf:"varint,8,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	// 码率
	FrameRate string `protobuf:"bytes,9,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	// 宽度
	Width int32 `protobuf:"varint,10,opt,name=width,proto3" json:"width,omitempty"`
	// 高度
	Height       int32  `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	WidevinePssh string `protobuf:"bytes,12,opt,name=widevine_pssh,json=widevinePssh,proto3" json:"widevine_pssh,omitempty"`
}

func (x *DashVideo) Reset() {
	*x = DashVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashVideo) ProtoMessage() {}

func (x *DashVideo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashVideo.ProtoReflect.Descriptor instead.
func (*DashVideo) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{7}
}

func (x *DashVideo) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *DashVideo) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *DashVideo) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *DashVideo) GetCodecid() uint32 {
	if x != nil {
		return x.Codecid
	}
	return 0
}

func (x *DashVideo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *DashVideo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DashVideo) GetAudioId() uint32 {
	if x != nil {
		return x.AudioId
	}
	return 0
}

func (x *DashVideo) GetNoRexcode() bool {
	if x != nil {
		return x.NoRexcode
	}
	return false
}

func (x *DashVideo) GetFrameRate() string {
	if x != nil {
		return x.FrameRate
	}
	return ""
}

func (x *DashVideo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DashVideo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DashVideo) GetWidevinePssh() string {
	if x != nil {
		return x.WidevinePssh
	}
	return ""
}

// 杜比伴音信息
type DolbyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 杜比类型
	Type DolbyItem_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bilibili.app.playurl.v1.DolbyItem_Type" json:"type,omitempty"`
	// 音频流
	Audio *DashItem `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *DolbyItem) Reset() {
	*x = DolbyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DolbyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DolbyItem) ProtoMessage() {}

func (x *DolbyItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DolbyItem.ProtoReflect.Descriptor instead.
func (*DolbyItem) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{8}
}

func (x *DolbyItem) GetType() DolbyItem_Type {
	if x != nil {
		return x.Type
	}
	return DolbyItem_NONE
}

func (x *DolbyItem) GetAudio() *DashItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

// 事件
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 震动
	Shake *Shake `protobuf:"bytes,1,opt,name=shake,proto3" json:"shake,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{9}
}

func (x *Event) GetShake() *Shake {
	if x != nil {
		return x.Shake
	}
	return nil
}

type ExtraContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisabledReason string `protobuf:"bytes,1,opt,name=disabled_reason,json=disabledReason,proto3" json:"disabled_reason,omitempty"`
	DisabledCode   int64  `protobuf:"varint,2,opt,name=disabled_code,json=disabledCode,proto3" json:"disabled_code,omitempty"`
}

func (x *ExtraContent) Reset() {
	*x = ExtraContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraContent) ProtoMessage() {}

func (x *ExtraContent) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraContent.ProtoReflect.Descriptor instead.
func (*ExtraContent) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{10}
}

func (x *ExtraContent) GetDisabledReason() string {
	if x != nil {
		return x.DisabledReason
	}
	return ""
}

func (x *ExtraContent) GetDisabledCode() int64 {
	if x != nil {
		return x.DisabledCode
	}
	return 0
}

// 配置字段值
type FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FieldValue_Switch
	Value isFieldValue_Value `protobuf_oneof:"value"`
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{11}
}

func (m *FieldValue) GetValue() isFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FieldValue) GetSwitch() bool {
	if x, ok := x.GetValue().(*FieldValue_Switch); ok {
		return x.Switch
	}
	return false
}

type isFieldValue_Value interface {
	isFieldValue_Value()
}

type FieldValue_Switch struct {
	// 开关
	Switch bool `protobuf:"varint,1,opt,name=switch,proto3,oneof"`
}

func (*FieldValue_Switch) isFieldValue_Value() {}

// 清晰度描述
type FormatDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清晰度
	Quality int32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 清晰度格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 清晰度描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 新描述
	NewDescription string `protobuf:"bytes,4,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
	// 选中态的清晰度描述
	DisplayDesc string `protobuf:"bytes,5,opt,name=display_desc,json=displayDesc,proto3" json:"display_desc,omitempty"`
	// 选中态的清晰度描述的角标
	Superscript string `protobuf:"bytes,6,opt,name=superscript,proto3" json:"superscript,omitempty"`
}

func (x *FormatDescription) Reset() {
	*x = FormatDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatDescription) ProtoMessage() {}

func (x *FormatDescription) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatDescription.ProtoReflect.Descriptor instead.
func (*FormatDescription) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{12}
}

func (x *FormatDescription) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *FormatDescription) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *FormatDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FormatDescription) GetNewDescription() string {
	if x != nil {
		return x.NewDescription
	}
	return ""
}

func (x *FormatDescription) GetDisplayDesc() string {
	if x != nil {
		return x.DisplayDesc
	}
	return ""
}

func (x *FormatDescription) GetSuperscript() string {
	if x != nil {
		return x.Superscript
	}
	return ""
}

type Glance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanWatch bool  `protobuf:"varint,1,opt,name=can_watch,json=canWatch,proto3" json:"can_watch,omitempty"`
	Times    int64 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Glance) Reset() {
	*x = Glance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Glance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Glance) ProtoMessage() {}

func (x *Glance) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Glance.ProtoReflect.Descriptor instead.
func (*Glance) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{13}
}

func (x *Glance) GetCanWatch() bool {
	if x != nil {
		return x.CanWatch
	}
	return false
}

func (x *Glance) GetTimes() int64 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *Glance) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// 禁用功能配置
type PlayAbilityConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundPlayConf *CloudConf `protobuf:"bytes,1,opt,name=background_play_conf,json=backgroundPlayConf,proto3" json:"background_play_conf,omitempty"` // 后台播放
	FlipConf           *CloudConf `protobuf:"bytes,2,opt,name=flip_conf,json=flipConf,proto3" json:"flip_conf,omitempty"`                                 // 镜像反转
	CastConf           *CloudConf `protobuf:"bytes,3,opt,name=cast_conf,json=castConf,proto3" json:"cast_conf,omitempty"`                                 // 投屏
	FeedbackConf       *CloudConf `protobuf:"bytes,4,opt,name=feedback_conf,json=feedbackConf,proto3" json:"feedback_conf,omitempty"`                     // 反馈
	SubtitleConf       *CloudConf `protobuf:"bytes,5,opt,name=subtitle_conf,json=subtitleConf,proto3" json:"subtitle_conf,omitempty"`                     // 字幕
	PlaybackRateConf   *CloudConf `protobuf:"bytes,6,opt,name=playback_rate_conf,json=playbackRateConf,proto3" json:"playback_rate_conf,omitempty"`       // 播放速度
	TimeUpConf         *CloudConf `protobuf:"bytes,7,opt,name=time_up_conf,json=timeUpConf,proto3" json:"time_up_conf,omitempty"`                         // 定时停止
	PlaybackModeConf   *CloudConf `protobuf:"bytes,8,opt,name=playback_mode_conf,json=playbackModeConf,proto3" json:"playback_mode_conf,omitempty"`       // 播放方式
	ScaleModeConf      *CloudConf `protobuf:"bytes,9,opt,name=scale_mode_conf,json=scaleModeConf,proto3" json:"scale_mode_conf,omitempty"`                // 画面尺寸
	LikeConf           *CloudConf `protobuf:"bytes,10,opt,name=like_conf,json=likeConf,proto3" json:"like_conf,omitempty"`                                // 赞
	DislikeConf        *CloudConf `protobuf:"bytes,11,opt,name=dislike_conf,json=dislikeConf,proto3" json:"dislike_conf,omitempty"`                       // 踩
	CoinConf           *CloudConf `protobuf:"bytes,12,opt,name=coin_conf,json=coinConf,proto3" json:"coin_conf,omitempty"`                                // 投币
	ElecConf           *CloudConf `protobuf:"bytes,13,opt,name=elec_conf,json=elecConf,proto3" json:"elec_conf,omitempty"`                                // 充电
	ShareConf          *CloudConf `protobuf:"bytes,14,opt,name=share_conf,json=shareConf,proto3" json:"share_conf,omitempty"`                             // 分享
	ScreenShotConf     *CloudConf `protobuf:"bytes,15,opt,name=screen_shot_conf,json=screenShotConf,proto3" json:"screen_shot_conf,omitempty"`            // 截图
	LockScreenConf     *CloudConf `protobuf:"bytes,16,opt,name=lock_screen_conf,json=lockScreenConf,proto3" json:"lock_screen_conf,omitempty"`            // 锁定
	RecommendConf      *CloudConf `protobuf:"bytes,17,opt,name=recommend_conf,json=recommendConf,proto3" json:"recommend_conf,omitempty"`                 // 相关推荐
	PlaybackSpeedConf  *CloudConf `protobuf:"bytes,18,opt,name=playback_speed_conf,json=playbackSpeedConf,proto3" json:"playback_speed_conf,omitempty"`   // 播放速度
	DefinitionConf     *CloudConf `protobuf:"bytes,19,opt,name=definition_conf,json=definitionConf,proto3" json:"definition_conf,omitempty"`              // 清晰度
	SelectionsConf     *CloudConf `protobuf:"bytes,20,opt,name=selections_conf,json=selectionsConf,proto3" json:"selections_conf,omitempty"`              // 选集
	NextConf           *CloudConf `protobuf:"bytes,21,opt,name=next_conf,json=nextConf,proto3" json:"next_conf,omitempty"`                                // 下一集
	EditDmConf         *CloudConf `protobuf:"bytes,22,opt,name=edit_dm_conf,json=editDmConf,proto3" json:"edit_dm_conf,omitempty"`                        // 编辑弹幕
	SmallWindowConf    *CloudConf `protobuf:"bytes,23,opt,name=small_window_conf,json=smallWindowConf,proto3" json:"small_window_conf,omitempty"`         // 小窗
	ShakeConf          *CloudConf `protobuf:"bytes,24,opt,name=shake_conf,json=shakeConf,proto3" json:"shake_conf,omitempty"`                             // 震动
	OuterDmConf        *CloudConf `protobuf:"bytes,25,opt,name=outer_dm_conf,json=outerDmConf,proto3" json:"outer_dm_conf,omitempty"`                     // 外层面板弹幕设置
	InnerDmDisable     *CloudConf `protobuf:"bytes,26,opt,name=innerDmDisable,proto3" json:"innerDmDisable,omitempty"`                                    // 三点内弹幕设置
	InnerDmConf        *CloudConf `protobuf:"bytes,27,opt,name=inner_dm_conf,json=innerDmConf,proto3" json:"inner_dm_conf,omitempty"`                     // 一起看入口
	DolbyConf          *CloudConf `protobuf:"bytes,28,opt,name=dolby_conf,json=dolbyConf,proto3" json:"dolby_conf,omitempty"`                             // 杜比音效
	ColorFilterConf    *CloudConf `protobuf:"bytes,29,opt,name=color_filter_conf,json=colorFilterConf,proto3" json:"color_filter_conf,omitempty"`         // 颜色滤镜
}

func (x *PlayAbilityConf) Reset() {
	*x = PlayAbilityConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayAbilityConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayAbilityConf) ProtoMessage() {}

func (x *PlayAbilityConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayAbilityConf.ProtoReflect.Descriptor instead.
func (*PlayAbilityConf) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{14}
}

func (x *PlayAbilityConf) GetBackgroundPlayConf() *CloudConf {
	if x != nil {
		return x.BackgroundPlayConf
	}
	return nil
}

func (x *PlayAbilityConf) GetFlipConf() *CloudConf {
	if x != nil {
		return x.FlipConf
	}
	return nil
}

func (x *PlayAbilityConf) GetCastConf() *CloudConf {
	if x != nil {
		return x.CastConf
	}
	return nil
}

func (x *PlayAbilityConf) GetFeedbackConf() *CloudConf {
	if x != nil {
		return x.FeedbackConf
	}
	return nil
}

func (x *PlayAbilityConf) GetSubtitleConf() *CloudConf {
	if x != nil {
		return x.SubtitleConf
	}
	return nil
}

func (x *PlayAbilityConf) GetPlaybackRateConf() *CloudConf {
	if x != nil {
		return x.PlaybackRateConf
	}
	return nil
}

func (x *PlayAbilityConf) GetTimeUpConf() *CloudConf {
	if x != nil {
		return x.TimeUpConf
	}
	return nil
}

func (x *PlayAbilityConf) GetPlaybackModeConf() *CloudConf {
	if x != nil {
		return x.PlaybackModeConf
	}
	return nil
}

func (x *PlayAbilityConf) GetScaleModeConf() *CloudConf {
	if x != nil {
		return x.ScaleModeConf
	}
	return nil
}

func (x *PlayAbilityConf) GetLikeConf() *CloudConf {
	if x != nil {
		return x.LikeConf
	}
	return nil
}

func (x *PlayAbilityConf) GetDislikeConf() *CloudConf {
	if x != nil {
		return x.DislikeConf
	}
	return nil
}

func (x *PlayAbilityConf) GetCoinConf() *CloudConf {
	if x != nil {
		return x.CoinConf
	}
	return nil
}

func (x *PlayAbilityConf) GetElecConf() *CloudConf {
	if x != nil {
		return x.ElecConf
	}
	return nil
}

func (x *PlayAbilityConf) GetShareConf() *CloudConf {
	if x != nil {
		return x.ShareConf
	}
	return nil
}

func (x *PlayAbilityConf) GetScreenShotConf() *CloudConf {
	if x != nil {
		return x.ScreenShotConf
	}
	return nil
}

func (x *PlayAbilityConf) GetLockScreenConf() *CloudConf {
	if x != nil {
		return x.LockScreenConf
	}
	return nil
}

func (x *PlayAbilityConf) GetRecommendConf() *CloudConf {
	if x != nil {
		return x.RecommendConf
	}
	return nil
}

func (x *PlayAbilityConf) GetPlaybackSpeedConf() *CloudConf {
	if x != nil {
		return x.PlaybackSpeedConf
	}
	return nil
}

func (x *PlayAbilityConf) GetDefinitionConf() *CloudConf {
	if x != nil {
		return x.DefinitionConf
	}
	return nil
}

func (x *PlayAbilityConf) GetSelectionsConf() *CloudConf {
	if x != nil {
		return x.SelectionsConf
	}
	return nil
}

func (x *PlayAbilityConf) GetNextConf() *CloudConf {
	if x != nil {
		return x.NextConf
	}
	return nil
}

func (x *PlayAbilityConf) GetEditDmConf() *CloudConf {
	if x != nil {
		return x.EditDmConf
	}
	return nil
}

func (x *PlayAbilityConf) GetSmallWindowConf() *CloudConf {
	if x != nil {
		return x.SmallWindowConf
	}
	return nil
}

func (x *PlayAbilityConf) GetShakeConf() *CloudConf {
	if x != nil {
		return x.ShakeConf
	}
	return nil
}

func (x *PlayAbilityConf) GetOuterDmConf() *CloudConf {
	if x != nil {
		return x.OuterDmConf
	}
	return nil
}

func (x *PlayAbilityConf) GetInnerDmDisable() *CloudConf {
	if x != nil {
		return x.InnerDmDisable
	}
	return nil
}

func (x *PlayAbilityConf) GetInnerDmConf() *CloudConf {
	if x != nil {
		return x.InnerDmConf
	}
	return nil
}

func (x *PlayAbilityConf) GetDolbyConf() *CloudConf {
	if x != nil {
		return x.DolbyConf
	}
	return nil
}

func (x *PlayAbilityConf) GetColorFilterConf() *CloudConf {
	if x != nil {
		return x.ColorFilterConf
	}
	return nil
}

// 播放控件稿件配置
type PlayArcConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundPlayConf  *ArcConf `protobuf:"bytes,1,opt,name=background_play_conf,json=backgroundPlayConf,proto3" json:"background_play_conf,omitempty"`     // 后台播放
	FlipConf            *ArcConf `protobuf:"bytes,2,opt,name=flip_conf,json=flipConf,proto3" json:"flip_conf,omitempty"`                                     // 镜像反转
	CastConf            *ArcConf `protobuf:"bytes,3,opt,name=cast_conf,json=castConf,proto3" json:"cast_conf,omitempty"`                                     // 投屏
	FeedbackConf        *ArcConf `protobuf:"bytes,4,opt,name=feedback_conf,json=feedbackConf,proto3" json:"feedback_conf,omitempty"`                         // 反馈
	SubtitleConf        *ArcConf `protobuf:"bytes,5,opt,name=subtitle_conf,json=subtitleConf,proto3" json:"subtitle_conf,omitempty"`                         // 字幕
	PlaybackRateConf    *ArcConf `protobuf:"bytes,6,opt,name=playback_rate_conf,json=playbackRateConf,proto3" json:"playback_rate_conf,omitempty"`           // 播放速度
	TimeUpConf          *ArcConf `protobuf:"bytes,7,opt,name=time_up_conf,json=timeUpConf,proto3" json:"time_up_conf,omitempty"`                             // 定时停止
	PlaybackModeConf    *ArcConf `protobuf:"bytes,8,opt,name=playback_mode_conf,json=playbackModeConf,proto3" json:"playback_mode_conf,omitempty"`           // 播放方式
	ScaleModeConf       *ArcConf `protobuf:"bytes,9,opt,name=scale_mode_conf,json=scaleModeConf,proto3" json:"scale_mode_conf,omitempty"`                    // 画面尺寸
	LikeConf            *ArcConf `protobuf:"bytes,10,opt,name=like_conf,json=likeConf,proto3" json:"like_conf,omitempty"`                                    // 赞
	DislikeConf         *ArcConf `protobuf:"bytes,11,opt,name=dislike_conf,json=dislikeConf,proto3" json:"dislike_conf,omitempty"`                           // 踩
	CoinConf            *ArcConf `protobuf:"bytes,12,opt,name=coin_conf,json=coinConf,proto3" json:"coin_conf,omitempty"`                                    // 投币
	ElecConf            *ArcConf `protobuf:"bytes,13,opt,name=elec_conf,json=elecConf,proto3" json:"elec_conf,omitempty"`                                    // 充电
	ShareConf           *ArcConf `protobuf:"bytes,14,opt,name=share_conf,json=shareConf,proto3" json:"share_conf,omitempty"`                                 // 分享
	ScreenShotConf      *ArcConf `protobuf:"bytes,15,opt,name=screen_shot_conf,json=screenShotConf,proto3" json:"screen_shot_conf,omitempty"`                // 截图
	LockScreenConf      *ArcConf `protobuf:"bytes,16,opt,name=lock_screen_conf,json=lockScreenConf,proto3" json:"lock_screen_conf,omitempty"`                // 锁定
	RecommendConf       *ArcConf `protobuf:"bytes,17,opt,name=recommend_conf,json=recommendConf,proto3" json:"recommend_conf,omitempty"`                     // 相关推荐
	PlaybackSpeedConf   *ArcConf `protobuf:"bytes,18,opt,name=playback_speed_conf,json=playbackSpeedConf,proto3" json:"playback_speed_conf,omitempty"`       // 播放速度
	DefinitionConf      *ArcConf `protobuf:"bytes,19,opt,name=definition_conf,json=definitionConf,proto3" json:"definition_conf,omitempty"`                  // 清晰度
	SelectionsConf      *ArcConf `protobuf:"bytes,20,opt,name=selections_conf,json=selectionsConf,proto3" json:"selections_conf,omitempty"`                  // 选集
	NextConf            *ArcConf `protobuf:"bytes,21,opt,name=next_conf,json=nextConf,proto3" json:"next_conf,omitempty"`                                    // 下一集
	EditDmConf          *ArcConf `protobuf:"bytes,22,opt,name=edit_dm_conf,json=editDmConf,proto3" json:"edit_dm_conf,omitempty"`                            // 编辑弹幕
	SmallWindowConf     *ArcConf `protobuf:"bytes,23,opt,name=small_window_conf,json=smallWindowConf,proto3" json:"small_window_conf,omitempty"`             // 小窗
	ShakeConf           *ArcConf `protobuf:"bytes,24,opt,name=shake_conf,json=shakeConf,proto3" json:"shake_conf,omitempty"`                                 // 震动
	OuterDmConf         *ArcConf `protobuf:"bytes,25,opt,name=outer_dm_conf,json=outerDmConf,proto3" json:"outer_dm_conf,omitempty"`                         // 外层面板弹幕设置
	InnerDmConf         *ArcConf `protobuf:"bytes,26,opt,name=inner_dm_conf,json=innerDmConf,proto3" json:"inner_dm_conf,omitempty"`                         // 三点内弹幕设置
	PanoramaConf        *ArcConf `protobuf:"bytes,27,opt,name=panorama_conf,json=panoramaConf,proto3" json:"panorama_conf,omitempty"`                        // 一起看入口
	DolbyConf           *ArcConf `protobuf:"bytes,28,opt,name=dolby_conf,json=dolbyConf,proto3" json:"dolby_conf,omitempty"`                                 // 杜比音效
	ScreenRecordingConf *ArcConf `protobuf:"bytes,29,opt,name=screen_recording_conf,json=screenRecordingConf,proto3" json:"screen_recording_conf,omitempty"` // 屏幕录制
	ColorFilterConf     *ArcConf `protobuf:"bytes,30,opt,name=color_filter_conf,json=colorFilterConf,proto3" json:"color_filter_conf,omitempty"`             // 颜色滤镜
}

func (x *PlayArcConf) Reset() {
	*x = PlayArcConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayArcConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayArcConf) ProtoMessage() {}

func (x *PlayArcConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayArcConf.ProtoReflect.Descriptor instead.
func (*PlayArcConf) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{15}
}

func (x *PlayArcConf) GetBackgroundPlayConf() *ArcConf {
	if x != nil {
		return x.BackgroundPlayConf
	}
	return nil
}

func (x *PlayArcConf) GetFlipConf() *ArcConf {
	if x != nil {
		return x.FlipConf
	}
	return nil
}

func (x *PlayArcConf) GetCastConf() *ArcConf {
	if x != nil {
		return x.CastConf
	}
	return nil
}

func (x *PlayArcConf) GetFeedbackConf() *ArcConf {
	if x != nil {
		return x.FeedbackConf
	}
	return nil
}

func (x *PlayArcConf) GetSubtitleConf() *ArcConf {
	if x != nil {
		return x.SubtitleConf
	}
	return nil
}

func (x *PlayArcConf) GetPlaybackRateConf() *ArcConf {
	if x != nil {
		return x.PlaybackRateConf
	}
	return nil
}

func (x *PlayArcConf) GetTimeUpConf() *ArcConf {
	if x != nil {
		return x.TimeUpConf
	}
	return nil
}

func (x *PlayArcConf) GetPlaybackModeConf() *ArcConf {
	if x != nil {
		return x.PlaybackModeConf
	}
	return nil
}

func (x *PlayArcConf) GetScaleModeConf() *ArcConf {
	if x != nil {
		return x.ScaleModeConf
	}
	return nil
}

func (x *PlayArcConf) GetLikeConf() *ArcConf {
	if x != nil {
		return x.LikeConf
	}
	return nil
}

func (x *PlayArcConf) GetDislikeConf() *ArcConf {
	if x != nil {
		return x.DislikeConf
	}
	return nil
}

func (x *PlayArcConf) GetCoinConf() *ArcConf {
	if x != nil {
		return x.CoinConf
	}
	return nil
}

func (x *PlayArcConf) GetElecConf() *ArcConf {
	if x != nil {
		return x.ElecConf
	}
	return nil
}

func (x *PlayArcConf) GetShareConf() *ArcConf {
	if x != nil {
		return x.ShareConf
	}
	return nil
}

func (x *PlayArcConf) GetScreenShotConf() *ArcConf {
	if x != nil {
		return x.ScreenShotConf
	}
	return nil
}

func (x *PlayArcConf) GetLockScreenConf() *ArcConf {
	if x != nil {
		return x.LockScreenConf
	}
	return nil
}

func (x *PlayArcConf) GetRecommendConf() *ArcConf {
	if x != nil {
		return x.RecommendConf
	}
	return nil
}

func (x *PlayArcConf) GetPlaybackSpeedConf() *ArcConf {
	if x != nil {
		return x.PlaybackSpeedConf
	}
	return nil
}

func (x *PlayArcConf) GetDefinitionConf() *ArcConf {
	if x != nil {
		return x.DefinitionConf
	}
	return nil
}

func (x *PlayArcConf) GetSelectionsConf() *ArcConf {
	if x != nil {
		return x.SelectionsConf
	}
	return nil
}

func (x *PlayArcConf) GetNextConf() *ArcConf {
	if x != nil {
		return x.NextConf
	}
	return nil
}

func (x *PlayArcConf) GetEditDmConf() *ArcConf {
	if x != nil {
		return x.EditDmConf
	}
	return nil
}

func (x *PlayArcConf) GetSmallWindowConf() *ArcConf {
	if x != nil {
		return x.SmallWindowConf
	}
	return nil
}

func (x *PlayArcConf) GetShakeConf() *ArcConf {
	if x != nil {
		return x.ShakeConf
	}
	return nil
}

func (x *PlayArcConf) GetOuterDmConf() *ArcConf {
	if x != nil {
		return x.OuterDmConf
	}
	return nil
}

func (x *PlayArcConf) GetInnerDmConf() *ArcConf {
	if x != nil {
		return x.InnerDmConf
	}
	return nil
}

func (x *PlayArcConf) GetPanoramaConf() *ArcConf {
	if x != nil {
		return x.PanoramaConf
	}
	return nil
}

func (x *PlayArcConf) GetDolbyConf() *ArcConf {
	if x != nil {
		return x.DolbyConf
	}
	return nil
}

func (x *PlayArcConf) GetScreenRecordingConf() *ArcConf {
	if x != nil {
		return x.ScreenRecordingConf
	}
	return nil
}

func (x *PlayArcConf) GetColorFilterConf() *ArcConf {
	if x != nil {
		return x.ColorFilterConf
	}
	return nil
}

// 编辑播放界面配置-响应
type PlayConfEditReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayConfEditReply) Reset() {
	*x = PlayConfEditReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayConfEditReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayConfEditReply) ProtoMessage() {}

func (x *PlayConfEditReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayConfEditReply.ProtoReflect.Descriptor instead.
func (*PlayConfEditReply) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{16}
}

// 编辑播放界面配置-请求
type PlayConfEditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 播放界面配置
	PlayConf []*PlayConfState `protobuf:"bytes,1,rep,name=play_conf,json=playConf,proto3" json:"play_conf,omitempty"`
}

func (x *PlayConfEditReq) Reset() {
	*x = PlayConfEditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayConfEditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayConfEditReq) ProtoMessage() {}

func (x *PlayConfEditReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayConfEditReq.ProtoReflect.Descriptor instead.
func (*PlayConfEditReq) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{17}
}

func (x *PlayConfEditReq) GetPlayConf() []*PlayConfState {
	if x != nil {
		return x.PlayConf
	}
	return nil
}

// 获取播放界面配置-响应
type PlayConfReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 播放控件用户自定义配置
	PlayConf *PlayAbilityConf `protobuf:"bytes,1,opt,name=play_conf,json=playConf,proto3" json:"play_conf,omitempty"`
}

func (x *PlayConfReply) Reset() {
	*x = PlayConfReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayConfReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayConfReply) ProtoMessage() {}

func (x *PlayConfReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayConfReply.ProtoReflect.Descriptor instead.
func (*PlayConfReply) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{18}
}

func (x *PlayConfReply) GetPlayConf() *PlayAbilityConf {
	if x != nil {
		return x.PlayConf
	}
	return nil
}

// 获取播放界面配置-请求
type PlayConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayConfReq) Reset() {
	*x = PlayConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayConfReq) ProtoMessage() {}

func (x *PlayConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayConfReq.ProtoReflect.Descriptor instead.
func (*PlayConfReq) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{19}
}

// 播放界面配置
type PlayConfState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设置类型
	ConfType ConfType `protobuf:"varint,1,opt,name=conf_type,json=confType,proto3,enum=bilibili.app.playurl.v1.ConfType" json:"conf_type,omitempty"`
	// 是否隐藏
	Show bool `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	// 配置字段值
	FieldValue *FieldValue `protobuf:"bytes,3,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	ConfValue  *ConfValue  `protobuf:"bytes,4,opt,name=conf_value,json=confValue,proto3" json:"conf_value,omitempty"`
}

func (x *PlayConfState) Reset() {
	*x = PlayConfState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayConfState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayConfState) ProtoMessage() {}

func (x *PlayConfState) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayConfState.ProtoReflect.Descriptor instead.
func (*PlayConfState) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{20}
}

func (x *PlayConfState) GetConfType() ConfType {
	if x != nil {
		return x.ConfType
	}
	return ConfType_NoType
}

func (x *PlayConfState) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *PlayConfState) GetFieldValue() *FieldValue {
	if x != nil {
		return x.FieldValue
	}
	return nil
}

func (x *PlayConfState) GetConfValue() *ConfValue {
	if x != nil {
		return x.ConfValue
	}
	return nil
}

type PlayLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       PlayLimitCode `protobuf:"varint,1,opt,name=code,proto3,enum=bilibili.app.playurl.v1.PlayLimitCode" json:"code,omitempty"`
	Message    string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SubMessage string        `protobuf:"bytes,3,opt,name=sub_message,json=subMessage,proto3" json:"sub_message,omitempty"`
	Button     *ButtonStyle  `protobuf:"bytes,4,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *PlayLimit) Reset() {
	*x = PlayLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayLimit) ProtoMessage() {}

func (x *PlayLimit) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayLimit.ProtoReflect.Descriptor instead.
func (*PlayLimit) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{21}
}

func (x *PlayLimit) GetCode() PlayLimitCode {
	if x != nil {
		return x.Code
	}
	return PlayLimitCode_PLCUnkown
}

func (x *PlayLimit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PlayLimit) GetSubMessage() string {
	if x != nil {
		return x.SubMessage
	}
	return ""
}

func (x *PlayLimit) GetButton() *ButtonStyle {
	if x != nil {
		return x.Button
	}
	return nil
}

// 视频地址-回复
type PlayURLReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清晰的
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 总时长(单位为ms)
	Timelength uint64 `protobuf:"varint,3,opt,name=timelength,proto3" json:"timelength,omitempty"`
	// 编码id
	VideoCodecid uint32 `protobuf:"varint,4,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid,omitempty"`
	// 视频流版本
	Fnver uint32 `protobuf:"varint,5,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 视频流格式
	Fnval uint32 `protobuf:"varint,6,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 是否支持投影
	VideoProject bool `protobuf:"varint,7,opt,name=video_project,json=videoProject,proto3" json:"video_project,omitempty"`
	// 分段视频流列表
	Durl []*ResponseUrl `protobuf:"bytes,8,rep,name=durl,proto3" json:"durl,omitempty"`
	// dash数据
	Dash *ResponseDash `protobuf:"bytes,9,opt,name=dash,proto3" json:"dash,omitempty"`
	// 是否非全二压
	NoRexcode int32 `protobuf:"varint,10,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	// 互动视频升级提示
	UpgradeLimit *UpgradeLimit `protobuf:"bytes,11,opt,name=upgrade_limit,json=upgradeLimit,proto3" json:"upgrade_limit,omitempty"`
	// 清晰度描述列表
	SupportFormats []*FormatDescription `protobuf:"bytes,12,rep,name=support_formats,json=supportFormats,proto3" json:"support_formats,omitempty"`
	// 视频格式
	Type VideoType `protobuf:"varint,13,opt,name=type,proto3,enum=bilibili.app.playurl.v1.VideoType" json:"type,omitempty"`
}

func (x *PlayURLReply) Reset() {
	*x = PlayURLReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayURLReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayURLReply) ProtoMessage() {}

func (x *PlayURLReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayURLReply.ProtoReflect.Descriptor instead.
func (*PlayURLReply) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{22}
}

func (x *PlayURLReply) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PlayURLReply) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PlayURLReply) GetTimelength() uint64 {
	if x != nil {
		return x.Timelength
	}
	return 0
}

func (x *PlayURLReply) GetVideoCodecid() uint32 {
	if x != nil {
		return x.VideoCodecid
	}
	return 0
}

func (x *PlayURLReply) GetFnver() uint32 {
	if x != nil {
		return x.Fnver
	}
	return 0
}

func (x *PlayURLReply) GetFnval() uint32 {
	if x != nil {
		return x.Fnval
	}
	return 0
}

func (x *PlayURLReply) GetVideoProject() bool {
	if x != nil {
		return x.VideoProject
	}
	return false
}

func (x *PlayURLReply) GetDurl() []*ResponseUrl {
	if x != nil {
		return x.Durl
	}
	return nil
}

func (x *PlayURLReply) GetDash() *ResponseDash {
	if x != nil {
		return x.Dash
	}
	return nil
}

func (x *PlayURLReply) GetNoRexcode() int32 {
	if x != nil {
		return x.NoRexcode
	}
	return 0
}

func (x *PlayURLReply) GetUpgradeLimit() *UpgradeLimit {
	if x != nil {
		return x.UpgradeLimit
	}
	return nil
}

func (x *PlayURLReply) GetSupportFormats() []*FormatDescription {
	if x != nil {
		return x.SupportFormats
	}
	return nil
}

func (x *PlayURLReply) GetType() VideoType {
	if x != nil {
		return x.Type
	}
	return VideoType_Unknown_VALUE
}

// 视频地址-请求
type PlayURLReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// 视频cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// 清晰度
	Qn int64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	// 视频流版本
	Fnver int32 `protobuf:"varint,4,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 视频流格式
	Fnval int32 `protobuf:"varint,5,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 下载模式
	// 0:播放 1:flv下载 2:dash下载
	Download uint32 `protobuf:"varint,6,opt,name=download,proto3" json:"download,omitempty"`
	// 流url强制是用域名
	// 0:允许使用ip 1:使用http 2:使用https
	ForceHost int32 `protobuf:"varint,7,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否4K
	Fourk bool `protobuf:"varint,8,opt,name=fourk,proto3" json:"fourk,omitempty"`
	// 当前页spm
	Spmid string `protobuf:"bytes,9,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// 上一页spm
	FromSpmid string `protobuf:"bytes,10,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
}

func (x *PlayURLReq) Reset() {
	*x = PlayURLReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayURLReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayURLReq) ProtoMessage() {}

func (x *PlayURLReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayURLReq.ProtoReflect.Descriptor instead.
func (*PlayURLReq) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{23}
}

func (x *PlayURLReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *PlayURLReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *PlayURLReq) GetQn() int64 {
	if x != nil {
		return x.Qn
	}
	return 0
}

func (x *PlayURLReq) GetFnver() int32 {
	if x != nil {
		return x.Fnver
	}
	return 0
}

func (x *PlayURLReq) GetFnval() int32 {
	if x != nil {
		return x.Fnval
	}
	return 0
}

func (x *PlayURLReq) GetDownload() uint32 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *PlayURLReq) GetForceHost() int32 {
	if x != nil {
		return x.ForceHost
	}
	return 0
}

func (x *PlayURLReq) GetFourk() bool {
	if x != nil {
		return x.Fourk
	}
	return false
}

func (x *PlayURLReq) GetSpmid() string {
	if x != nil {
		return x.Spmid
	}
	return ""
}

func (x *PlayURLReq) GetFromSpmid() string {
	if x != nil {
		return x.FromSpmid
	}
	return ""
}

// 播放页信息-回复
type PlayViewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频流信息
	VideoInfo *VideoInfo `protobuf:"bytes,1,opt,name=video_info,json=videoInfo,proto3" json:"video_info,omitempty"`
	// 播放控件用户自定义配置
	PlayConf *PlayAbilityConf `protobuf:"bytes,2,opt,name=play_conf,json=playConf,proto3" json:"play_conf,omitempty"`
	// 互动视频升级提示
	UpgradeLimit *UpgradeLimit `protobuf:"bytes,3,opt,name=upgrade_limit,json=upgradeLimit,proto3" json:"upgrade_limit,omitempty"`
	// Chronos灰度管理
	Chronos *Chronos `protobuf:"bytes,4,opt,name=chronos,proto3" json:"chronos,omitempty"`
	// 播放控件稿件配置
	PlayArc *PlayArcConf `protobuf:"bytes,5,opt,name=play_arc,json=playArc,proto3" json:"play_arc,omitempty"`
	// 事件
	Event     *Event     `protobuf:"bytes,6,opt,name=event,proto3" json:"event,omitempty"`
	Ab        *AB        `protobuf:"bytes,7,opt,name=ab,proto3" json:"ab,omitempty"`
	PlayLimit *PlayLimit `protobuf:"bytes,8,opt,name=play_limit,json=playLimit,proto3" json:"play_limit,omitempty"`
}

func (x *PlayViewReply) Reset() {
	*x = PlayViewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayViewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayViewReply) ProtoMessage() {}

func (x *PlayViewReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayViewReply.ProtoReflect.Descriptor instead.
func (*PlayViewReply) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{24}
}

func (x *PlayViewReply) GetVideoInfo() *VideoInfo {
	if x != nil {
		return x.VideoInfo
	}
	return nil
}

func (x *PlayViewReply) GetPlayConf() *PlayAbilityConf {
	if x != nil {
		return x.PlayConf
	}
	return nil
}

func (x *PlayViewReply) GetUpgradeLimit() *UpgradeLimit {
	if x != nil {
		return x.UpgradeLimit
	}
	return nil
}

func (x *PlayViewReply) GetChronos() *Chronos {
	if x != nil {
		return x.Chronos
	}
	return nil
}

func (x *PlayViewReply) GetPlayArc() *PlayArcConf {
	if x != nil {
		return x.PlayArc
	}
	return nil
}

func (x *PlayViewReply) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *PlayViewReply) GetAb() *AB {
	if x != nil {
		return x.Ab
	}
	return nil
}

func (x *PlayViewReply) GetPlayLimit() *PlayLimit {
	if x != nil {
		return x.PlayLimit
	}
	return nil
}

// 播放页信息-请求
type PlayViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// 视频cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// 清晰度
	Qn int64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	// 视频流版本
	Fnver int32 `protobuf:"varint,4,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 视频流格式
	Fnval int32 `protobuf:"varint,5,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 下载模式
	// 0:播放 1:flv下载 2:dash下载
	Download uint32 `protobuf:"varint,6,opt,name=download,proto3" json:"download,omitempty"`
	// 流url强制是用域名
	// 0:允许使用ip 1:使用http 2:使用https
	ForceHost int32 `protobuf:"varint,7,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否4K
	Fourk bool `protobuf:"varint,8,opt,name=fourk,proto3" json:"fourk,omitempty"`
	// 当前页spm
	Spmid string `protobuf:"bytes,9,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// 上一页spm
	FromSpmid string `protobuf:"bytes,10,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	// 青少年模式
	TeenagersMode int32 `protobuf:"varint,11,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	// 编码
	PreferCodecType CodeType `protobuf:"varint,12,opt,name=prefer_codec_type,json=preferCodecType,proto3,enum=bilibili.app.playurl.v1.CodeType" json:"prefer_codec_type,omitempty"`
	// 业务类型
	Business     Business `protobuf:"varint,13,opt,name=business,proto3,enum=bilibili.app.playurl.v1.Business" json:"business,omitempty"`
	VoiceBalance int64    `protobuf:"varint,14,opt,name=voice_balance,json=voiceBalance,proto3" json:"voice_balance,omitempty"`
}

func (x *PlayViewReq) Reset() {
	*x = PlayViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayViewReq) ProtoMessage() {}

func (x *PlayViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayViewReq.ProtoReflect.Descriptor instead.
func (*PlayViewReq) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{25}
}

func (x *PlayViewReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *PlayViewReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *PlayViewReq) GetQn() int64 {
	if x != nil {
		return x.Qn
	}
	return 0
}

func (x *PlayViewReq) GetFnver() int32 {
	if x != nil {
		return x.Fnver
	}
	return 0
}

func (x *PlayViewReq) GetFnval() int32 {
	if x != nil {
		return x.Fnval
	}
	return 0
}

func (x *PlayViewReq) GetDownload() uint32 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *PlayViewReq) GetForceHost() int32 {
	if x != nil {
		return x.ForceHost
	}
	return 0
}

func (x *PlayViewReq) GetFourk() bool {
	if x != nil {
		return x.Fourk
	}
	return false
}

func (x *PlayViewReq) GetSpmid() string {
	if x != nil {
		return x.Spmid
	}
	return ""
}

func (x *PlayViewReq) GetFromSpmid() string {
	if x != nil {
		return x.FromSpmid
	}
	return ""
}

func (x *PlayViewReq) GetTeenagersMode() int32 {
	if x != nil {
		return x.TeenagersMode
	}
	return 0
}

func (x *PlayViewReq) GetPreferCodecType() CodeType {
	if x != nil {
		return x.PreferCodecType
	}
	return CodeType_NOCODE
}

func (x *PlayViewReq) GetBusiness() Business {
	if x != nil {
		return x.Business
	}
	return Business_UNKNOWN
}

func (x *PlayViewReq) GetVoiceBalance() int64 {
	if x != nil {
		return x.VoiceBalance
	}
	return 0
}

// 投屏地址-响应
type ProjectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *PlayURLReply `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ProjectReply) Reset() {
	*x = ProjectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectReply) ProtoMessage() {}

func (x *ProjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectReply.ProtoReflect.Descriptor instead.
func (*ProjectReply) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{26}
}

func (x *ProjectReply) GetProject() *PlayURLReply {
	if x != nil {
		return x.Project
	}
	return nil
}

// 投屏地址-请求
type ProjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稿件avid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// 视频cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// 清晰度
	Qn int64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	// 视频流版本
	Fnver int32 `protobuf:"varint,4,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 视频流格式
	Fnval int32 `protobuf:"varint,5,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 下载模式
	// 0:播放 1:flv下载 2:dash下载
	Download uint32 `protobuf:"varint,6,opt,name=download,proto3" json:"download,omitempty"`
	// 流url强制是用域名
	// 0:允许使用ip 1:使用http 2:使用https
	ForceHost int32 `protobuf:"varint,7,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否4K
	Fourk bool `protobuf:"varint,8,opt,name=fourk,proto3" json:"fourk,omitempty"`
	// 当前页spm
	Spmid string `protobuf:"bytes,9,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// 上一页spm
	FromSpmid string `protobuf:"bytes,10,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	// 使用协议
	// 0:默认乐播 1:自建协议 2:云投屏 3:airplay
	Protocol int32 `protobuf:"varint,11,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// 投屏设备
	// 0:默认其他 1:OTT设备
	DeviceType int32 `protobuf:"varint,12,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
}

func (x *ProjectReq) Reset() {
	*x = ProjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectReq) ProtoMessage() {}

func (x *ProjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectReq.ProtoReflect.Descriptor instead.
func (*ProjectReq) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{27}
}

func (x *ProjectReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *ProjectReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *ProjectReq) GetQn() int64 {
	if x != nil {
		return x.Qn
	}
	return 0
}

func (x *ProjectReq) GetFnver() int32 {
	if x != nil {
		return x.Fnver
	}
	return 0
}

func (x *ProjectReq) GetFnval() int32 {
	if x != nil {
		return x.Fnval
	}
	return 0
}

func (x *ProjectReq) GetDownload() uint32 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *ProjectReq) GetForceHost() int32 {
	if x != nil {
		return x.ForceHost
	}
	return 0
}

func (x *ProjectReq) GetFourk() bool {
	if x != nil {
		return x.Fourk
	}
	return false
}

func (x *ProjectReq) GetSpmid() string {
	if x != nil {
		return x.Spmid
	}
	return ""
}

func (x *ProjectReq) GetFromSpmid() string {
	if x != nil {
		return x.FromSpmid
	}
	return ""
}

func (x *ProjectReq) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *ProjectReq) GetDeviceType() int32 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

// dash数据
type ResponseDash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dash视频流
	Video []*DashItem `protobuf:"bytes,1,rep,name=video,proto3" json:"video,omitempty"`
	// dash伴音流
	Audio []*DashItem `protobuf:"bytes,2,rep,name=audio,proto3" json:"audio,omitempty"`
}

func (x *ResponseDash) Reset() {
	*x = ResponseDash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDash) ProtoMessage() {}

func (x *ResponseDash) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDash.ProtoReflect.Descriptor instead.
func (*ResponseDash) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{28}
}

func (x *ResponseDash) GetVideo() []*DashItem {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *ResponseDash) GetAudio() []*DashItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

// 分段流条目
type ResponseUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分段序号
	Order uint32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	// 分段时长
	Length uint64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// 分段大小
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// 主线流
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,5,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
}

func (x *ResponseUrl) Reset() {
	*x = ResponseUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUrl) ProtoMessage() {}

func (x *ResponseUrl) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUrl.ProtoReflect.Descriptor instead.
func (*ResponseUrl) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{29}
}

func (x *ResponseUrl) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ResponseUrl) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ResponseUrl) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ResponseUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ResponseUrl) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *ResponseUrl) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

// 分段视频流
type SegmentVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分段视频流列表
	Segment []*ResponseUrl `protobuf:"bytes,1,rep,name=segment,proto3" json:"segment,omitempty"`
}

func (x *SegmentVideo) Reset() {
	*x = SegmentVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentVideo) ProtoMessage() {}

func (x *SegmentVideo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentVideo.ProtoReflect.Descriptor instead.
func (*SegmentVideo) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{30}
}

func (x *SegmentVideo) GetSegment() []*ResponseUrl {
	if x != nil {
		return x.Segment
	}
	return nil
}

// 震动
type Shake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 文件地址
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Shake) Reset() {
	*x = Shake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shake) ProtoMessage() {}

func (x *Shake) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shake.ProtoReflect.Descriptor instead.
func (*Shake) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{31}
}

func (x *Shake) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

// 视频流信息
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 元数据
	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=stream_info,json=streamInfo,proto3" json:"stream_info,omitempty"`
	// 流数据
	//
	// Types that are assignable to Content:
	//
	//	*Stream_DashVideo
	//	*Stream_SegmentVideo
	Content isStream_Content `protobuf_oneof:"content"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{32}
}

func (x *Stream) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (m *Stream) GetContent() isStream_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Stream) GetDashVideo() *DashVideo {
	if x, ok := x.GetContent().(*Stream_DashVideo); ok {
		return x.DashVideo
	}
	return nil
}

func (x *Stream) GetSegmentVideo() *SegmentVideo {
	if x, ok := x.GetContent().(*Stream_SegmentVideo); ok {
		return x.SegmentVideo
	}
	return nil
}

type isStream_Content interface {
	isStream_Content()
}

type Stream_DashVideo struct {
	// dash流
	DashVideo *DashVideo `protobuf:"bytes,2,opt,name=dash_video,json=dashVideo,proto3,oneof"`
}

type Stream_SegmentVideo struct {
	// 分段流
	SegmentVideo *SegmentVideo `protobuf:"bytes,3,opt,name=segment_video,json=segmentVideo,proto3,oneof"`
}

func (*Stream_DashVideo) isStream_Content() {}

func (*Stream_SegmentVideo) isStream_Content() {}

// 流媒体元数据
type StreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清晰度
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 格式描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 错误码
	ErrCode PlayErr `protobuf:"varint,4,opt,name=err_code,json=errCode,proto3,enum=bilibili.app.playurl.v1.PlayErr" json:"err_code,omitempty"`
	// 不满足条件信息
	Limit *StreamLimit `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// 是否需要vip
	NeedVip bool `protobuf:"varint,6,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`
	// 是否需要登录
	NeedLogin bool `protobuf:"varint,7,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	// 是否完整
	Intact bool `protobuf:"varint,8,opt,name=intact,proto3" json:"intact,omitempty"`
	// 是否非全二压
	NoRexcode bool `protobuf:"varint,9,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	// 清晰度属性位
	Attribute int64 `protobuf:"varint,10,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// 新版格式描述
	NewDescription string `protobuf:"bytes,11,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
	// 格式文字
	DisplayDesc string `protobuf:"bytes,12,opt,name=display_desc,json=displayDesc,proto3" json:"display_desc,omitempty"`
	// 新版格式描述备注
	Superscript string `protobuf:"bytes,13,opt,name=superscript,proto3" json:"superscript,omitempty"`
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{33}
}

func (x *StreamInfo) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *StreamInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *StreamInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StreamInfo) GetErrCode() PlayErr {
	if x != nil {
		return x.ErrCode
	}
	return PlayErr_NoErr
}

func (x *StreamInfo) GetLimit() *StreamLimit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *StreamInfo) GetNeedVip() bool {
	if x != nil {
		return x.NeedVip
	}
	return false
}

func (x *StreamInfo) GetNeedLogin() bool {
	if x != nil {
		return x.NeedLogin
	}
	return false
}

func (x *StreamInfo) GetIntact() bool {
	if x != nil {
		return x.Intact
	}
	return false
}

func (x *StreamInfo) GetNoRexcode() bool {
	if x != nil {
		return x.NoRexcode
	}
	return false
}

func (x *StreamInfo) GetAttribute() int64 {
	if x != nil {
		return x.Attribute
	}
	return 0
}

func (x *StreamInfo) GetNewDescription() string {
	if x != nil {
		return x.NewDescription
	}
	return ""
}

func (x *StreamInfo) GetDisplayDesc() string {
	if x != nil {
		return x.DisplayDesc
	}
	return ""
}

func (x *StreamInfo) GetSuperscript() string {
	if x != nil {
		return x.Superscript
	}
	return ""
}

// 清晰度不满足条件信息
type StreamLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 提示信息
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StreamLimit) Reset() {
	*x = StreamLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLimit) ProtoMessage() {}

func (x *StreamLimit) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLimit.ProtoReflect.Descriptor instead.
func (*StreamLimit) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{34}
}

func (x *StreamLimit) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StreamLimit) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *StreamLimit) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 互动视频升级按钮信息
type UpgradeButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 链接
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *UpgradeButton) Reset() {
	*x = UpgradeButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeButton) ProtoMessage() {}

func (x *UpgradeButton) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeButton.ProtoReflect.Descriptor instead.
func (*UpgradeButton) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{35}
}

func (x *UpgradeButton) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradeButton) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// 互动视频升级提示
type UpgradeLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误信息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 图片url
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// 按钮信息
	Button *UpgradeButton `protobuf:"bytes,4,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *UpgradeLimit) Reset() {
	*x = UpgradeLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeLimit) ProtoMessage() {}

func (x *UpgradeLimit) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeLimit.ProtoReflect.Descriptor instead.
func (*UpgradeLimit) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{36}
}

func (x *UpgradeLimit) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpgradeLimit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpgradeLimit) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *UpgradeLimit) GetButton() *UpgradeButton {
	if x != nil {
		return x.Button
	}
	return nil
}

// 视频url信息
type VideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频清晰度
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 视频格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 视频时长
	Timelength uint64 `protobuf:"varint,3,opt,name=timelength,proto3" json:"timelength,omitempty"`
	// 视频编码id
	VideoCodecid uint32 `protobuf:"varint,4,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid,omitempty"`
	// 视频流
	StreamList []*Stream `protobuf:"bytes,5,rep,name=stream_list,json=streamList,proto3" json:"stream_list,omitempty"`
	// 伴音流
	DashAudio []*DashItem `protobuf:"bytes,6,rep,name=dash_audio,json=dashAudio,proto3" json:"dash_audio,omitempty"`
	// 杜比伴音流
	Dolby  *DolbyItem  `protobuf:"bytes,7,opt,name=dolby,proto3" json:"dolby,omitempty"`
	Volume *VolumeInfo `protobuf:"bytes,8,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *VideoInfo) Reset() {
	*x = VideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoInfo) ProtoMessage() {}

func (x *VideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoInfo.ProtoReflect.Descriptor instead.
func (*VideoInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{37}
}

func (x *VideoInfo) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *VideoInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VideoInfo) GetTimelength() uint64 {
	if x != nil {
		return x.Timelength
	}
	return 0
}

func (x *VideoInfo) GetVideoCodecid() uint32 {
	if x != nil {
		return x.VideoCodecid
	}
	return 0
}

func (x *VideoInfo) GetStreamList() []*Stream {
	if x != nil {
		return x.StreamList
	}
	return nil
}

func (x *VideoInfo) GetDashAudio() []*DashItem {
	if x != nil {
		return x.DashAudio
	}
	return nil
}

func (x *VideoInfo) GetDolby() *DolbyItem {
	if x != nil {
		return x.Dolby
	}
	return nil
}

func (x *VideoInfo) GetVolume() *VolumeInfo {
	if x != nil {
		return x.Volume
	}
	return nil
}

type VolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasuredI         float64 `protobuf:"fixed64,1,opt,name=measured_i,json=measuredI,proto3" json:"measured_i,omitempty"`
	MeasuredLra       float64 `protobuf:"fixed64,2,opt,name=measured_lra,json=measuredLra,proto3" json:"measured_lra,omitempty"`
	MeasuredTp        float64 `protobuf:"fixed64,3,opt,name=measured_tp,json=measuredTp,proto3" json:"measured_tp,omitempty"`
	MeasuredThreshold float64 `protobuf:"fixed64,4,opt,name=measured_threshold,json=measuredThreshold,proto3" json:"measured_threshold,omitempty"`
	TargetOffset      float64 `protobuf:"fixed64,5,opt,name=target_offset,json=targetOffset,proto3" json:"target_offset,omitempty"`
	TargetI           float64 `protobuf:"fixed64,6,opt,name=target_i,json=targetI,proto3" json:"target_i,omitempty"`
	TargetTp          float64 `protobuf:"fixed64,7,opt,name=target_tp,json=targetTp,proto3" json:"target_tp,omitempty"`
}

func (x *VolumeInfo) Reset() {
	*x = VolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfo) ProtoMessage() {}

func (x *VolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_app_playurl_v1_playurl_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfo.ProtoReflect.Descriptor instead.
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP(), []int{38}
}

func (x *VolumeInfo) GetMeasuredI() float64 {
	if x != nil {
		return x.MeasuredI
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredLra() float64 {
	if x != nil {
		return x.MeasuredLra
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredTp() float64 {
	if x != nil {
		return x.MeasuredTp
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredThreshold() float64 {
	if x != nil {
		return x.MeasuredThreshold
	}
	return 0
}

func (x *VolumeInfo) GetTargetOffset() float64 {
	if x != nil {
		return x.TargetOffset
	}
	return 0
}

func (x *VolumeInfo) GetTargetI() float64 {
	if x != nil {
		return x.TargetI
	}
	return 0
}

func (x *VolumeInfo) GetTargetTp() float64 {
	if x != nil {
		return x.TargetTp
	}
	return 0
}

var File_bilibili_app_playurl_v1_playurl_proto protoreflect.FileDescriptor

var file_bilibili_app_playurl_v1_playurl_proto_rawDesc = []byte{
	0x0a, 0x25, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x22, 0x53, 0x0a, 0x02, 0x41, 0x42, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x67, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x90, 0x01, 0x0a, 0x07, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0d,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x07, 0x43, 0x68, 0x72, 0x6f,
	0x6e, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x78, 0x0a, 0x0b, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x4c,
	0x69, 0x6e, 0x6b, 0x22, 0xe8, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x08, 0x44,
	0x61, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x73, 0x73, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73,
	0x73, 0x68, 0x22, 0xce, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x78, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x78, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x73, 0x73, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50,
	0x73, 0x73, 0x68, 0x22, 0xaa, 0x01, 0x0a, 0x09, 0x44, 0x6f, 0x6c, 0x62, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6c, 0x62, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x54, 0x4d, 0x4f, 0x53, 0x10, 0x02,
	0x22, 0x3d, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x22,
	0x5c, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2f, 0x0a,
	0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5,
	0x01, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x57, 0x0a, 0x06, 0x47, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xdc, 0x10, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x54, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a, 0x09, 0x66, 0x6c, 0x69,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x08, 0x66, 0x6c, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x08, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x47, 0x0a, 0x0d, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x50, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x10, 0x70,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x44, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x55,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x50, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a, 0x09, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x6c, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x41, 0x0a,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x4c, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0e,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4c,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0e, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x49, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4b, 0x0a, 0x0f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x44, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4e, 0x0a, 0x11,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x41, 0x0a, 0x0a,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x09, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x46, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x44, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x44, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x6d, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x41, 0x0a, 0x0a, 0x64,
	0x6f, 0x6c, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x09, 0x64, 0x6f, 0x6c, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4e,
	0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0xf1,
	0x10, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x52,
	0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x12,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x6c, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x66, 0x6c, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x45, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4e,
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x10, 0x70, 0x6c,
	0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x42,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x4e, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3d, 0x0a, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x43, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x3d, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3f,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x4a, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0e, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x50, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x11, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x49, 0x0a,
	0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x42, 0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x64, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x0a, 0x65, 0x64, 0x69, 0x74, 0x44, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4c, 0x0a, 0x11, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x09, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x44, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x44, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x44, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x61, 0x6e, 0x6f, 0x72, 0x61,
	0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x0c, 0x70, 0x61, 0x6e, 0x6f, 0x72, 0x61, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3f, 0x0a,
	0x0a, 0x64, 0x6f, 0x6c, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x09, 0x64, 0x6f, 0x6c, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x54,
	0x0a, 0x15, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x13, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x56, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x22,
	0x56, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x45, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x22, 0xec, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x44, 0x0a, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0xc3, 0x04, 0x0a, 0x0c, 0x50, 0x6c, 0x61,
	0x79, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x64, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x52, 0x04, 0x64, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x78,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65,
	0x78, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x53, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf2,
	0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x71,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x72,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x72, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x70, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x6d,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x70,
	0x6d, 0x69, 0x64, 0x22, 0x88, 0x04, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x4a, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x73, 0x52, 0x07,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x61, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x61, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x42, 0x52, 0x02, 0x61, 0x62, 0x12, 0x41, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcd,
	0x03, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x71, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75,
	0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x72, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x70, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x70,
	0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x70, 0x6d, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x65,
	0x65, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x4f,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0xaf, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x71, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75,
	0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x72, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x70, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x70,
	0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x70, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x73, 0x68, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x37, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0x4e, 0x0a, 0x0c, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x05, 0x53, 0x68, 0x61,
	0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x4c, 0x0a, 0x0d,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd6, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x78, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x78, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x47,
	0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x39, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0xfd, 0x02, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x12, 0x38, 0x0a, 0x05, 0x64, 0x6f, 0x6c, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6c, 0x62, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x64, 0x6f, 0x6c, 0x62, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x5f, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x64, 0x49, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x72, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x54, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x70, 0x2a, 0x22, 0x0a, 0x08, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x08, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45, 0x32, 0x36, 0x34, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45, 0x32, 0x36, 0x35, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4f, 0x44, 0x45, 0x41, 0x56, 0x31, 0x10, 0x03, 0x2a, 0xaf, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4c, 0x49, 0x50, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x41, 0x53, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x55, 0x42, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41,
	0x59, 0x42, 0x41, 0x43, 0x4b, 0x52, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x49, 0x4d, 0x45, 0x55, 0x50, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x42,
	0x41, 0x43, 0x4b, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x41,
	0x4c, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x43, 0x4b,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x49, 0x4b, 0x45, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x4c, 0x49, 0x4b,
	0x45, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x0c, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x4c, 0x45, 0x43, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x10,
	0x11, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x15, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x44, 0x4d, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x48, 0x41, 0x4b, 0x45, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x44,
	0x4d, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x44, 0x4d, 0x10, 0x1a,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x4e, 0x4f, 0x52, 0x41, 0x4d, 0x41, 0x10, 0x1b, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x4f, 0x4c, 0x42, 0x59, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x1d, 0x2a, 0x2e, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01,
	0x42, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x03, 0x2a, 0x31, 0x0a, 0x07, 0x50, 0x6c,
	0x61, 0x79, 0x45, 0x72, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x01, 0x2a, 0x32, 0x0a,
	0x0d, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x4c, 0x43, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x4c, 0x43, 0x55, 0x67, 0x63, 0x4e, 0x6f, 0x74, 0x50, 0x61, 0x79, 0x65, 0x64, 0x10,
	0x01, 0x2a, 0x4c, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x56, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x53, 0x48, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x50, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x32,
	0xd1, 0x03, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x55, 0x0a, 0x07, 0x50,
	0x6c, 0x61, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x55, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x12, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x64, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x28, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x58, 0x69, 0x61, 0x6f, 0x4d, 0x69, 0x6b, 0x75, 0x30, 0x31, 0x2f, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67,
	0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x70,
	0x6c, 0x61, 0x79, 0x75, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bilibili_app_playurl_v1_playurl_proto_rawDescOnce sync.Once
	file_bilibili_app_playurl_v1_playurl_proto_rawDescData = file_bilibili_app_playurl_v1_playurl_proto_rawDesc
)

func file_bilibili_app_playurl_v1_playurl_proto_rawDescGZIP() []byte {
	file_bilibili_app_playurl_v1_playurl_proto_rawDescOnce.Do(func() {
		file_bilibili_app_playurl_v1_playurl_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_app_playurl_v1_playurl_proto_rawDescData)
	})
	return file_bilibili_app_playurl_v1_playurl_proto_rawDescData
}

var file_bilibili_app_playurl_v1_playurl_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_bilibili_app_playurl_v1_playurl_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_bilibili_app_playurl_v1_playurl_proto_goTypes = []interface{}{
	(Business)(0),             // 0: bilibili.app.playurl.v1.Business
	(CodeType)(0),             // 1: bilibili.app.playurl.v1.CodeType
	(ConfType)(0),             // 2: bilibili.app.playurl.v1.ConfType
	(Group)(0),                // 3: bilibili.app.playurl.v1.Group
	(PlayErr)(0),              // 4: bilibili.app.playurl.v1.PlayErr
	(PlayLimitCode)(0),        // 5: bilibili.app.playurl.v1.PlayLimitCode
	(VideoType)(0),            // 6: bilibili.app.playurl.v1.VideoType
	(DolbyItem_Type)(0),       // 7: bilibili.app.playurl.v1.DolbyItem.Type
	(*AB)(nil),                // 8: bilibili.app.playurl.v1.AB
	(*ArcConf)(nil),           // 9: bilibili.app.playurl.v1.ArcConf
	(*Chronos)(nil),           // 10: bilibili.app.playurl.v1.Chronos
	(*ButtonStyle)(nil),       // 11: bilibili.app.playurl.v1.ButtonStyle
	(*CloudConf)(nil),         // 12: bilibili.app.playurl.v1.CloudConf
	(*ConfValue)(nil),         // 13: bilibili.app.playurl.v1.ConfValue
	(*DashItem)(nil),          // 14: bilibili.app.playurl.v1.DashItem
	(*DashVideo)(nil),         // 15: bilibili.app.playurl.v1.DashVideo
	(*DolbyItem)(nil),         // 16: bilibili.app.playurl.v1.DolbyItem
	(*Event)(nil),             // 17: bilibili.app.playurl.v1.Event
	(*ExtraContent)(nil),      // 18: bilibili.app.playurl.v1.ExtraContent
	(*FieldValue)(nil),        // 19: bilibili.app.playurl.v1.FieldValue
	(*FormatDescription)(nil), // 20: bilibili.app.playurl.v1.FormatDescription
	(*Glance)(nil),            // 21: bilibili.app.playurl.v1.Glance
	(*PlayAbilityConf)(nil),   // 22: bilibili.app.playurl.v1.PlayAbilityConf
	(*PlayArcConf)(nil),       // 23: bilibili.app.playurl.v1.PlayArcConf
	(*PlayConfEditReply)(nil), // 24: bilibili.app.playurl.v1.PlayConfEditReply
	(*PlayConfEditReq)(nil),   // 25: bilibili.app.playurl.v1.PlayConfEditReq
	(*PlayConfReply)(nil),     // 26: bilibili.app.playurl.v1.PlayConfReply
	(*PlayConfReq)(nil),       // 27: bilibili.app.playurl.v1.PlayConfReq
	(*PlayConfState)(nil),     // 28: bilibili.app.playurl.v1.PlayConfState
	(*PlayLimit)(nil),         // 29: bilibili.app.playurl.v1.PlayLimit
	(*PlayURLReply)(nil),      // 30: bilibili.app.playurl.v1.PlayURLReply
	(*PlayURLReq)(nil),        // 31: bilibili.app.playurl.v1.PlayURLReq
	(*PlayViewReply)(nil),     // 32: bilibili.app.playurl.v1.PlayViewReply
	(*PlayViewReq)(nil),       // 33: bilibili.app.playurl.v1.PlayViewReq
	(*ProjectReply)(nil),      // 34: bilibili.app.playurl.v1.ProjectReply
	(*ProjectReq)(nil),        // 35: bilibili.app.playurl.v1.ProjectReq
	(*ResponseDash)(nil),      // 36: bilibili.app.playurl.v1.ResponseDash
	(*ResponseUrl)(nil),       // 37: bilibili.app.playurl.v1.ResponseUrl
	(*SegmentVideo)(nil),      // 38: bilibili.app.playurl.v1.SegmentVideo
	(*Shake)(nil),             // 39: bilibili.app.playurl.v1.Shake
	(*Stream)(nil),            // 40: bilibili.app.playurl.v1.Stream
	(*StreamInfo)(nil),        // 41: bilibili.app.playurl.v1.StreamInfo
	(*StreamLimit)(nil),       // 42: bilibili.app.playurl.v1.StreamLimit
	(*UpgradeButton)(nil),     // 43: bilibili.app.playurl.v1.UpgradeButton
	(*UpgradeLimit)(nil),      // 44: bilibili.app.playurl.v1.UpgradeLimit
	(*VideoInfo)(nil),         // 45: bilibili.app.playurl.v1.VideoInfo
	(*VolumeInfo)(nil),        // 46: bilibili.app.playurl.v1.VolumeInfo
}
var file_bilibili_app_playurl_v1_playurl_proto_depIdxs = []int32{
	21,  // 0: bilibili.app.playurl.v1.AB.glance:type_name -> bilibili.app.playurl.v1.Glance
	18,  // 1: bilibili.app.playurl.v1.ArcConf.extra_content:type_name -> bilibili.app.playurl.v1.ExtraContent
	2,   // 2: bilibili.app.playurl.v1.CloudConf.conf_type:type_name -> bilibili.app.playurl.v1.ConfType
	19,  // 3: bilibili.app.playurl.v1.CloudConf.field_value:type_name -> bilibili.app.playurl.v1.FieldValue
	13,  // 4: bilibili.app.playurl.v1.CloudConf.conf_value:type_name -> bilibili.app.playurl.v1.ConfValue
	7,   // 5: bilibili.app.playurl.v1.DolbyItem.type:type_name -> bilibili.app.playurl.v1.DolbyItem.Type
	14,  // 6: bilibili.app.playurl.v1.DolbyItem.audio:type_name -> bilibili.app.playurl.v1.DashItem
	39,  // 7: bilibili.app.playurl.v1.Event.shake:type_name -> bilibili.app.playurl.v1.Shake
	12,  // 8: bilibili.app.playurl.v1.PlayAbilityConf.background_play_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 9: bilibili.app.playurl.v1.PlayAbilityConf.flip_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 10: bilibili.app.playurl.v1.PlayAbilityConf.cast_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 11: bilibili.app.playurl.v1.PlayAbilityConf.feedback_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 12: bilibili.app.playurl.v1.PlayAbilityConf.subtitle_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 13: bilibili.app.playurl.v1.PlayAbilityConf.playback_rate_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 14: bilibili.app.playurl.v1.PlayAbilityConf.time_up_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 15: bilibili.app.playurl.v1.PlayAbilityConf.playback_mode_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 16: bilibili.app.playurl.v1.PlayAbilityConf.scale_mode_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 17: bilibili.app.playurl.v1.PlayAbilityConf.like_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 18: bilibili.app.playurl.v1.PlayAbilityConf.dislike_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 19: bilibili.app.playurl.v1.PlayAbilityConf.coin_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 20: bilibili.app.playurl.v1.PlayAbilityConf.elec_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 21: bilibili.app.playurl.v1.PlayAbilityConf.share_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 22: bilibili.app.playurl.v1.PlayAbilityConf.screen_shot_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 23: bilibili.app.playurl.v1.PlayAbilityConf.lock_screen_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 24: bilibili.app.playurl.v1.PlayAbilityConf.recommend_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 25: bilibili.app.playurl.v1.PlayAbilityConf.playback_speed_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 26: bilibili.app.playurl.v1.PlayAbilityConf.definition_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 27: bilibili.app.playurl.v1.PlayAbilityConf.selections_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 28: bilibili.app.playurl.v1.PlayAbilityConf.next_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 29: bilibili.app.playurl.v1.PlayAbilityConf.edit_dm_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 30: bilibili.app.playurl.v1.PlayAbilityConf.small_window_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 31: bilibili.app.playurl.v1.PlayAbilityConf.shake_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 32: bilibili.app.playurl.v1.PlayAbilityConf.outer_dm_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 33: bilibili.app.playurl.v1.PlayAbilityConf.innerDmDisable:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 34: bilibili.app.playurl.v1.PlayAbilityConf.inner_dm_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 35: bilibili.app.playurl.v1.PlayAbilityConf.dolby_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	12,  // 36: bilibili.app.playurl.v1.PlayAbilityConf.color_filter_conf:type_name -> bilibili.app.playurl.v1.CloudConf
	9,   // 37: bilibili.app.playurl.v1.PlayArcConf.background_play_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 38: bilibili.app.playurl.v1.PlayArcConf.flip_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 39: bilibili.app.playurl.v1.PlayArcConf.cast_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 40: bilibili.app.playurl.v1.PlayArcConf.feedback_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 41: bilibili.app.playurl.v1.PlayArcConf.subtitle_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 42: bilibili.app.playurl.v1.PlayArcConf.playback_rate_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 43: bilibili.app.playurl.v1.PlayArcConf.time_up_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 44: bilibili.app.playurl.v1.PlayArcConf.playback_mode_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 45: bilibili.app.playurl.v1.PlayArcConf.scale_mode_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 46: bilibili.app.playurl.v1.PlayArcConf.like_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 47: bilibili.app.playurl.v1.PlayArcConf.dislike_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 48: bilibili.app.playurl.v1.PlayArcConf.coin_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 49: bilibili.app.playurl.v1.PlayArcConf.elec_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 50: bilibili.app.playurl.v1.PlayArcConf.share_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 51: bilibili.app.playurl.v1.PlayArcConf.screen_shot_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 52: bilibili.app.playurl.v1.PlayArcConf.lock_screen_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 53: bilibili.app.playurl.v1.PlayArcConf.recommend_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 54: bilibili.app.playurl.v1.PlayArcConf.playback_speed_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 55: bilibili.app.playurl.v1.PlayArcConf.definition_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 56: bilibili.app.playurl.v1.PlayArcConf.selections_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 57: bilibili.app.playurl.v1.PlayArcConf.next_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 58: bilibili.app.playurl.v1.PlayArcConf.edit_dm_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 59: bilibili.app.playurl.v1.PlayArcConf.small_window_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 60: bilibili.app.playurl.v1.PlayArcConf.shake_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 61: bilibili.app.playurl.v1.PlayArcConf.outer_dm_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 62: bilibili.app.playurl.v1.PlayArcConf.inner_dm_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 63: bilibili.app.playurl.v1.PlayArcConf.panorama_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 64: bilibili.app.playurl.v1.PlayArcConf.dolby_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 65: bilibili.app.playurl.v1.PlayArcConf.screen_recording_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	9,   // 66: bilibili.app.playurl.v1.PlayArcConf.color_filter_conf:type_name -> bilibili.app.playurl.v1.ArcConf
	28,  // 67: bilibili.app.playurl.v1.PlayConfEditReq.play_conf:type_name -> bilibili.app.playurl.v1.PlayConfState
	22,  // 68: bilibili.app.playurl.v1.PlayConfReply.play_conf:type_name -> bilibili.app.playurl.v1.PlayAbilityConf
	2,   // 69: bilibili.app.playurl.v1.PlayConfState.conf_type:type_name -> bilibili.app.playurl.v1.ConfType
	19,  // 70: bilibili.app.playurl.v1.PlayConfState.field_value:type_name -> bilibili.app.playurl.v1.FieldValue
	13,  // 71: bilibili.app.playurl.v1.PlayConfState.conf_value:type_name -> bilibili.app.playurl.v1.ConfValue
	5,   // 72: bilibili.app.playurl.v1.PlayLimit.code:type_name -> bilibili.app.playurl.v1.PlayLimitCode
	11,  // 73: bilibili.app.playurl.v1.PlayLimit.button:type_name -> bilibili.app.playurl.v1.ButtonStyle
	37,  // 74: bilibili.app.playurl.v1.PlayURLReply.durl:type_name -> bilibili.app.playurl.v1.ResponseUrl
	36,  // 75: bilibili.app.playurl.v1.PlayURLReply.dash:type_name -> bilibili.app.playurl.v1.ResponseDash
	44,  // 76: bilibili.app.playurl.v1.PlayURLReply.upgrade_limit:type_name -> bilibili.app.playurl.v1.UpgradeLimit
	20,  // 77: bilibili.app.playurl.v1.PlayURLReply.support_formats:type_name -> bilibili.app.playurl.v1.FormatDescription
	6,   // 78: bilibili.app.playurl.v1.PlayURLReply.type:type_name -> bilibili.app.playurl.v1.VideoType
	45,  // 79: bilibili.app.playurl.v1.PlayViewReply.video_info:type_name -> bilibili.app.playurl.v1.VideoInfo
	22,  // 80: bilibili.app.playurl.v1.PlayViewReply.play_conf:type_name -> bilibili.app.playurl.v1.PlayAbilityConf
	44,  // 81: bilibili.app.playurl.v1.PlayViewReply.upgrade_limit:type_name -> bilibili.app.playurl.v1.UpgradeLimit
	10,  // 82: bilibili.app.playurl.v1.PlayViewReply.chronos:type_name -> bilibili.app.playurl.v1.Chronos
	23,  // 83: bilibili.app.playurl.v1.PlayViewReply.play_arc:type_name -> bilibili.app.playurl.v1.PlayArcConf
	17,  // 84: bilibili.app.playurl.v1.PlayViewReply.event:type_name -> bilibili.app.playurl.v1.Event
	8,   // 85: bilibili.app.playurl.v1.PlayViewReply.ab:type_name -> bilibili.app.playurl.v1.AB
	29,  // 86: bilibili.app.playurl.v1.PlayViewReply.play_limit:type_name -> bilibili.app.playurl.v1.PlayLimit
	1,   // 87: bilibili.app.playurl.v1.PlayViewReq.prefer_codec_type:type_name -> bilibili.app.playurl.v1.CodeType
	0,   // 88: bilibili.app.playurl.v1.PlayViewReq.business:type_name -> bilibili.app.playurl.v1.Business
	30,  // 89: bilibili.app.playurl.v1.ProjectReply.project:type_name -> bilibili.app.playurl.v1.PlayURLReply
	14,  // 90: bilibili.app.playurl.v1.ResponseDash.video:type_name -> bilibili.app.playurl.v1.DashItem
	14,  // 91: bilibili.app.playurl.v1.ResponseDash.audio:type_name -> bilibili.app.playurl.v1.DashItem
	37,  // 92: bilibili.app.playurl.v1.SegmentVideo.segment:type_name -> bilibili.app.playurl.v1.ResponseUrl
	41,  // 93: bilibili.app.playurl.v1.Stream.stream_info:type_name -> bilibili.app.playurl.v1.StreamInfo
	15,  // 94: bilibili.app.playurl.v1.Stream.dash_video:type_name -> bilibili.app.playurl.v1.DashVideo
	38,  // 95: bilibili.app.playurl.v1.Stream.segment_video:type_name -> bilibili.app.playurl.v1.SegmentVideo
	4,   // 96: bilibili.app.playurl.v1.StreamInfo.err_code:type_name -> bilibili.app.playurl.v1.PlayErr
	42,  // 97: bilibili.app.playurl.v1.StreamInfo.limit:type_name -> bilibili.app.playurl.v1.StreamLimit
	43,  // 98: bilibili.app.playurl.v1.UpgradeLimit.button:type_name -> bilibili.app.playurl.v1.UpgradeButton
	40,  // 99: bilibili.app.playurl.v1.VideoInfo.stream_list:type_name -> bilibili.app.playurl.v1.Stream
	14,  // 100: bilibili.app.playurl.v1.VideoInfo.dash_audio:type_name -> bilibili.app.playurl.v1.DashItem
	16,  // 101: bilibili.app.playurl.v1.VideoInfo.dolby:type_name -> bilibili.app.playurl.v1.DolbyItem
	46,  // 102: bilibili.app.playurl.v1.VideoInfo.volume:type_name -> bilibili.app.playurl.v1.VolumeInfo
	31,  // 103: bilibili.app.playurl.v1.PlayURL.PlayURL:input_type -> bilibili.app.playurl.v1.PlayURLReq
	35,  // 104: bilibili.app.playurl.v1.PlayURL.Project:input_type -> bilibili.app.playurl.v1.ProjectReq
	33,  // 105: bilibili.app.playurl.v1.PlayURL.PlayView:input_type -> bilibili.app.playurl.v1.PlayViewReq
	25,  // 106: bilibili.app.playurl.v1.PlayURL.PlayConfEdit:input_type -> bilibili.app.playurl.v1.PlayConfEditReq
	27,  // 107: bilibili.app.playurl.v1.PlayURL.PlayConf:input_type -> bilibili.app.playurl.v1.PlayConfReq
	30,  // 108: bilibili.app.playurl.v1.PlayURL.PlayURL:output_type -> bilibili.app.playurl.v1.PlayURLReply
	34,  // 109: bilibili.app.playurl.v1.PlayURL.Project:output_type -> bilibili.app.playurl.v1.ProjectReply
	32,  // 110: bilibili.app.playurl.v1.PlayURL.PlayView:output_type -> bilibili.app.playurl.v1.PlayViewReply
	24,  // 111: bilibili.app.playurl.v1.PlayURL.PlayConfEdit:output_type -> bilibili.app.playurl.v1.PlayConfEditReply
	26,  // 112: bilibili.app.playurl.v1.PlayURL.PlayConf:output_type -> bilibili.app.playurl.v1.PlayConfReply
	108, // [108:113] is the sub-list for method output_type
	103, // [103:108] is the sub-list for method input_type
	103, // [103:103] is the sub-list for extension type_name
	103, // [103:103] is the sub-list for extension extendee
	0,   // [0:103] is the sub-list for field type_name
}

func init() { file_bilibili_app_playurl_v1_playurl_proto_init() }
func file_bilibili_app_playurl_v1_playurl_proto_init() {
	if File_bilibili_app_playurl_v1_playurl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArcConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chronos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DolbyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Glance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayAbilityConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayArcConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayConfEditReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayConfEditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayConfReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayConfState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayURLReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayURLReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayViewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_app_playurl_v1_playurl_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bilibili_app_playurl_v1_playurl_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ConfValue_SwitchVal)(nil),
		(*ConfValue_SelectedVal)(nil),
	}
	file_bilibili_app_playurl_v1_playurl_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*FieldValue_Switch)(nil),
	}
	file_bilibili_app_playurl_v1_playurl_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*Stream_DashVideo)(nil),
		(*Stream_SegmentVideo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_app_playurl_v1_playurl_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bilibili_app_playurl_v1_playurl_proto_goTypes,
		DependencyIndexes: file_bilibili_app_playurl_v1_playurl_proto_depIdxs,
		EnumInfos:         file_bilibili_app_playurl_v1_playurl_proto_enumTypes,
		MessageInfos:      file_bilibili_app_playurl_v1_playurl_proto_msgTypes,
	}.Build()
	File_bilibili_app_playurl_v1_playurl_proto = out.File
	file_bilibili_app_playurl_v1_playurl_proto_rawDesc = nil
	file_bilibili_app_playurl_v1_playurl_proto_goTypes = nil
	file_bilibili_app_playurl_v1_playurl_proto_depIdxs = nil
}
