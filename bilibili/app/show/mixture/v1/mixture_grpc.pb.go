// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/app/show/mixture/v1/mixture.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mixture_Widget_FullMethodName = "/bilibili.app.show.mixture.v1.Mixture/Widget"
)

// MixtureClient is the client API for Mixture service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MixtureClient interface {
	Widget(ctx context.Context, in *WidgetReq, opts ...grpc.CallOption) (*WidgetReply, error)
}

type mixtureClient struct {
	cc grpc.ClientConnInterface
}

func NewMixtureClient(cc grpc.ClientConnInterface) MixtureClient {
	return &mixtureClient{cc}
}

func (c *mixtureClient) Widget(ctx context.Context, in *WidgetReq, opts ...grpc.CallOption) (*WidgetReply, error) {
	out := new(WidgetReply)
	err := c.cc.Invoke(ctx, Mixture_Widget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixtureServer is the server API for Mixture service.
// All implementations must embed UnimplementedMixtureServer
// for forward compatibility
type MixtureServer interface {
	Widget(context.Context, *WidgetReq) (*WidgetReply, error)
	mustEmbedUnimplementedMixtureServer()
}

// UnimplementedMixtureServer must be embedded to have forward compatible implementations.
type UnimplementedMixtureServer struct {
}

func (UnimplementedMixtureServer) Widget(context.Context, *WidgetReq) (*WidgetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Widget not implemented")
}
func (UnimplementedMixtureServer) mustEmbedUnimplementedMixtureServer() {}

// UnsafeMixtureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MixtureServer will
// result in compilation errors.
type UnsafeMixtureServer interface {
	mustEmbedUnimplementedMixtureServer()
}

func RegisterMixtureServer(s grpc.ServiceRegistrar, srv MixtureServer) {
	s.RegisterService(&Mixture_ServiceDesc, srv)
}

func _Mixture_Widget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WidgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixtureServer).Widget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mixture_Widget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixtureServer).Widget(ctx, req.(*WidgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mixture_ServiceDesc is the grpc.ServiceDesc for Mixture service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mixture_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.show.mixture.v1.Mixture",
	HandlerType: (*MixtureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Widget",
			Handler:    _Mixture_Widget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/app/show/mixture/v1/mixture.proto",
}
