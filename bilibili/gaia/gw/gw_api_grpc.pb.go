// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bilibili/gaia/gw/gw_api.proto

package gw

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gaia_ExUploadAppList_FullMethodName  = "/bilibili.gaia.gw.Gaia/ExUploadAppList"
	Gaia_ExFetchPublicKey_FullMethodName = "/bilibili.gaia.gw.Gaia/ExFetchPublicKey"
)

// GaiaClient is the client API for Gaia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GaiaClient interface {
	// 应用列表上报
	ExUploadAppList(ctx context.Context, in *GaiaEncryptMsgReq, opts ...grpc.CallOption) (*UploadAppListReply, error)
	// 拉取rsa公钥
	ExFetchPublicKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FetchPublicKeyReply, error)
}

type gaiaClient struct {
	cc grpc.ClientConnInterface
}

func NewGaiaClient(cc grpc.ClientConnInterface) GaiaClient {
	return &gaiaClient{cc}
}

func (c *gaiaClient) ExUploadAppList(ctx context.Context, in *GaiaEncryptMsgReq, opts ...grpc.CallOption) (*UploadAppListReply, error) {
	out := new(UploadAppListReply)
	err := c.cc.Invoke(ctx, Gaia_ExUploadAppList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaClient) ExFetchPublicKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FetchPublicKeyReply, error) {
	out := new(FetchPublicKeyReply)
	err := c.cc.Invoke(ctx, Gaia_ExFetchPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GaiaServer is the server API for Gaia service.
// All implementations must embed UnimplementedGaiaServer
// for forward compatibility
type GaiaServer interface {
	// 应用列表上报
	ExUploadAppList(context.Context, *GaiaEncryptMsgReq) (*UploadAppListReply, error)
	// 拉取rsa公钥
	ExFetchPublicKey(context.Context, *empty.Empty) (*FetchPublicKeyReply, error)
	mustEmbedUnimplementedGaiaServer()
}

// UnimplementedGaiaServer must be embedded to have forward compatible implementations.
type UnimplementedGaiaServer struct {
}

func (UnimplementedGaiaServer) ExUploadAppList(context.Context, *GaiaEncryptMsgReq) (*UploadAppListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExUploadAppList not implemented")
}
func (UnimplementedGaiaServer) ExFetchPublicKey(context.Context, *empty.Empty) (*FetchPublicKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExFetchPublicKey not implemented")
}
func (UnimplementedGaiaServer) mustEmbedUnimplementedGaiaServer() {}

// UnsafeGaiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GaiaServer will
// result in compilation errors.
type UnsafeGaiaServer interface {
	mustEmbedUnimplementedGaiaServer()
}

func RegisterGaiaServer(s grpc.ServiceRegistrar, srv GaiaServer) {
	s.RegisterService(&Gaia_ServiceDesc, srv)
}

func _Gaia_ExUploadAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GaiaEncryptMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaServer).ExUploadAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gaia_ExUploadAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaServer).ExUploadAppList(ctx, req.(*GaiaEncryptMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gaia_ExFetchPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaServer).ExFetchPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gaia_ExFetchPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaServer).ExFetchPublicKey(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Gaia_ServiceDesc is the grpc.ServiceDesc for Gaia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gaia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.gaia.gw.Gaia",
	HandlerType: (*GaiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExUploadAppList",
			Handler:    _Gaia_ExUploadAppList_Handler,
		},
		{
			MethodName: "ExFetchPublicKey",
			Handler:    _Gaia_ExFetchPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/gaia/gw/gw_api.proto",
}
